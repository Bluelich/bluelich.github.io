{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"61f5a3f7f6ce55839a942b685db6703999a3d13e","modified":1531582944521},{"_id":"source/CNAME","hash":"1f13887d0a9b98ee0be4f0c9a96eda168fd7e51b","modified":1463936486000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1531629632296},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1531629632297},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1531629632297},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1531629632225},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1531629632297},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1531629632299},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1531629632299},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1531629632299},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1531629632299},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1531629632300},{"_id":"themes/next/_config.yml","hash":"c7c55633a0b1ae6a8a9b960f370867263357c198","modified":1531630104000},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1531629632300},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1531629632300},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1531629632305},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1531629632330},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468847015000},{"_id":"source/_posts/Linus-Torva.md","hash":"8525a86e46bf5ae69d4f0dc03b4db5ed8551b30d","modified":1469290469000},{"_id":"source/_posts/Mac-OSX平台软件推荐.md","hash":"42f3abf69627f2136c180619ec3ba47a478f2501","modified":1469290531000},{"_id":"source/_posts/Runloop.md","hash":"07626849b1a98fd6eb76ddef2e2eb3c4a502f49a","modified":1490162810000},{"_id":"source/_posts/Using-Sleep-Analysis-in-HealthKit-with-Swift.md","hash":"c566cce60b0aaf85c52eadc31ddf8effa59e7b78","modified":1469277357000},{"_id":"source/_posts/在macOS上实现多进程任务处理.md","hash":"2ddda615ba1d2d8dbf13ad5b73c577aea5748ac4","modified":1530801793013},{"_id":"source/_posts/简单算法实现之《中国剩余定理》.md","hash":"172a70ee1c49de155080a7b92633595ade0541aa","modified":1466247276000},{"_id":"source/_posts/转-优秀程序设计一十八原则.md","hash":"1ba5638a1321f077e02438b1a0d19c2f1a85d344","modified":1487813577000},{"_id":"source/categories/index.md","hash":"41d0e6d26184d6c6a625d7a8f48ae20786a28a33","modified":1463935615000},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1486539276000},{"_id":"source/tags/index.md","hash":"5ed52a647589264a6768fa3f51fdc29992156bc9","modified":1486539798000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1531629632297},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1531629632298},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1531629632298},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1531629632298},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1531629632298},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1531629632299},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1531629632301},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1531629632301},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1531629632301},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1531629632301},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1531629632302},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1531629632302},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1531629632302},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1531629632302},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1531629632302},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1531629632306},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1531629632306},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1531629632306},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1531629632306},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1531629632307},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1531629632307},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1531629632307},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1531629632307},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1531629632308},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1531629632308},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1531629632308},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1531629632308},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1531629632308},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1531629632309},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1531629632309},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1531629632309},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1531629632309},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1531629632310},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1531629632329},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1531629632329},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1531629632330},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1531629632330},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1531629632330},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1531629632330},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1531629632330},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1531629632331},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1531629632331},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1531629632331},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1531629632380},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1531629632380},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1531629632380},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632359},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1531629632303},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1531629632303},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1531629632303},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1531629632303},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1531629632303},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1531629632304},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1531629632304},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1531629632304},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1531629632304},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1531629632304},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1531629632305},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1531629632305},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1531629632305},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1531629632310},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1531629632310},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1531629632310},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1531629632311},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1531629632312},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1531629632312},{"_id":"themes/next/layout/_macro/post.swig","hash":"544b26c49309420ec078acf2e3681e3eb9fe9892","modified":1531629632312},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1531629632313},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1531629632313},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1531629632313},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1531629632314},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d64a38577dd2cf3c9a56c5b28d479fb315918ad1","modified":1531629632314},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cf8fe76993b513b97f379832222b6ec7e41a1c15","modified":1531629632314},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1531629632316},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1531629632316},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1531629632319},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1531629632319},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1531629632319},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1531629632320},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1531629632323},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1531629632324},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1531629632325},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1531629632325},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1531629632326},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1531629632326},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1531629632326},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1531629632326},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1531629632327},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1531629632332},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1531629632332},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1531629632332},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1531629632332},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1531629632333},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"545102e3aa3ce494f7046abf71cefb7aaf671559","modified":1531629632333},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1531629632333},{"_id":"themes/next/scripts/tags/note.js","hash":"265dc7ee83d3fe317e88058e80aa8170230a005e","modified":1531629632333},{"_id":"themes/next/scripts/tags/tabs.js","hash":"6bdf2a1a23cb9922fa809c79af3b06339c28cd70","modified":1531629632334},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1531629632359},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1531629632360},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1531629632360},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531629632360},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1531629632360},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1531629632361},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1531629632361},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1531629632361},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1531629632361},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1531629632362},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1531629632362},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1531629632362},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1531629632362},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531629632363},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1531629632363},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531629632363},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1531629632363},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1531629632363},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531629632364},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632320},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632320},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632351},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632351},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632352},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632358},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531629632359},{"_id":"source/_posts/.Archive/Using-Sleep-Analysis-in-HealthKit-with-Swift.md/2016-07-23 20-35-57.md","hash":"e338d1768bebd12b8ca8f053cdcfbe6afce29a39","modified":1469277357000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1531629632311},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1531629632311},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1531629632314},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1531629632315},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1531629632315},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1531629632315},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1531629632316},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1531629632316},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1531629632316},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1531629632317},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1531629632317},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1531629632317},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1531629632317},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1531629632318},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1531629632318},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1531629632318},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1531629632318},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1531629632319},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1531629632320},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1531629632320},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1531629632321},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1531629632321},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1531629632321},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1531629632321},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1531629632321},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1531629632321},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1531629632322},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1531629632322},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1531629632322},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"43f70cdc999c66b9c7889a13150ec63e99b1fdd0","modified":1531629632322},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1531629632322},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1531629632322},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1531629632322},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1531629632323},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1531629632323},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1531629632323},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"8f1415d4013baa064136bf20420a326c20a9d8dd","modified":1531629632324},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1531629632324},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1531629632324},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"73723630eee3988127f9b9e06fd234b276e4f458","modified":1531629632324},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1531629632325},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1531629632325},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1531629632326},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1531629632328},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1531629632328},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1531629632329},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1531629632329},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1531629632351},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1531629632351},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1531629632352},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1531629632351},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1531629632358},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1531629632358},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1531629632358},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1531629632359},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1531629632364},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1531629632364},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1531629632364},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1531629632365},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1531629632365},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1531629632365},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1531629632365},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1531629632366},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1531629632366},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1531629632366},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1531629632367},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1531629632367},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1531629632367},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1531629632367},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1531629632367},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1531629632378},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1531629632379},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1531629632379},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1531629632374},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1531629632328},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1531629632328},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1531629632334},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1531629632334},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1531629632335},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1531629632335},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1531629632335},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1531629632339},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1531629632345},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1531629632350},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1531629632350},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1531629632350},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1531629632350},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1531629632350},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1531629632351},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1531629632351},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1531629632352},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1531629632352},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1531629632352},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1531629632353},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1531629632353},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1531629632353},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1531629632353},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1531629632354},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1531629632355},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1531629632356},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1531629632355},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1531629632356},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1531629632356},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1531629632356},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1531629632357},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1531629632357},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1531629632357},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1531629632357},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1531629632357},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1531629632357},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1531629632366},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1531629632368},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1531629632368},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1531629632369},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1531629632374},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1531629632375},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1531629632371},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1531629632372},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1531629632378},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1531629632335},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1531629632336},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1531629632336},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1531629632336},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1531629632336},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1531629632337},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1531629632337},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1531629632337},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1531629632337},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1531629632338},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1531629632338},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1531629632338},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1531629632338},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1531629632339},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1531629632339},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1531629632339},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1531629632339},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1531629632340},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1531629632340},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1531629632340},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1531629632340},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1531629632341},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1531629632341},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1531629632341},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1531629632341},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1531629632341},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1531629632342},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1531629632342},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1531629632342},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1531629632342},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1531629632342},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1531629632343},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1531629632343},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1531629632343},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1531629632343},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1531629632344},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1531629632344},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1531629632344},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1531629632344},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1531629632345},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1531629632345},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1531629632345},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1531629632347},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1531629632348},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1531629632348},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1531629632348},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1531629632348},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1531629632348},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1531629632349},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1531629632349},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1531629632349},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1531629632349},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1531629632345},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1531629632346},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1531629632346},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1531629632346},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1531629632346},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1531629632346},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1531629632347},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1531629632347},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1531629632347},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1531629632354},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1531629632354},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1531629632356},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1531629632370},{"_id":"public/atom.xml","hash":"5266c0b28450b1dafe8dfe70173740e3fea0d116","modified":1532093617160},{"_id":"public/search.xml","hash":"aff1919c5c9e6113a81b997790112bc2afedbca7","modified":1532093617164},{"_id":"public/sitemap.xml","hash":"6db83fc305ef2d40121e706088cedc71a1725c8a","modified":1532093617164},{"_id":"public/categories/index.html","hash":"06f9bc6f9aea4211a441301f9097d44dfdb548a2","modified":1532093617168},{"_id":"public/tags/index.html","hash":"daa65cb8ba8d01f04be8c7d2739990883b006687","modified":1532093617168},{"_id":"public/archives/2016/04/index.html","hash":"9093561498dcb9f571a2a2bc5cc4ff74f2486d40","modified":1532093617168},{"_id":"public/archives/2016/06/index.html","hash":"0a753410bbe74103a29106c2e899aa010d51f3ba","modified":1532093617168},{"_id":"public/archives/2016/07/index.html","hash":"3eb75926b0fc0cdd6f6ea3486d6d3fbfd2e0b2ae","modified":1532093617168},{"_id":"public/archives/2016/08/index.html","hash":"f1df6edad3d043ed9eeeaa42d29d577b72c78eac","modified":1532093617168},{"_id":"public/archives/2016/12/index.html","hash":"cdf5bbfa6a7ec1c92439b4402c678a215a5cbf3b","modified":1532093617168},{"_id":"public/archives/2017/index.html","hash":"b407cba2b9cb4514a5f5389db1e283f7e0bf24ba","modified":1532093617168},{"_id":"public/archives/2017/07/index.html","hash":"d249c7955f4bb4416967446f1883678dcae6126b","modified":1532093617168},{"_id":"public/tags/转载/index.html","hash":"12d5e25547b2f9355dd61f3804fdfa34fdcdcb8d","modified":1532093617168},{"_id":"public/tags/iOS/index.html","hash":"50d2a4813e99b3dc4b595d5aebfd2fd4757bcadc","modified":1532093617169},{"_id":"public/tags/Runloop/index.html","hash":"14876130f12ce68456ac63d2b53efbeff2d6b31e","modified":1532093617169},{"_id":"public/tags/macOS/index.html","hash":"4c081116db95fa6fbcef65c7b8ce8d046e84eab9","modified":1532093617169},{"_id":"public/tags/Xcode/index.html","hash":"1521a2db9c1b37be9add1582ebe541be7bc411b4","modified":1532093617169},{"_id":"public/tags/多进程/index.html","hash":"4c795d9b1c78db06336512ec42d0775ca1d6e686","modified":1532093617169},{"_id":"public/tags/算法/index.html","hash":"99370559b27976cabfafc6eec766e9d1bb640434","modified":1532093617169},{"_id":"public/2017/07/05/在macOS上实现多进程任务处理/index.html","hash":"96a49f28ff49858d9e05ee00865393f913011ded","modified":1532093617169},{"_id":"public/2016/12/08/Runloop/index.html","hash":"dd5de6f9d0065f21358182af6ed8c6edf70e005c","modified":1532093617169},{"_id":"public/2016/08/05/转-优秀程序设计一十八原则/index.html","hash":"439e9aad3509170a9332cc19a824a5798dd7c575","modified":1532093617169},{"_id":"public/2016/07/18/Using-Sleep-Analysis-in-HealthKit-with-Swift/index.html","hash":"7f3982dbadb200be5032675cb0dc7a95da364e87","modified":1532093617169},{"_id":"public/2016/06/11/Mac-OSX平台软件推荐/index.html","hash":"af0860d22f75fa45316dc32f86007340eb51755a","modified":1532093617169},{"_id":"public/2016/04/30/Linus-Torva/index.html","hash":"4255b6107c574574657d10f34a8668f0042573f3","modified":1532093617169},{"_id":"public/2016/04/24/简单算法实现之《中国剩余定理》/index.html","hash":"e11dcb4976e9a3dba2bd6dcaeb192dda1c73a54a","modified":1532093617169},{"_id":"public/archives/index.html","hash":"de6398dd52652266f56222d2d943ba9200b7a10f","modified":1532093617169},{"_id":"public/archives/2016/index.html","hash":"2ac6ea75f37e2a6ad36dbe8d724cff6feb60703d","modified":1532093617170},{"_id":"public/index.html","hash":"49d0b70ae3637719a5737d724b8617ec9a27bbf7","modified":1532093617170},{"_id":"public/page/2/index.html","hash":"75223b02e26882636944358080ca726825b6bc4e","modified":1532093617170},{"_id":"public/CNAME","hash":"1f13887d0a9b98ee0be4f0c9a96eda168fd7e51b","modified":1532093617175},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1532093617175},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532093617175},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1532093617175},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1532093617175},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1532093617175},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1532093617175},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1532093617175},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1532093617175},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1532093617175},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1532093617175},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532093617175},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532093617175},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532093617175},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1532093617176},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532093617176},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1532093617176},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1532093617176},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1532093617176},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1532093617176},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1532093617176},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532093617592},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532093617593},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1532093617594},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1532093617594},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1532093617595},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1532093617595},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1532093617595},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1532093617595},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1532093617595},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1532093617595},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1532093617595},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1532093617595},{"_id":"public/css/main.css","hash":"586d690c626955ee26dc20fb5ca1143bbddbc544","modified":1532093617595},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532093617595},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1532093617595},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1532093617595},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1532093617595},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1532093617595},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1532093617595},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1532093617601},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1532093617603},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1532093617603},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1532093617603},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1532093617605},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1532093617607}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2016-05-22T16:46:16.000Z","_content":"# 设置当前 page 类型为 categories\n\ntype: \"categories\"\n\n# 设置当前页评论关闭\n\ncomments: false","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-05-23 00:46:16\n---\n# 设置当前 page 类型为 categories\n\ntype: \"categories\"\n\n# 设置当前页评论关闭\n\ncomments: false","updated":"2016-05-22T16:46:55.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjju0zbsc000nf1s6viq3qrc6","content":"<h1 id=\"设置当前-page-类型为-categories\"><a href=\"#设置当前-page-类型为-categories\" class=\"headerlink\" title=\"设置当前 page 类型为 categories\"></a>设置当前 page 类型为 categories</h1><p>type: “categories”</p>\n<h1 id=\"设置当前页评论关闭\"><a href=\"#设置当前页评论关闭\" class=\"headerlink\" title=\"设置当前页评论关闭\"></a>设置当前页评论关闭</h1><p>comments: false</p>\n","excerpt":"","more":"<h1 id=\"设置当前-page-类型为-categories\"><a href=\"#设置当前-page-类型为-categories\" class=\"headerlink\" title=\"设置当前 page 类型为 categories\"></a>设置当前 page 类型为 categories</h1><p>type: “categories”</p>\n<h1 id=\"设置当前页评论关闭\"><a href=\"#设置当前页评论关闭\" class=\"headerlink\" title=\"设置当前页评论关闭\"></a>设置当前页评论关闭</h1><p>comments: false</p>\n"},{"title":"标签","date":"2016-05-22T16:43:41.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle:  标签\ndate: 2016-05-23 00:43:41\ntype: tags\n---","updated":"2017-02-08T07:43:18.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjju0zbsd000pf1s6tdttz70u","content":"","excerpt":"","more":""}],"Post":[{"title":"Linus Torva","date":"2016-04-30T15:55:09.000Z","_content":"## [转载(译)]Linux25 周年：专访 Linux 之父\n\n[原文(英文)][1]\n[中文][2]\n\n1991年，22岁的Linus Torvalds设计了Linux的系统内核。在Linux系统诞生25周年之际，Linux之父在采访中回忆了这四分之一个世纪以来他和Linux的故事。\n\n![][image-1]\n\n1991 年，22 岁的 Linus Torvalds 一边在芬兰赫尔辛基大学学习计算机，一边设计了 Linux 的系统内核。之后，Linux 迅速发展为一个可以在智能手机、服务器等各种平台上运行的功能全面的开源操作系统。在 Linux 系统诞生 25 周年之际，Linux 之父 Linus Torvalds 在采访中回忆了这四分之一个世纪以来他和 Linux 的故事。<!-- more -->\n###### 记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发 Linux 的时候就知道的吗？\nLinus Torvalds：现在想起来，我觉得自己当年真是初生牛犊不怕虎。如果当时我真的知道从头建立一个操作系统的难度，肯定是不会有勇气去做的。这种年少无知也让我从一开始就没有按照前人的老路编程编写内核。\n我既不知道自己想要的系统应该怎么做，也不知道其他的操作系统是怎么完成的。所以我会认真考虑和接受其他人提出的好建议。这样的开始让 Linux 成为了开源系统。用户们不需要全盘接受任何一个版本，任何人都可以按照自己的想法改写出自己的版本来。我觉得这种开源的方式让创造出一个好系统更容易，也鼓励了很多编程爱好者人参与进来。\n###### 记者：有没有让你现在感到后悔的 Linux 早期技术决策呢？\nLinus Torvalds：糟糕的决策都是可以改的。那些因为决策错误走了弯路所浪费的时间和精力会让人很烦躁。不过到最后，往往都可以从错误中吸取经验，所以一切都是值得的。我宁可迅速决策，哪怕做错了也比纠结太久要好。\n在 2001 年左右 Linux 的虚拟内存子系统出了问题时，大家关于未来的方向争论不休，而且内存配置也出了问题。但是现在回过头看，虽然过程很痛苦，但是这些问题并不能毁灭 Linux。这值得我们骄傲。\n###### 记者：Linux 在迅速发展的过程中，让你印象比较深的转变是哪几次？\nLinus Torvalds：两个转变过渡让我印象最深刻。第一次是很早在 1992 的时候，当其他热心的用户开始把他们完成的补丁发给我时，我已经独立开发了 6 个月，我还不太习惯用。所以我会仔细地检查他们想修复的是哪个问题，然后自己再写一遍。有时候跟他们写得非常像，也有时候会有大不相同。\n再然后，我开始信任一些用户，直接应用他们的补丁。而不是什么都自己重写一遍。只要我有时间，还是会经常修改他们的补丁。那段时间我练就了一身迅速读补丁然后修改的功夫，感觉自己闭眼都能完成。\n之后 Linux 就这样运行了很久。习惯了这样的模式，第二次改变就困难了很多。是在 2000 年前后，当时 Linux 已经有了很多商业应用，而且用户量也越来越大。大家都开始抱怨我的工作速度已经在影响 Linux 的效率。但是那时也合适的工具来管理开发资源。\n所以我们引进了 BItKeeper 作为源代码的维护工具。Bitkeeper 允许真正的分布式开发，每个人都拥有自己的主副本。在当时成倍提高了内核的开发效率，并且让我意识到程序员们可以在一个分布式的开发模型中一起工作，而我不应该是唯一的同步点。\n后来 2005 年我开始以分布式源控制管理的思想着手开发 Git，为了作为一种过渡方案来替代 BitKeeper。虽然让开发人员认可 Git 花了不少功夫，但是 Git 作为一个开放源码的版本控制软件获得了巨大的成功。\n![][image-2]\n\n###### 记者：你怎么看 Linux 并没有成为个人电脑的主流操作系统呢?\nLinus Torvalds：在这方面，Linux 还需要继续努力。个人电脑是用户非常私人化的。为什么个人电脑使用 Linux 系统的用户不够多呢？我觉得用户惯性是很重要的原因之一。有了电脑出厂时预置的操作系统，大多数人不会轻易重装自己电脑的操作系统。现在，比如 Chromebooks（谷歌上网，Linus 本人多次称赞）上安装 Linux 操作系统就不错，虽然功能有限。\n不过，对于用户而言同样私密同样重要的智能手机方面，多谢基于 Linux 内核的 Android，Linux 应用量还比较不错。\n###### 记者：Linux 最让你惊讶的地方是什么呢？\n现在很少会惊讶的感觉了。毕竟 Linux 已经成为很多新硬件专业的设备或一些新的网络基础设施或什么的的默认开发环境。会让我惊讶的往往是人们又赋予了 Linux 一些新的应用领域，比如在我还认为 Linux 只能作为工作站或者服务器的操作系统时，又有一些厂商选择 Linux 作为冰箱或电视（比如 TiVo）的操作程序，让我吃了一惊。\n###### 记者：你认为 Linux 目前面临的最大挑战是什么呢？\nLinus Torvalds：用户经常担心 Linux 的系统内核会变得越来越复杂，从而变得难以理解，一旦有错误也难以修复。不过实际上现在 Linux 内核运转的非常好。另一个我们面临的持续挑战就是很多运载着 Linux 系统的电子设备不断更新后的适配问题。不过现在很多厂商会帮助我们进行调整，已经比之前好很多了。很多开源项目一定很嫉妒我们所拥有的资源。\n###### 记者：最近的科技的发展方向上，你最感兴趣的是什么？\nLinus Torvalds：我一直对核心硬件很感兴趣，尤其是 CPU。这是我开始独立开发操作系统的原因。我会很高兴看到新的硬件出现。当然，大多数时间是在现有的硬件改动很小，但技术的发展就应该是这样一小步一小步进行的。我会一直关注相关领域的发展。\n虽然我自己没有从事相关领域的工作，但我也非常感兴趣人工智能的发展。人工智能一直被认为是即将实现，但是一直没有真的实现的东西。不过最近有迹象表明人工智能的实现指日可待，我也跟大家一样很期待。人工智能的特点在于可以学习，不再需人类编程进行控制。但是我认为这也是为什么他们永远没法代替传统的电脑编程。人类的确需要聪明的机器，但是人类也需要会乖乖听话做事的机器。\n###### 记者：你觉得 Linux 在 50 周年的时候还会一如现在一样流行吗？\nLinus Torvalds：把去预测 Linux 的未来会是什么样的问题交给评论家们吧，我更愿意做一个脚踏实地的工程师，每天尽全力专注于 Linux 的每一个小问题和小决策。\n\n本文由 TECH2IPO / 创见 二两白 编译，译文由创见首发，转载请注明[出处][3]\n\n[1]:\thttp://spectrum.ieee.org/computing/software/linux-at-25-qa-with-linus-torvalds\n[2]:\thttp://tech2ipo.com/10028810\n[3]:\thttp://tech2ipo.com/10028810\n\n[image-1]:\thttp://7xt8tf.com1.z0.glb.clouddn.com/linus.png/blog\n[image-2]:\thttp://upload-images.jianshu.io/upload_images/139624-e4cce1e0bca753ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","source":"_posts/Linus-Torva.md","raw":"---\ntitle: Linus Torva\ndate: 2016-04-30 23:55:09\ntags: 转载\n---\n## [转载(译)]Linux25 周年：专访 Linux 之父\n\n[原文(英文)][1]\n[中文][2]\n\n1991年，22岁的Linus Torvalds设计了Linux的系统内核。在Linux系统诞生25周年之际，Linux之父在采访中回忆了这四分之一个世纪以来他和Linux的故事。\n\n![][image-1]\n\n1991 年，22 岁的 Linus Torvalds 一边在芬兰赫尔辛基大学学习计算机，一边设计了 Linux 的系统内核。之后，Linux 迅速发展为一个可以在智能手机、服务器等各种平台上运行的功能全面的开源操作系统。在 Linux 系统诞生 25 周年之际，Linux 之父 Linus Torvalds 在采访中回忆了这四分之一个世纪以来他和 Linux 的故事。<!-- more -->\n###### 记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发 Linux 的时候就知道的吗？\nLinus Torvalds：现在想起来，我觉得自己当年真是初生牛犊不怕虎。如果当时我真的知道从头建立一个操作系统的难度，肯定是不会有勇气去做的。这种年少无知也让我从一开始就没有按照前人的老路编程编写内核。\n我既不知道自己想要的系统应该怎么做，也不知道其他的操作系统是怎么完成的。所以我会认真考虑和接受其他人提出的好建议。这样的开始让 Linux 成为了开源系统。用户们不需要全盘接受任何一个版本，任何人都可以按照自己的想法改写出自己的版本来。我觉得这种开源的方式让创造出一个好系统更容易，也鼓励了很多编程爱好者人参与进来。\n###### 记者：有没有让你现在感到后悔的 Linux 早期技术决策呢？\nLinus Torvalds：糟糕的决策都是可以改的。那些因为决策错误走了弯路所浪费的时间和精力会让人很烦躁。不过到最后，往往都可以从错误中吸取经验，所以一切都是值得的。我宁可迅速决策，哪怕做错了也比纠结太久要好。\n在 2001 年左右 Linux 的虚拟内存子系统出了问题时，大家关于未来的方向争论不休，而且内存配置也出了问题。但是现在回过头看，虽然过程很痛苦，但是这些问题并不能毁灭 Linux。这值得我们骄傲。\n###### 记者：Linux 在迅速发展的过程中，让你印象比较深的转变是哪几次？\nLinus Torvalds：两个转变过渡让我印象最深刻。第一次是很早在 1992 的时候，当其他热心的用户开始把他们完成的补丁发给我时，我已经独立开发了 6 个月，我还不太习惯用。所以我会仔细地检查他们想修复的是哪个问题，然后自己再写一遍。有时候跟他们写得非常像，也有时候会有大不相同。\n再然后，我开始信任一些用户，直接应用他们的补丁。而不是什么都自己重写一遍。只要我有时间，还是会经常修改他们的补丁。那段时间我练就了一身迅速读补丁然后修改的功夫，感觉自己闭眼都能完成。\n之后 Linux 就这样运行了很久。习惯了这样的模式，第二次改变就困难了很多。是在 2000 年前后，当时 Linux 已经有了很多商业应用，而且用户量也越来越大。大家都开始抱怨我的工作速度已经在影响 Linux 的效率。但是那时也合适的工具来管理开发资源。\n所以我们引进了 BItKeeper 作为源代码的维护工具。Bitkeeper 允许真正的分布式开发，每个人都拥有自己的主副本。在当时成倍提高了内核的开发效率，并且让我意识到程序员们可以在一个分布式的开发模型中一起工作，而我不应该是唯一的同步点。\n后来 2005 年我开始以分布式源控制管理的思想着手开发 Git，为了作为一种过渡方案来替代 BitKeeper。虽然让开发人员认可 Git 花了不少功夫，但是 Git 作为一个开放源码的版本控制软件获得了巨大的成功。\n![][image-2]\n\n###### 记者：你怎么看 Linux 并没有成为个人电脑的主流操作系统呢?\nLinus Torvalds：在这方面，Linux 还需要继续努力。个人电脑是用户非常私人化的。为什么个人电脑使用 Linux 系统的用户不够多呢？我觉得用户惯性是很重要的原因之一。有了电脑出厂时预置的操作系统，大多数人不会轻易重装自己电脑的操作系统。现在，比如 Chromebooks（谷歌上网，Linus 本人多次称赞）上安装 Linux 操作系统就不错，虽然功能有限。\n不过，对于用户而言同样私密同样重要的智能手机方面，多谢基于 Linux 内核的 Android，Linux 应用量还比较不错。\n###### 记者：Linux 最让你惊讶的地方是什么呢？\n现在很少会惊讶的感觉了。毕竟 Linux 已经成为很多新硬件专业的设备或一些新的网络基础设施或什么的的默认开发环境。会让我惊讶的往往是人们又赋予了 Linux 一些新的应用领域，比如在我还认为 Linux 只能作为工作站或者服务器的操作系统时，又有一些厂商选择 Linux 作为冰箱或电视（比如 TiVo）的操作程序，让我吃了一惊。\n###### 记者：你认为 Linux 目前面临的最大挑战是什么呢？\nLinus Torvalds：用户经常担心 Linux 的系统内核会变得越来越复杂，从而变得难以理解，一旦有错误也难以修复。不过实际上现在 Linux 内核运转的非常好。另一个我们面临的持续挑战就是很多运载着 Linux 系统的电子设备不断更新后的适配问题。不过现在很多厂商会帮助我们进行调整，已经比之前好很多了。很多开源项目一定很嫉妒我们所拥有的资源。\n###### 记者：最近的科技的发展方向上，你最感兴趣的是什么？\nLinus Torvalds：我一直对核心硬件很感兴趣，尤其是 CPU。这是我开始独立开发操作系统的原因。我会很高兴看到新的硬件出现。当然，大多数时间是在现有的硬件改动很小，但技术的发展就应该是这样一小步一小步进行的。我会一直关注相关领域的发展。\n虽然我自己没有从事相关领域的工作，但我也非常感兴趣人工智能的发展。人工智能一直被认为是即将实现，但是一直没有真的实现的东西。不过最近有迹象表明人工智能的实现指日可待，我也跟大家一样很期待。人工智能的特点在于可以学习，不再需人类编程进行控制。但是我认为这也是为什么他们永远没法代替传统的电脑编程。人类的确需要聪明的机器，但是人类也需要会乖乖听话做事的机器。\n###### 记者：你觉得 Linux 在 50 周年的时候还会一如现在一样流行吗？\nLinus Torvalds：把去预测 Linux 的未来会是什么样的问题交给评论家们吧，我更愿意做一个脚踏实地的工程师，每天尽全力专注于 Linux 的每一个小问题和小决策。\n\n本文由 TECH2IPO / 创见 二两白 编译，译文由创见首发，转载请注明[出处][3]\n\n[1]:\thttp://spectrum.ieee.org/computing/software/linux-at-25-qa-with-linus-torvalds\n[2]:\thttp://tech2ipo.com/10028810\n[3]:\thttp://tech2ipo.com/10028810\n\n[image-1]:\thttp://7xt8tf.com1.z0.glb.clouddn.com/linus.png/blog\n[image-2]:\thttp://upload-images.jianshu.io/upload_images/139624-e4cce1e0bca753ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","slug":"Linus-Torva","published":1,"updated":"2016-07-23T16:14:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbnj0000f1s6lonmgc71","content":"<h2 id=\"转载-译-Linux25-周年：专访-Linux-之父\"><a href=\"#转载-译-Linux25-周年：专访-Linux-之父\" class=\"headerlink\" title=\"[转载(译)]Linux25 周年：专访 Linux 之父\"></a>[转载(译)]Linux25 周年：专访 Linux 之父</h2><p><a href=\"http://spectrum.ieee.org/computing/software/linux-at-25-qa-with-linus-torvalds\" target=\"_blank\" rel=\"external\">原文(英文)</a><br><a href=\"http://tech2ipo.com/10028810\" target=\"_blank\" rel=\"external\">中文</a></p>\n<p>1991年，22岁的Linus Torvalds设计了Linux的系统内核。在Linux系统诞生25周年之际，Linux之父在采访中回忆了这四分之一个世纪以来他和Linux的故事。</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/linus.png/blog\" alt=\"\"></p>\n<p>1991 年，22 岁的 Linus Torvalds 一边在芬兰赫尔辛基大学学习计算机，一边设计了 Linux 的系统内核。之后，Linux 迅速发展为一个可以在智能手机、服务器等各种平台上运行的功能全面的开源操作系统。在 Linux 系统诞生 25 周年之际，Linux 之父 Linus Torvalds 在采访中回忆了这四分之一个世纪以来他和 Linux 的故事。<a id=\"more\"></a></p>\n<h6 id=\"记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发-Linux-的时候就知道的吗？\"><a href=\"#记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发-Linux-的时候就知道的吗？\" class=\"headerlink\" title=\"记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发 Linux 的时候就知道的吗？\"></a>记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发 Linux 的时候就知道的吗？</h6><p>Linus Torvalds：现在想起来，我觉得自己当年真是初生牛犊不怕虎。如果当时我真的知道从头建立一个操作系统的难度，肯定是不会有勇气去做的。这种年少无知也让我从一开始就没有按照前人的老路编程编写内核。<br>我既不知道自己想要的系统应该怎么做，也不知道其他的操作系统是怎么完成的。所以我会认真考虑和接受其他人提出的好建议。这样的开始让 Linux 成为了开源系统。用户们不需要全盘接受任何一个版本，任何人都可以按照自己的想法改写出自己的版本来。我觉得这种开源的方式让创造出一个好系统更容易，也鼓励了很多编程爱好者人参与进来。</p>\n<h6 id=\"记者：有没有让你现在感到后悔的-Linux-早期技术决策呢？\"><a href=\"#记者：有没有让你现在感到后悔的-Linux-早期技术决策呢？\" class=\"headerlink\" title=\"记者：有没有让你现在感到后悔的 Linux 早期技术决策呢？\"></a>记者：有没有让你现在感到后悔的 Linux 早期技术决策呢？</h6><p>Linus Torvalds：糟糕的决策都是可以改的。那些因为决策错误走了弯路所浪费的时间和精力会让人很烦躁。不过到最后，往往都可以从错误中吸取经验，所以一切都是值得的。我宁可迅速决策，哪怕做错了也比纠结太久要好。<br>在 2001 年左右 Linux 的虚拟内存子系统出了问题时，大家关于未来的方向争论不休，而且内存配置也出了问题。但是现在回过头看，虽然过程很痛苦，但是这些问题并不能毁灭 Linux。这值得我们骄傲。</p>\n<h6 id=\"记者：Linux-在迅速发展的过程中，让你印象比较深的转变是哪几次？\"><a href=\"#记者：Linux-在迅速发展的过程中，让你印象比较深的转变是哪几次？\" class=\"headerlink\" title=\"记者：Linux 在迅速发展的过程中，让你印象比较深的转变是哪几次？\"></a>记者：Linux 在迅速发展的过程中，让你印象比较深的转变是哪几次？</h6><p>Linus Torvalds：两个转变过渡让我印象最深刻。第一次是很早在 1992 的时候，当其他热心的用户开始把他们完成的补丁发给我时，我已经独立开发了 6 个月，我还不太习惯用。所以我会仔细地检查他们想修复的是哪个问题，然后自己再写一遍。有时候跟他们写得非常像，也有时候会有大不相同。<br>再然后，我开始信任一些用户，直接应用他们的补丁。而不是什么都自己重写一遍。只要我有时间，还是会经常修改他们的补丁。那段时间我练就了一身迅速读补丁然后修改的功夫，感觉自己闭眼都能完成。<br>之后 Linux 就这样运行了很久。习惯了这样的模式，第二次改变就困难了很多。是在 2000 年前后，当时 Linux 已经有了很多商业应用，而且用户量也越来越大。大家都开始抱怨我的工作速度已经在影响 Linux 的效率。但是那时也合适的工具来管理开发资源。<br>所以我们引进了 BItKeeper 作为源代码的维护工具。Bitkeeper 允许真正的分布式开发，每个人都拥有自己的主副本。在当时成倍提高了内核的开发效率，并且让我意识到程序员们可以在一个分布式的开发模型中一起工作，而我不应该是唯一的同步点。<br>后来 2005 年我开始以分布式源控制管理的思想着手开发 Git，为了作为一种过渡方案来替代 BitKeeper。虽然让开发人员认可 Git 花了不少功夫，但是 Git 作为一个开放源码的版本控制软件获得了巨大的成功。<br><img src=\"http://upload-images.jianshu.io/upload_images/139624-e4cce1e0bca753ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h6 id=\"记者：你怎么看-Linux-并没有成为个人电脑的主流操作系统呢\"><a href=\"#记者：你怎么看-Linux-并没有成为个人电脑的主流操作系统呢\" class=\"headerlink\" title=\"记者：你怎么看 Linux 并没有成为个人电脑的主流操作系统呢?\"></a>记者：你怎么看 Linux 并没有成为个人电脑的主流操作系统呢?</h6><p>Linus Torvalds：在这方面，Linux 还需要继续努力。个人电脑是用户非常私人化的。为什么个人电脑使用 Linux 系统的用户不够多呢？我觉得用户惯性是很重要的原因之一。有了电脑出厂时预置的操作系统，大多数人不会轻易重装自己电脑的操作系统。现在，比如 Chromebooks（谷歌上网，Linus 本人多次称赞）上安装 Linux 操作系统就不错，虽然功能有限。<br>不过，对于用户而言同样私密同样重要的智能手机方面，多谢基于 Linux 内核的 Android，Linux 应用量还比较不错。</p>\n<h6 id=\"记者：Linux-最让你惊讶的地方是什么呢？\"><a href=\"#记者：Linux-最让你惊讶的地方是什么呢？\" class=\"headerlink\" title=\"记者：Linux 最让你惊讶的地方是什么呢？\"></a>记者：Linux 最让你惊讶的地方是什么呢？</h6><p>现在很少会惊讶的感觉了。毕竟 Linux 已经成为很多新硬件专业的设备或一些新的网络基础设施或什么的的默认开发环境。会让我惊讶的往往是人们又赋予了 Linux 一些新的应用领域，比如在我还认为 Linux 只能作为工作站或者服务器的操作系统时，又有一些厂商选择 Linux 作为冰箱或电视（比如 TiVo）的操作程序，让我吃了一惊。</p>\n<h6 id=\"记者：你认为-Linux-目前面临的最大挑战是什么呢？\"><a href=\"#记者：你认为-Linux-目前面临的最大挑战是什么呢？\" class=\"headerlink\" title=\"记者：你认为 Linux 目前面临的最大挑战是什么呢？\"></a>记者：你认为 Linux 目前面临的最大挑战是什么呢？</h6><p>Linus Torvalds：用户经常担心 Linux 的系统内核会变得越来越复杂，从而变得难以理解，一旦有错误也难以修复。不过实际上现在 Linux 内核运转的非常好。另一个我们面临的持续挑战就是很多运载着 Linux 系统的电子设备不断更新后的适配问题。不过现在很多厂商会帮助我们进行调整，已经比之前好很多了。很多开源项目一定很嫉妒我们所拥有的资源。</p>\n<h6 id=\"记者：最近的科技的发展方向上，你最感兴趣的是什么？\"><a href=\"#记者：最近的科技的发展方向上，你最感兴趣的是什么？\" class=\"headerlink\" title=\"记者：最近的科技的发展方向上，你最感兴趣的是什么？\"></a>记者：最近的科技的发展方向上，你最感兴趣的是什么？</h6><p>Linus Torvalds：我一直对核心硬件很感兴趣，尤其是 CPU。这是我开始独立开发操作系统的原因。我会很高兴看到新的硬件出现。当然，大多数时间是在现有的硬件改动很小，但技术的发展就应该是这样一小步一小步进行的。我会一直关注相关领域的发展。<br>虽然我自己没有从事相关领域的工作，但我也非常感兴趣人工智能的发展。人工智能一直被认为是即将实现，但是一直没有真的实现的东西。不过最近有迹象表明人工智能的实现指日可待，我也跟大家一样很期待。人工智能的特点在于可以学习，不再需人类编程进行控制。但是我认为这也是为什么他们永远没法代替传统的电脑编程。人类的确需要聪明的机器，但是人类也需要会乖乖听话做事的机器。</p>\n<h6 id=\"记者：你觉得-Linux-在-50-周年的时候还会一如现在一样流行吗？\"><a href=\"#记者：你觉得-Linux-在-50-周年的时候还会一如现在一样流行吗？\" class=\"headerlink\" title=\"记者：你觉得 Linux 在 50 周年的时候还会一如现在一样流行吗？\"></a>记者：你觉得 Linux 在 50 周年的时候还会一如现在一样流行吗？</h6><p>Linus Torvalds：把去预测 Linux 的未来会是什么样的问题交给评论家们吧，我更愿意做一个脚踏实地的工程师，每天尽全力专注于 Linux 的每一个小问题和小决策。</p>\n<p>本文由 TECH2IPO / 创见 二两白 编译，译文由创见首发，转载请注明<a href=\"http://tech2ipo.com/10028810\" target=\"_blank\" rel=\"external\">出处</a></p>\n","excerpt":"<h2 id=\"转载-译-Linux25-周年：专访-Linux-之父\"><a href=\"#转载-译-Linux25-周年：专访-Linux-之父\" class=\"headerlink\" title=\"[转载(译)]Linux25 周年：专访 Linux 之父\"></a>[转载(译)]Linux25 周年：专访 Linux 之父</h2><p><a href=\"http://spectrum.ieee.org/computing/software/linux-at-25-qa-with-linus-torvalds\">原文(英文)</a><br><a href=\"http://tech2ipo.com/10028810\">中文</a></p>\n<p>1991年，22岁的Linus Torvalds设计了Linux的系统内核。在Linux系统诞生25周年之际，Linux之父在采访中回忆了这四分之一个世纪以来他和Linux的故事。</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/linus.png/blog\" alt=\"\"></p>\n<p>1991 年，22 岁的 Linus Torvalds 一边在芬兰赫尔辛基大学学习计算机，一边设计了 Linux 的系统内核。之后，Linux 迅速发展为一个可以在智能手机、服务器等各种平台上运行的功能全面的开源操作系统。在 Linux 系统诞生 25 周年之际，Linux 之父 Linus Torvalds 在采访中回忆了这四分之一个世纪以来他和 Linux 的故事。","more":"</p>\n<h6 id=\"记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发-Linux-的时候就知道的吗？\"><a href=\"#记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发-Linux-的时候就知道的吗？\" class=\"headerlink\" title=\"记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发 Linux 的时候就知道的吗？\"></a>记者：现在你比二十五年前要有更丰富的编程经验，有什么你希望自己在当年刚开发 Linux 的时候就知道的吗？</h6><p>Linus Torvalds：现在想起来，我觉得自己当年真是初生牛犊不怕虎。如果当时我真的知道从头建立一个操作系统的难度，肯定是不会有勇气去做的。这种年少无知也让我从一开始就没有按照前人的老路编程编写内核。<br>我既不知道自己想要的系统应该怎么做，也不知道其他的操作系统是怎么完成的。所以我会认真考虑和接受其他人提出的好建议。这样的开始让 Linux 成为了开源系统。用户们不需要全盘接受任何一个版本，任何人都可以按照自己的想法改写出自己的版本来。我觉得这种开源的方式让创造出一个好系统更容易，也鼓励了很多编程爱好者人参与进来。</p>\n<h6 id=\"记者：有没有让你现在感到后悔的-Linux-早期技术决策呢？\"><a href=\"#记者：有没有让你现在感到后悔的-Linux-早期技术决策呢？\" class=\"headerlink\" title=\"记者：有没有让你现在感到后悔的 Linux 早期技术决策呢？\"></a>记者：有没有让你现在感到后悔的 Linux 早期技术决策呢？</h6><p>Linus Torvalds：糟糕的决策都是可以改的。那些因为决策错误走了弯路所浪费的时间和精力会让人很烦躁。不过到最后，往往都可以从错误中吸取经验，所以一切都是值得的。我宁可迅速决策，哪怕做错了也比纠结太久要好。<br>在 2001 年左右 Linux 的虚拟内存子系统出了问题时，大家关于未来的方向争论不休，而且内存配置也出了问题。但是现在回过头看，虽然过程很痛苦，但是这些问题并不能毁灭 Linux。这值得我们骄傲。</p>\n<h6 id=\"记者：Linux-在迅速发展的过程中，让你印象比较深的转变是哪几次？\"><a href=\"#记者：Linux-在迅速发展的过程中，让你印象比较深的转变是哪几次？\" class=\"headerlink\" title=\"记者：Linux 在迅速发展的过程中，让你印象比较深的转变是哪几次？\"></a>记者：Linux 在迅速发展的过程中，让你印象比较深的转变是哪几次？</h6><p>Linus Torvalds：两个转变过渡让我印象最深刻。第一次是很早在 1992 的时候，当其他热心的用户开始把他们完成的补丁发给我时，我已经独立开发了 6 个月，我还不太习惯用。所以我会仔细地检查他们想修复的是哪个问题，然后自己再写一遍。有时候跟他们写得非常像，也有时候会有大不相同。<br>再然后，我开始信任一些用户，直接应用他们的补丁。而不是什么都自己重写一遍。只要我有时间，还是会经常修改他们的补丁。那段时间我练就了一身迅速读补丁然后修改的功夫，感觉自己闭眼都能完成。<br>之后 Linux 就这样运行了很久。习惯了这样的模式，第二次改变就困难了很多。是在 2000 年前后，当时 Linux 已经有了很多商业应用，而且用户量也越来越大。大家都开始抱怨我的工作速度已经在影响 Linux 的效率。但是那时也合适的工具来管理开发资源。<br>所以我们引进了 BItKeeper 作为源代码的维护工具。Bitkeeper 允许真正的分布式开发，每个人都拥有自己的主副本。在当时成倍提高了内核的开发效率，并且让我意识到程序员们可以在一个分布式的开发模型中一起工作，而我不应该是唯一的同步点。<br>后来 2005 年我开始以分布式源控制管理的思想着手开发 Git，为了作为一种过渡方案来替代 BitKeeper。虽然让开发人员认可 Git 花了不少功夫，但是 Git 作为一个开放源码的版本控制软件获得了巨大的成功。<br><img src=\"http://upload-images.jianshu.io/upload_images/139624-e4cce1e0bca753ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h6 id=\"记者：你怎么看-Linux-并没有成为个人电脑的主流操作系统呢\"><a href=\"#记者：你怎么看-Linux-并没有成为个人电脑的主流操作系统呢\" class=\"headerlink\" title=\"记者：你怎么看 Linux 并没有成为个人电脑的主流操作系统呢?\"></a>记者：你怎么看 Linux 并没有成为个人电脑的主流操作系统呢?</h6><p>Linus Torvalds：在这方面，Linux 还需要继续努力。个人电脑是用户非常私人化的。为什么个人电脑使用 Linux 系统的用户不够多呢？我觉得用户惯性是很重要的原因之一。有了电脑出厂时预置的操作系统，大多数人不会轻易重装自己电脑的操作系统。现在，比如 Chromebooks（谷歌上网，Linus 本人多次称赞）上安装 Linux 操作系统就不错，虽然功能有限。<br>不过，对于用户而言同样私密同样重要的智能手机方面，多谢基于 Linux 内核的 Android，Linux 应用量还比较不错。</p>\n<h6 id=\"记者：Linux-最让你惊讶的地方是什么呢？\"><a href=\"#记者：Linux-最让你惊讶的地方是什么呢？\" class=\"headerlink\" title=\"记者：Linux 最让你惊讶的地方是什么呢？\"></a>记者：Linux 最让你惊讶的地方是什么呢？</h6><p>现在很少会惊讶的感觉了。毕竟 Linux 已经成为很多新硬件专业的设备或一些新的网络基础设施或什么的的默认开发环境。会让我惊讶的往往是人们又赋予了 Linux 一些新的应用领域，比如在我还认为 Linux 只能作为工作站或者服务器的操作系统时，又有一些厂商选择 Linux 作为冰箱或电视（比如 TiVo）的操作程序，让我吃了一惊。</p>\n<h6 id=\"记者：你认为-Linux-目前面临的最大挑战是什么呢？\"><a href=\"#记者：你认为-Linux-目前面临的最大挑战是什么呢？\" class=\"headerlink\" title=\"记者：你认为 Linux 目前面临的最大挑战是什么呢？\"></a>记者：你认为 Linux 目前面临的最大挑战是什么呢？</h6><p>Linus Torvalds：用户经常担心 Linux 的系统内核会变得越来越复杂，从而变得难以理解，一旦有错误也难以修复。不过实际上现在 Linux 内核运转的非常好。另一个我们面临的持续挑战就是很多运载着 Linux 系统的电子设备不断更新后的适配问题。不过现在很多厂商会帮助我们进行调整，已经比之前好很多了。很多开源项目一定很嫉妒我们所拥有的资源。</p>\n<h6 id=\"记者：最近的科技的发展方向上，你最感兴趣的是什么？\"><a href=\"#记者：最近的科技的发展方向上，你最感兴趣的是什么？\" class=\"headerlink\" title=\"记者：最近的科技的发展方向上，你最感兴趣的是什么？\"></a>记者：最近的科技的发展方向上，你最感兴趣的是什么？</h6><p>Linus Torvalds：我一直对核心硬件很感兴趣，尤其是 CPU。这是我开始独立开发操作系统的原因。我会很高兴看到新的硬件出现。当然，大多数时间是在现有的硬件改动很小，但技术的发展就应该是这样一小步一小步进行的。我会一直关注相关领域的发展。<br>虽然我自己没有从事相关领域的工作，但我也非常感兴趣人工智能的发展。人工智能一直被认为是即将实现，但是一直没有真的实现的东西。不过最近有迹象表明人工智能的实现指日可待，我也跟大家一样很期待。人工智能的特点在于可以学习，不再需人类编程进行控制。但是我认为这也是为什么他们永远没法代替传统的电脑编程。人类的确需要聪明的机器，但是人类也需要会乖乖听话做事的机器。</p>\n<h6 id=\"记者：你觉得-Linux-在-50-周年的时候还会一如现在一样流行吗？\"><a href=\"#记者：你觉得-Linux-在-50-周年的时候还会一如现在一样流行吗？\" class=\"headerlink\" title=\"记者：你觉得 Linux 在 50 周年的时候还会一如现在一样流行吗？\"></a>记者：你觉得 Linux 在 50 周年的时候还会一如现在一样流行吗？</h6><p>Linus Torvalds：把去预测 Linux 的未来会是什么样的问题交给评论家们吧，我更愿意做一个脚踏实地的工程师，每天尽全力专注于 Linux 的每一个小问题和小决策。</p>\n<p>本文由 TECH2IPO / 创见 二两白 编译，译文由创见首发，转载请注明<a href=\"http://tech2ipo.com/10028810\">出处</a></p>"},{"title":"浅析Runloop","date":"2016-12-08T05:48:50.000Z","_content":"\n有一定iOS开发经验的人可能都听说过`RunLoop`。`RunLoop`，顾名思义，就是run loop ，跑圈的意思。\n\nApple对`Runloop`是这么解释的：\n\n>  The NSRunLoop class declares the programmatic interface to objects that manage input sources. An NSRunLoop object processes input for sources such as mouse and keyboard events from the window system, NSPort objects, and NSConnection objects. An NSRunLoop object also processes NSTimer events.\n\n​\t \n简单的，`Runloop`可以理解为一个事件循环，循环中执行不同的代码，直到进入下一次循环的条件不足为止！\n\n`Runloop`不是线程，不是GCD，而是一个对象，在一个APP里面不是唯一的。<!--more -->\n\n下面的这个图介绍了代码执行最常见的两种方式，命令式和event驱动的。其中一个是一次执行到底，而另外一个是反复不停地进行某一个行为，也就是跑圈。\n![runloop_1](http://7xt8tf.com1.z0.glb.clouddn.com/runloop_1.png/blog)\n\n\n`RunLoop`就是事件驱动模型的代表。这种模型被称作 Event Loop。 Event Loop 在很多系统和框架里都有实现，比如 Node.js 的事件处理，比如 Windows 程序的消息循环，再比如 OSX/iOS 里的 `RunLoop`。实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。\n\n所以，RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 \"接受消息-&gt;等待-&gt;处理\" 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。\n\nOSX/iOS 系统中，提供了两个这样的对象：`NSRunLoop` 和 `CFRunLoopRef`。\n`CFRunLoopRef` 是在 `CoreFoundation` 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。而`NSRunLoop` 是基于` CFRunLoopRef`的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。`CoreFoundation`和`Foundation`对象在ARC中处理也是不一样的。所以使用`RunLoop`的时候一定要小心。\n\nApple 在`RunLoop`的介绍里还特别强调了下：\n\n> The NSRunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an NSRunLoop object running in a different thread, as doing so might cause unexpected results.\n\n虽然我们无法创建RunLoop，但是Apple给我们提供了两个自动获取的函数：`CFRunLoopGetMain()` 和 `CFRunLoopGetCurrent()`\n\n线程和 `RunLoop` 之间是一一对应的，一个线程只能有唯一对应的`runloop`，但这个`runloop`里可以嵌套子`runloop`，然后把他们之间的关系保存在一个全局的 Dictionary 里。线程刚创建时并没有 `RunLoop`，如果你不主动获取，那它一直都不会有。`RunLoop` 的创建是发生在第一次获取时，`RunLoop` 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 `RunLoop`（主线程除外）\n\n下面介绍一点稍深入点的知识\n先上图\n![runloop_2](http://7xt8tf.com1.z0.glb.clouddn.com/runloop_2.png/blog)\n\n\n\n`RunnLoop`有几个运行状态下的Mode\n\n1. `kCFRunLoopDefaultMode`: App的默认 Mode，通常主线程是在这个 Mode 下运行的。\n2. `UITrackingRunLoopMode`: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响，提高用户体验。\n3. `UIInitializationRunLoopMode`: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。\n4. `GSEventReceiveRunLoopMode`: 接受系统事件的内部 - \n5. `kCFRunLoopCommonModes`: 这是一个占位的 Mode，没有实际作用。\n\n\n\n一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 `RunLoop` 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。\n​\t\t\nSource/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 `RunLoop` 会直接退出，不进入循环。\n\n这里还有个概念叫 CommonModes，一个 Mode 可以将自己标记为Common。每当 `RunLoop` 的内容发生变化时，RunLoop 都会自动将 CommonMode Items 里的 Source/Observer/Timer 同步到有 Common  标记的所有Mode里。\n\n我们在开发中经常会用到定时器，如果细心点就会发现，timer在你滑动的时候就会被停止，当滑动结束的时候才会继续。这就是因为mode不同造成的。我们可以把timer也加到滑动专用的trackingMode中去，这样timer就可以在滑动的时候保持继续运行！\n\n详解：\n在主线程的 `RunLoop` 里有两个预置的 Mode：`kCFRunLoopDefaultMode` 和 `UITrackingRunLoopMode`。这两个 Mode 都已经被标记为 Common 属性。DefaultMode 是 App 默认状态下所处的状态，`TrackingRunLoopMode` 是追踪滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个滚动视图时，`RunLoop` 会将 mode 切换为 `TrackingRunLoopMode`，这时 Timer 就不会被回调，并且也不会影响到滑动操作。如果将这个 Timer 分别加入这两个 Mode，或者将 Timer 加入到顶层的 RunLoop 的 CommonMode Items 中。CommonModeItems 被 `RunLoop` 自动更新到所有具有 Common 属性的 Mode 里去。这样就解决了Timer的回调问题。\n\n还有一个`RunLoop`对象类型，叫做`CFRunLoopObserverRef`。它就是RunLoop的观察者，每一个observer都需要指定一个回调函数的指针，在当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。\n`RunLoop`的状态有这么几个\n```kCFRunLoopEntry---------------------------------------即将进入Loop\nkCFRunLoopBeforeTimers--------------------------------即将处理Timer\nkCFRunLoopBeforeSources-------------------------------即将处理Source\nkCFRunLoopBeforeWaiting-------------------------------即将进入休眠\nkCFRunLoopAfterWaiting--------------------------------刚从休眠中唤醒\nkCFRunLoopExit----------------------------------------即将退出Loop\n```\n\n有个很出名的cell自动计算行高的高性能三方框架就是利用这个做的优化！ 利用`RunLoop`即将进入休眠的间隙去做一些耗时的运算，可以大幅减少数据刷新的整体耗时，提高用户体验！\n\n小Tips：\n初学iOS的时候，很多人会有疑问，被标记了`autorelease`的对象究竟在什么时候释放了？到了`RunLoop`这里就有了答案。`RunLoop`BeforeWaiting时，对`autorelease`的对象发送消息,将这次Loop中产生的autorelease对象释放！\n\n最后提供一些资料：\n1. [sunnyxx的RunLoop线下分享](http://v.youku.com/v_show/id_XODgxODkzODI0.html)\n2. [深入理解RunLoop](http://blog.ibireme.com/2015/05/18/runloop/) \n3. [CFRunLoopRef源码](https://opensource.apple.com/tarballs/CF/)\n\n\n\n","source":"_posts/Runloop.md","raw":"---\ntitle: 浅析Runloop\ndate: 2016-12-08 13:48:50\ntags: [iOS,Runloop]\n---\n\n有一定iOS开发经验的人可能都听说过`RunLoop`。`RunLoop`，顾名思义，就是run loop ，跑圈的意思。\n\nApple对`Runloop`是这么解释的：\n\n>  The NSRunLoop class declares the programmatic interface to objects that manage input sources. An NSRunLoop object processes input for sources such as mouse and keyboard events from the window system, NSPort objects, and NSConnection objects. An NSRunLoop object also processes NSTimer events.\n\n​\t \n简单的，`Runloop`可以理解为一个事件循环，循环中执行不同的代码，直到进入下一次循环的条件不足为止！\n\n`Runloop`不是线程，不是GCD，而是一个对象，在一个APP里面不是唯一的。<!--more -->\n\n下面的这个图介绍了代码执行最常见的两种方式，命令式和event驱动的。其中一个是一次执行到底，而另外一个是反复不停地进行某一个行为，也就是跑圈。\n![runloop_1](http://7xt8tf.com1.z0.glb.clouddn.com/runloop_1.png/blog)\n\n\n`RunLoop`就是事件驱动模型的代表。这种模型被称作 Event Loop。 Event Loop 在很多系统和框架里都有实现，比如 Node.js 的事件处理，比如 Windows 程序的消息循环，再比如 OSX/iOS 里的 `RunLoop`。实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。\n\n所以，RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 \"接受消息-&gt;等待-&gt;处理\" 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。\n\nOSX/iOS 系统中，提供了两个这样的对象：`NSRunLoop` 和 `CFRunLoopRef`。\n`CFRunLoopRef` 是在 `CoreFoundation` 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。而`NSRunLoop` 是基于` CFRunLoopRef`的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。`CoreFoundation`和`Foundation`对象在ARC中处理也是不一样的。所以使用`RunLoop`的时候一定要小心。\n\nApple 在`RunLoop`的介绍里还特别强调了下：\n\n> The NSRunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an NSRunLoop object running in a different thread, as doing so might cause unexpected results.\n\n虽然我们无法创建RunLoop，但是Apple给我们提供了两个自动获取的函数：`CFRunLoopGetMain()` 和 `CFRunLoopGetCurrent()`\n\n线程和 `RunLoop` 之间是一一对应的，一个线程只能有唯一对应的`runloop`，但这个`runloop`里可以嵌套子`runloop`，然后把他们之间的关系保存在一个全局的 Dictionary 里。线程刚创建时并没有 `RunLoop`，如果你不主动获取，那它一直都不会有。`RunLoop` 的创建是发生在第一次获取时，`RunLoop` 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 `RunLoop`（主线程除外）\n\n下面介绍一点稍深入点的知识\n先上图\n![runloop_2](http://7xt8tf.com1.z0.glb.clouddn.com/runloop_2.png/blog)\n\n\n\n`RunnLoop`有几个运行状态下的Mode\n\n1. `kCFRunLoopDefaultMode`: App的默认 Mode，通常主线程是在这个 Mode 下运行的。\n2. `UITrackingRunLoopMode`: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响，提高用户体验。\n3. `UIInitializationRunLoopMode`: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。\n4. `GSEventReceiveRunLoopMode`: 接受系统事件的内部 - \n5. `kCFRunLoopCommonModes`: 这是一个占位的 Mode，没有实际作用。\n\n\n\n一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 `RunLoop` 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。\n​\t\t\nSource/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 `RunLoop` 会直接退出，不进入循环。\n\n这里还有个概念叫 CommonModes，一个 Mode 可以将自己标记为Common。每当 `RunLoop` 的内容发生变化时，RunLoop 都会自动将 CommonMode Items 里的 Source/Observer/Timer 同步到有 Common  标记的所有Mode里。\n\n我们在开发中经常会用到定时器，如果细心点就会发现，timer在你滑动的时候就会被停止，当滑动结束的时候才会继续。这就是因为mode不同造成的。我们可以把timer也加到滑动专用的trackingMode中去，这样timer就可以在滑动的时候保持继续运行！\n\n详解：\n在主线程的 `RunLoop` 里有两个预置的 Mode：`kCFRunLoopDefaultMode` 和 `UITrackingRunLoopMode`。这两个 Mode 都已经被标记为 Common 属性。DefaultMode 是 App 默认状态下所处的状态，`TrackingRunLoopMode` 是追踪滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个滚动视图时，`RunLoop` 会将 mode 切换为 `TrackingRunLoopMode`，这时 Timer 就不会被回调，并且也不会影响到滑动操作。如果将这个 Timer 分别加入这两个 Mode，或者将 Timer 加入到顶层的 RunLoop 的 CommonMode Items 中。CommonModeItems 被 `RunLoop` 自动更新到所有具有 Common 属性的 Mode 里去。这样就解决了Timer的回调问题。\n\n还有一个`RunLoop`对象类型，叫做`CFRunLoopObserverRef`。它就是RunLoop的观察者，每一个observer都需要指定一个回调函数的指针，在当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。\n`RunLoop`的状态有这么几个\n```kCFRunLoopEntry---------------------------------------即将进入Loop\nkCFRunLoopBeforeTimers--------------------------------即将处理Timer\nkCFRunLoopBeforeSources-------------------------------即将处理Source\nkCFRunLoopBeforeWaiting-------------------------------即将进入休眠\nkCFRunLoopAfterWaiting--------------------------------刚从休眠中唤醒\nkCFRunLoopExit----------------------------------------即将退出Loop\n```\n\n有个很出名的cell自动计算行高的高性能三方框架就是利用这个做的优化！ 利用`RunLoop`即将进入休眠的间隙去做一些耗时的运算，可以大幅减少数据刷新的整体耗时，提高用户体验！\n\n小Tips：\n初学iOS的时候，很多人会有疑问，被标记了`autorelease`的对象究竟在什么时候释放了？到了`RunLoop`这里就有了答案。`RunLoop`BeforeWaiting时，对`autorelease`的对象发送消息,将这次Loop中产生的autorelease对象释放！\n\n最后提供一些资料：\n1. [sunnyxx的RunLoop线下分享](http://v.youku.com/v_show/id_XODgxODkzODI0.html)\n2. [深入理解RunLoop](http://blog.ibireme.com/2015/05/18/runloop/) \n3. [CFRunLoopRef源码](https://opensource.apple.com/tarballs/CF/)\n\n\n\n","slug":"Runloop","published":1,"updated":"2017-03-22T06:06:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbnn0001f1s68xdmmtp8","content":"<p>有一定iOS开发经验的人可能都听说过<code>RunLoop</code>。<code>RunLoop</code>，顾名思义，就是run loop ，跑圈的意思。</p>\n<p>Apple对<code>Runloop</code>是这么解释的：</p>\n<blockquote>\n<p> The NSRunLoop class declares the programmatic interface to objects that manage input sources. An NSRunLoop object processes input for sources such as mouse and keyboard events from the window system, NSPort objects, and NSConnection objects. An NSRunLoop object also processes NSTimer events.</p>\n</blockquote>\n<p>​<br>简单的，<code>Runloop</code>可以理解为一个事件循环，循环中执行不同的代码，直到进入下一次循环的条件不足为止！</p>\n<p><code>Runloop</code>不是线程，不是GCD，而是一个对象，在一个APP里面不是唯一的。<a id=\"more\"></a></p>\n<p>下面的这个图介绍了代码执行最常见的两种方式，命令式和event驱动的。其中一个是一次执行到底，而另外一个是反复不停地进行某一个行为，也就是跑圈。<br><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/runloop_1.png/blog\" alt=\"runloop_1\"></p>\n<p><code>RunLoop</code>就是事件驱动模型的代表。这种模型被称作 Event Loop。 Event Loop 在很多系统和框架里都有实现，比如 Node.js 的事件处理，比如 Windows 程序的消息循环，再比如 OSX/iOS 里的 <code>RunLoop</code>。实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。</p>\n<p>所以，RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 “接受消息-&gt;等待-&gt;处理” 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。</p>\n<p>OSX/iOS 系统中，提供了两个这样的对象：<code>NSRunLoop</code> 和 <code>CFRunLoopRef</code>。<br><code>CFRunLoopRef</code> 是在 <code>CoreFoundation</code> 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。而<code>NSRunLoop</code> 是基于<code>CFRunLoopRef</code>的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。<code>CoreFoundation</code>和<code>Foundation</code>对象在ARC中处理也是不一样的。所以使用<code>RunLoop</code>的时候一定要小心。</p>\n<p>Apple 在<code>RunLoop</code>的介绍里还特别强调了下：</p>\n<blockquote>\n<p>The NSRunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an NSRunLoop object running in a different thread, as doing so might cause unexpected results.</p>\n</blockquote>\n<p>虽然我们无法创建RunLoop，但是Apple给我们提供了两个自动获取的函数：<code>CFRunLoopGetMain()</code> 和 <code>CFRunLoopGetCurrent()</code></p>\n<p>线程和 <code>RunLoop</code> 之间是一一对应的，一个线程只能有唯一对应的<code>runloop</code>，但这个<code>runloop</code>里可以嵌套子<code>runloop</code>，然后把他们之间的关系保存在一个全局的 Dictionary 里。线程刚创建时并没有 <code>RunLoop</code>，如果你不主动获取，那它一直都不会有。<code>RunLoop</code> 的创建是发生在第一次获取时，<code>RunLoop</code> 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 <code>RunLoop</code>（主线程除外）</p>\n<p>下面介绍一点稍深入点的知识<br>先上图<br><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/runloop_2.png/blog\" alt=\"runloop_2\"></p>\n<p><code>RunnLoop</code>有几个运行状态下的Mode</p>\n<ol>\n<li><code>kCFRunLoopDefaultMode</code>: App的默认 Mode，通常主线程是在这个 Mode 下运行的。</li>\n<li><code>UITrackingRunLoopMode</code>: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响，提高用户体验。</li>\n<li><code>UIInitializationRunLoopMode</code>: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。</li>\n<li><code>GSEventReceiveRunLoopMode</code>: 接受系统事件的内部 - </li>\n<li><code>kCFRunLoopCommonModes</code>: 这是一个占位的 Mode，没有实际作用。</li>\n</ol>\n<p>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 <code>RunLoop</code> 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。<br>​<br>Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 <code>RunLoop</code> 会直接退出，不进入循环。</p>\n<p>这里还有个概念叫 CommonModes，一个 Mode 可以将自己标记为Common。每当 <code>RunLoop</code> 的内容发生变化时，RunLoop 都会自动将 CommonMode Items 里的 Source/Observer/Timer 同步到有 Common  标记的所有Mode里。</p>\n<p>我们在开发中经常会用到定时器，如果细心点就会发现，timer在你滑动的时候就会被停止，当滑动结束的时候才会继续。这就是因为mode不同造成的。我们可以把timer也加到滑动专用的trackingMode中去，这样timer就可以在滑动的时候保持继续运行！</p>\n<p>详解：<br>在主线程的 <code>RunLoop</code> 里有两个预置的 Mode：<code>kCFRunLoopDefaultMode</code> 和 <code>UITrackingRunLoopMode</code>。这两个 Mode 都已经被标记为 Common 属性。DefaultMode 是 App 默认状态下所处的状态，<code>TrackingRunLoopMode</code> 是追踪滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个滚动视图时，<code>RunLoop</code> 会将 mode 切换为 <code>TrackingRunLoopMode</code>，这时 Timer 就不会被回调，并且也不会影响到滑动操作。如果将这个 Timer 分别加入这两个 Mode，或者将 Timer 加入到顶层的 RunLoop 的 CommonMode Items 中。CommonModeItems 被 <code>RunLoop</code> 自动更新到所有具有 Common 属性的 Mode 里去。这样就解决了Timer的回调问题。</p>\n<p>还有一个<code>RunLoop</code>对象类型，叫做<code>CFRunLoopObserverRef</code>。它就是RunLoop的观察者，每一个observer都需要指定一个回调函数的指针，在当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。<br><code>RunLoop</code>的状态有这么几个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kCFRunLoopBeforeTimers--------------------------------即将处理Timer</span><br><span class=\"line\">kCFRunLoopBeforeSources-------------------------------即将处理Source</span><br><span class=\"line\">kCFRunLoopBeforeWaiting-------------------------------即将进入休眠</span><br><span class=\"line\">kCFRunLoopAfterWaiting--------------------------------刚从休眠中唤醒</span><br><span class=\"line\">kCFRunLoopExit----------------------------------------即将退出Loop</span><br></pre></td></tr></table></figure></p>\n<p>有个很出名的cell自动计算行高的高性能三方框架就是利用这个做的优化！ 利用<code>RunLoop</code>即将进入休眠的间隙去做一些耗时的运算，可以大幅减少数据刷新的整体耗时，提高用户体验！</p>\n<p>小Tips：<br>初学iOS的时候，很多人会有疑问，被标记了<code>autorelease</code>的对象究竟在什么时候释放了？到了<code>RunLoop</code>这里就有了答案。<code>RunLoop</code>BeforeWaiting时，对<code>autorelease</code>的对象发送消息,将这次Loop中产生的autorelease对象释放！</p>\n<p>最后提供一些资料：</p>\n<ol>\n<li><a href=\"http://v.youku.com/v_show/id_XODgxODkzODI0.html\" target=\"_blank\" rel=\"external\">sunnyxx的RunLoop线下分享</a></li>\n<li><a href=\"http://blog.ibireme.com/2015/05/18/runloop/\" target=\"_blank\" rel=\"external\">深入理解RunLoop</a> </li>\n<li><a href=\"https://opensource.apple.com/tarballs/CF/\" target=\"_blank\" rel=\"external\">CFRunLoopRef源码</a></li>\n</ol>\n","excerpt":"<p>有一定iOS开发经验的人可能都听说过<code>RunLoop</code>。<code>RunLoop</code>，顾名思义，就是run loop ，跑圈的意思。</p>\n<p>Apple对<code>Runloop</code>是这么解释的：</p>\n<blockquote>\n<p> The NSRunLoop class declares the programmatic interface to objects that manage input sources. An NSRunLoop object processes input for sources such as mouse and keyboard events from the window system, NSPort objects, and NSConnection objects. An NSRunLoop object also processes NSTimer events.</p>\n</blockquote>\n<p>​<br>简单的，<code>Runloop</code>可以理解为一个事件循环，循环中执行不同的代码，直到进入下一次循环的条件不足为止！</p>\n<p><code>Runloop</code>不是线程，不是GCD，而是一个对象，在一个APP里面不是唯一的。","more":"</p>\n<p>下面的这个图介绍了代码执行最常见的两种方式，命令式和event驱动的。其中一个是一次执行到底，而另外一个是反复不停地进行某一个行为，也就是跑圈。<br><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/runloop_1.png/blog\" alt=\"runloop_1\"></p>\n<p><code>RunLoop</code>就是事件驱动模型的代表。这种模型被称作 Event Loop。 Event Loop 在很多系统和框架里都有实现，比如 Node.js 的事件处理，比如 Windows 程序的消息循环，再比如 OSX/iOS 里的 <code>RunLoop</code>。实现这种模型的关键点在于：如何管理事件/消息，如何让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒。</p>\n<p>所以，RunLoop 实际上就是一个对象，这个对象管理了其需要处理的事件和消息，并提供了一个入口函数来执行上面 Event Loop 的逻辑。线程执行了这个函数后，就会一直处于这个函数内部 “接受消息-&gt;等待-&gt;处理” 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。</p>\n<p>OSX/iOS 系统中，提供了两个这样的对象：<code>NSRunLoop</code> 和 <code>CFRunLoopRef</code>。<br><code>CFRunLoopRef</code> 是在 <code>CoreFoundation</code> 框架内的，它提供了纯 C 函数的 API，所有这些 API 都是线程安全的。而<code>NSRunLoop</code> 是基于<code>CFRunLoopRef</code>的封装，提供了面向对象的 API，但是这些 API 不是线程安全的。<code>CoreFoundation</code>和<code>Foundation</code>对象在ARC中处理也是不一样的。所以使用<code>RunLoop</code>的时候一定要小心。</p>\n<p>Apple 在<code>RunLoop</code>的介绍里还特别强调了下：</p>\n<blockquote>\n<p>The NSRunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an NSRunLoop object running in a different thread, as doing so might cause unexpected results.</p>\n</blockquote>\n<p>虽然我们无法创建RunLoop，但是Apple给我们提供了两个自动获取的函数：<code>CFRunLoopGetMain()</code> 和 <code>CFRunLoopGetCurrent()</code></p>\n<p>线程和 <code>RunLoop</code> 之间是一一对应的，一个线程只能有唯一对应的<code>runloop</code>，但这个<code>runloop</code>里可以嵌套子<code>runloop</code>，然后把他们之间的关系保存在一个全局的 Dictionary 里。线程刚创建时并没有 <code>RunLoop</code>，如果你不主动获取，那它一直都不会有。<code>RunLoop</code> 的创建是发生在第一次获取时，<code>RunLoop</code> 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 <code>RunLoop</code>（主线程除外）</p>\n<p>下面介绍一点稍深入点的知识<br>先上图<br><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/runloop_2.png/blog\" alt=\"runloop_2\"></p>\n<p><code>RunnLoop</code>有几个运行状态下的Mode</p>\n<ol>\n<li><code>kCFRunLoopDefaultMode</code>: App的默认 Mode，通常主线程是在这个 Mode 下运行的。</li>\n<li><code>UITrackingRunLoopMode</code>: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响，提高用户体验。</li>\n<li><code>UIInitializationRunLoopMode</code>: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。</li>\n<li><code>GSEventReceiveRunLoopMode</code>: 接受系统事件的内部 - </li>\n<li><code>kCFRunLoopCommonModes</code>: 这是一个占位的 Mode，没有实际作用。</li>\n</ol>\n<p>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 <code>RunLoop</code> 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。<br>​<br>Source/Timer/Observer 被统称为 mode item，一个 item 可以被同时加入多个 mode。但一个 item 被重复加入同一个 mode 时是不会有效果的。如果一个 mode 中一个 item 都没有，则 <code>RunLoop</code> 会直接退出，不进入循环。</p>\n<p>这里还有个概念叫 CommonModes，一个 Mode 可以将自己标记为Common。每当 <code>RunLoop</code> 的内容发生变化时，RunLoop 都会自动将 CommonMode Items 里的 Source/Observer/Timer 同步到有 Common  标记的所有Mode里。</p>\n<p>我们在开发中经常会用到定时器，如果细心点就会发现，timer在你滑动的时候就会被停止，当滑动结束的时候才会继续。这就是因为mode不同造成的。我们可以把timer也加到滑动专用的trackingMode中去，这样timer就可以在滑动的时候保持继续运行！</p>\n<p>详解：<br>在主线程的 <code>RunLoop</code> 里有两个预置的 Mode：<code>kCFRunLoopDefaultMode</code> 和 <code>UITrackingRunLoopMode</code>。这两个 Mode 都已经被标记为 Common 属性。DefaultMode 是 App 默认状态下所处的状态，<code>TrackingRunLoopMode</code> 是追踪滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个滚动视图时，<code>RunLoop</code> 会将 mode 切换为 <code>TrackingRunLoopMode</code>，这时 Timer 就不会被回调，并且也不会影响到滑动操作。如果将这个 Timer 分别加入这两个 Mode，或者将 Timer 加入到顶层的 RunLoop 的 CommonMode Items 中。CommonModeItems 被 <code>RunLoop</code> 自动更新到所有具有 Common 属性的 Mode 里去。这样就解决了Timer的回调问题。</p>\n<p>还有一个<code>RunLoop</code>对象类型，叫做<code>CFRunLoopObserverRef</code>。它就是RunLoop的观察者，每一个observer都需要指定一个回调函数的指针，在当 RunLoop 的状态发生变化时，观察者就能通过回调接受到这个变化。<br><code>RunLoop</code>的状态有这么几个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kCFRunLoopBeforeTimers--------------------------------即将处理Timer</span><br><span class=\"line\">kCFRunLoopBeforeSources-------------------------------即将处理Source</span><br><span class=\"line\">kCFRunLoopBeforeWaiting-------------------------------即将进入休眠</span><br><span class=\"line\">kCFRunLoopAfterWaiting--------------------------------刚从休眠中唤醒</span><br><span class=\"line\">kCFRunLoopExit----------------------------------------即将退出Loop</span><br></pre></td></tr></table></figure></p>\n<p>有个很出名的cell自动计算行高的高性能三方框架就是利用这个做的优化！ 利用<code>RunLoop</code>即将进入休眠的间隙去做一些耗时的运算，可以大幅减少数据刷新的整体耗时，提高用户体验！</p>\n<p>小Tips：<br>初学iOS的时候，很多人会有疑问，被标记了<code>autorelease</code>的对象究竟在什么时候释放了？到了<code>RunLoop</code>这里就有了答案。<code>RunLoop</code>BeforeWaiting时，对<code>autorelease</code>的对象发送消息,将这次Loop中产生的autorelease对象释放！</p>\n<p>最后提供一些资料：</p>\n<ol>\n<li><a href=\"http://v.youku.com/v_show/id_XODgxODkzODI0.html\">sunnyxx的RunLoop线下分享</a></li>\n<li><a href=\"http://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a> </li>\n<li><a href=\"https://opensource.apple.com/tarballs/CF/\">CFRunLoopRef源码</a></li>\n</ol>"},{"title":"在macOS上实现多进程任务处理","date":"2017-07-05T13:55:09.000Z","_content":"## 前言\n>前段时间,由于公司业务关系,开始了macOS的开发.总体来说macOS的开发是不太顺利的,主要是因为macOS的UI显示和交互处理和iOS完全不同,非常多的控件需要自定义,默认没有 back layer 等.\n后来,因为业务处理需要用到多进程开发就简单的调研了下,多进程的开发开始比较容易的.\n\n## 简介\n>对于多进程,主要的实现方式就是xpc,xpc就是系统用底层的 `mach port` 和 `dispatch`等搞的一套高级API.通过xpc,依赖于主进程起一个新的进程,来处理任务,通过xpc的信道来传输消息.\n使用xpc有很多优势,连接、休眠以及内存等都是系统自动处理的,我们只需要连接上xpc服务,然后按照自定义协议通信就可以了. <!--more-->\n\n## Go\n依赖于主项目创建一个target,选择`XPC Service`,然后设置好`bundle id`,点击`Finish`. Done!\n现在你就已经可以和xpc进行通信了.\n通信需要通过NSXPCConnection获取到对应进程的remote Object,按照协议,向这个Object发消息,接收回调就可以了.\n需要注意的是,进程间通信传递的参数对象需要满足NSSecureCoding,大部分Foundation实现的一些常用的数据类型都满足这个协议,但是满足了NSSecureCoding的不一定都能传递,比如NSError就不行.而且不能传递返回值给对方进程,会导致崩溃,这个不太清楚是什么原因,有想了解的可以深挖.\n其他情况下还想传递的对象参数可以在消息传递前把传递的参数类型放到一个集合里,指定传递的参数类型,这样也是可以的.\n\n## 场景\n使用xpc通常是多进程服务,给主app提供功能扩展,很多macOS系统App都使用了xpc来实现功能分离和数据隔离,可以通过`find /System/Library/Frameworks -name \\*.xpc`来看下macOS系统中有哪些app使用xpc服务,比如说系统的iWork套件和Xcode就用了xpc.\n我们可以把项目中的功能模块进行切分,把部分功能放到xpc服务中去,比如说图片处理,文字渲染预处理等.\n\n## Refer\n1 : https://objccn.io/issue-14-4/\n\n\n","source":"_posts/在macOS上实现多进程任务处理.md","raw":"---\ntitle: 在macOS上实现多进程任务处理\ndate: 2017-07-05 21:55:09\ntags: [iOS,macOS,Xcode,多进程]\n---\n## 前言\n>前段时间,由于公司业务关系,开始了macOS的开发.总体来说macOS的开发是不太顺利的,主要是因为macOS的UI显示和交互处理和iOS完全不同,非常多的控件需要自定义,默认没有 back layer 等.\n后来,因为业务处理需要用到多进程开发就简单的调研了下,多进程的开发开始比较容易的.\n\n## 简介\n>对于多进程,主要的实现方式就是xpc,xpc就是系统用底层的 `mach port` 和 `dispatch`等搞的一套高级API.通过xpc,依赖于主进程起一个新的进程,来处理任务,通过xpc的信道来传输消息.\n使用xpc有很多优势,连接、休眠以及内存等都是系统自动处理的,我们只需要连接上xpc服务,然后按照自定义协议通信就可以了. <!--more-->\n\n## Go\n依赖于主项目创建一个target,选择`XPC Service`,然后设置好`bundle id`,点击`Finish`. Done!\n现在你就已经可以和xpc进行通信了.\n通信需要通过NSXPCConnection获取到对应进程的remote Object,按照协议,向这个Object发消息,接收回调就可以了.\n需要注意的是,进程间通信传递的参数对象需要满足NSSecureCoding,大部分Foundation实现的一些常用的数据类型都满足这个协议,但是满足了NSSecureCoding的不一定都能传递,比如NSError就不行.而且不能传递返回值给对方进程,会导致崩溃,这个不太清楚是什么原因,有想了解的可以深挖.\n其他情况下还想传递的对象参数可以在消息传递前把传递的参数类型放到一个集合里,指定传递的参数类型,这样也是可以的.\n\n## 场景\n使用xpc通常是多进程服务,给主app提供功能扩展,很多macOS系统App都使用了xpc来实现功能分离和数据隔离,可以通过`find /System/Library/Frameworks -name \\*.xpc`来看下macOS系统中有哪些app使用xpc服务,比如说系统的iWork套件和Xcode就用了xpc.\n我们可以把项目中的功能模块进行切分,把部分功能放到xpc服务中去,比如说图片处理,文字渲染预处理等.\n\n## Refer\n1 : https://objccn.io/issue-14-4/\n\n\n","slug":"在macOS上实现多进程任务处理","published":1,"updated":"2018-07-05T14:43:13.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbnp0003f1s6m6kdcu9p","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间,由于公司业务关系,开始了macOS的开发.总体来说macOS的开发是不太顺利的,主要是因为macOS的UI显示和交互处理和iOS完全不同,非常多的控件需要自定义,默认没有 back layer 等.<br>后来,因为业务处理需要用到多进程开发就简单的调研了下,多进程的开发开始比较容易的.</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>对于多进程,主要的实现方式就是xpc,xpc就是系统用底层的 <code>mach port</code> 和 <code>dispatch</code>等搞的一套高级API.通过xpc,依赖于主进程起一个新的进程,来处理任务,通过xpc的信道来传输消息.<br>使用xpc有很多优势,连接、休眠以及内存等都是系统自动处理的,我们只需要连接上xpc服务,然后按照自定义协议通信就可以了. <a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h2><p>依赖于主项目创建一个target,选择<code>XPC Service</code>,然后设置好<code>bundle id</code>,点击<code>Finish</code>. Done!<br>现在你就已经可以和xpc进行通信了.<br>通信需要通过NSXPCConnection获取到对应进程的remote Object,按照协议,向这个Object发消息,接收回调就可以了.<br>需要注意的是,进程间通信传递的参数对象需要满足NSSecureCoding,大部分Foundation实现的一些常用的数据类型都满足这个协议,但是满足了NSSecureCoding的不一定都能传递,比如NSError就不行.而且不能传递返回值给对方进程,会导致崩溃,这个不太清楚是什么原因,有想了解的可以深挖.<br>其他情况下还想传递的对象参数可以在消息传递前把传递的参数类型放到一个集合里,指定传递的参数类型,这样也是可以的.</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>使用xpc通常是多进程服务,给主app提供功能扩展,很多macOS系统App都使用了xpc来实现功能分离和数据隔离,可以通过<code>find /System/Library/Frameworks -name \\*.xpc</code>来看下macOS系统中有哪些app使用xpc服务,比如说系统的iWork套件和Xcode就用了xpc.<br>我们可以把项目中的功能模块进行切分,把部分功能放到xpc服务中去,比如说图片处理,文字渲染预处理等.</p>\n<h2 id=\"Refer\"><a href=\"#Refer\" class=\"headerlink\" title=\"Refer\"></a>Refer</h2><p>1 : <a href=\"https://objccn.io/issue-14-4/\" target=\"_blank\" rel=\"external\">https://objccn.io/issue-14-4/</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间,由于公司业务关系,开始了macOS的开发.总体来说macOS的开发是不太顺利的,主要是因为macOS的UI显示和交互处理和iOS完全不同,非常多的控件需要自定义,默认没有 back layer 等.<br>后来,因为业务处理需要用到多进程开发就简单的调研了下,多进程的开发开始比较容易的.</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>对于多进程,主要的实现方式就是xpc,xpc就是系统用底层的 <code>mach port</code> 和 <code>dispatch</code>等搞的一套高级API.通过xpc,依赖于主进程起一个新的进程,来处理任务,通过xpc的信道来传输消息.<br>使用xpc有很多优势,连接、休眠以及内存等都是系统自动处理的,我们只需要连接上xpc服务,然后按照自定义协议通信就可以了.","more":"</p>\n</blockquote>\n<h2 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h2><p>依赖于主项目创建一个target,选择<code>XPC Service</code>,然后设置好<code>bundle id</code>,点击<code>Finish</code>. Done!<br>现在你就已经可以和xpc进行通信了.<br>通信需要通过NSXPCConnection获取到对应进程的remote Object,按照协议,向这个Object发消息,接收回调就可以了.<br>需要注意的是,进程间通信传递的参数对象需要满足NSSecureCoding,大部分Foundation实现的一些常用的数据类型都满足这个协议,但是满足了NSSecureCoding的不一定都能传递,比如NSError就不行.而且不能传递返回值给对方进程,会导致崩溃,这个不太清楚是什么原因,有想了解的可以深挖.<br>其他情况下还想传递的对象参数可以在消息传递前把传递的参数类型放到一个集合里,指定传递的参数类型,这样也是可以的.</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>使用xpc通常是多进程服务,给主app提供功能扩展,很多macOS系统App都使用了xpc来实现功能分离和数据隔离,可以通过<code>find /System/Library/Frameworks -name \\*.xpc</code>来看下macOS系统中有哪些app使用xpc服务,比如说系统的iWork套件和Xcode就用了xpc.<br>我们可以把项目中的功能模块进行切分,把部分功能放到xpc服务中去,比如说图片处理,文字渲染预处理等.</p>\n<h2 id=\"Refer\"><a href=\"#Refer\" class=\"headerlink\" title=\"Refer\"></a>Refer</h2><p>1 : <a href=\"https://objccn.io/issue-14-4/\">https://objccn.io/issue-14-4/</a></p>"},{"title":"简单算法实现之《中国剩余定理》","date":"2016-04-24T09:37:00.000Z","_content":"[中国剩余定理](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86)\n这个定理之前没见过，是在[RSA算法原理（一）](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)中提到的，想深入了解的可以去读下。\n    \n##### 故事背景\n* 韩信点兵\n\n> 秦朝末年，楚汉相争。一次，韩信将1500名将士与楚王大将李锋交战。苦战一场，楚军不敌，败退回营，汉军也死伤四五百人，于是韩信整顿兵马也返回大本营。当行至一山坡，忽有后军来报，说有楚军骑兵追来。只见远方尘土飞扬，杀声震天。汉军本来已十分疲惫，这时队伍大哗。韩信兵马到坡顶，见来敌不足五百骑，便急速点兵迎敌。他命令士兵3人一排，结果多出2名；接着命令士兵5人一排，结果多出3名；他又命令士兵7人一排，结果又多出2名。韩信马上向将士们宣布：我军有1073名勇士，敌人不足五百，我们居高临下，以众击寡，一定能打败敌人。汉军本来就信服自己的统帅，这一来更相信韩信是“神仙下凡”、“神机妙算”。于是士气大振。一时间旌旗摇动，鼓声喧天，汉军步步进逼，楚军乱作一团。交战不久，楚军大败而逃。\n\n题目就是：将军点兵，三三数余2，五五数余3，七七数余2。问兵几何？<!-- more -->\n\n* 孙子算经\n\n> 今有物，不知其数，三三数之，剩二，五五数之，剩三，七七数之，剩二，问物几何？\n答曰：二十三　　\n术曰：三三数之剩二，置一百四十，五五数之剩三，置六十三，七七数之剩二，置三十，并之，得二百三十三，以二百一十减之，即得。凡三三数之剩一，则置七十，五五数之剩一，则置二十一，七七数之剩一，则置十五，即得。\n\n《孙子算经》里给出了解决办法\n######  步骤一\n```\n除3余2 -> 取140\n除5余3 -> 取63\n除7余2 -> 取30\n```\n######  步骤二：\n```\n对上面取到的数求和\n140 + 63 + 30 = 233\n```\n######  步骤三\n```\n用上面求出的结果减去210，就是结果\n233 - 210 = 23\n结果也就是23了\n```\n\n不过那140，63，30，还有210是怎么来的呢？这就涉及到中国剩余定理的算法原理了。\n\n### 中国剩余定理原理\n```\n#题目：\n设要求的数为x，每个除法的结果分别为k1，k2，k3，那么就有：\n[1]  x / 3 = k1 + 2\n[2]  x / 5 = k2 + 3\n[3]  x / 7 = k3 + 2\n```\n```\n1.对步骤一中的式子1求解过程为：取式子2和式子3中除数（5和7）的最小公倍数LCM（35），\n然后把这个LCM作为x带入式子1。如果LCM不能适应式子1，就对LCM再加上一个LCM，\n然后带入式子1中......直到满足式子1为止。\n\n按照这个求解过程，分别对3个式子求解，取到的结果为：35，63，30\n```\n```\n2.把上面求到的结果求和\n\n35 + 63 + 30 = 128\n```\n```\n3.这里对3个式子的除数取最小公倍数\n\n3，5，7的最小公倍数为105\n然后用上面的结果减去这个最小公倍数，就是结果了\n128 - 105 = 23\n```\n\n`\n这里估计有人要问了：这个35也不是140，而且105也不等于210啊？！\n这个不用纠结，这个跟古代数学的发展史有关嘛！\n当然，这是我瞎说的，想要深挖的可以去研究下相关资料。\n`\n\n-\n\n## 下面具体说代码实现\n首先创建个model类，类里面有除数和余数2个属性，然后提供一个遍历构造器，方便使用\n\n```\n@interface CRTModel : NSObject\n\n@property (assign, nonatomic) NSInteger divider;\n\n@property (assign, nonatomic) NSInteger remain;\n\n+(instancetype)modelWithDivider:(NSInteger)divider\n                         remain:(NSInteger)remain;\n\n@end\n\n@implementation CRTModel\n\n+(instancetype)modelWithDivider:(NSInteger)divider remain:(NSInteger)remain\n{\n    CRTModel *model = [[self alloc] init];\n    model.divider = divider;\n    model.remain = remain;\n    return model;\n}\n\n@end\n```\n\n还需要用到2个函数，最大公约数GCD和最小公倍数LCM\n\n```//最大公约数\n-(NSInteger)gcdOf:(NSInteger)a and:(NSInteger)b\n{\n    //这里用__block修饰也可以\n    static const NSInteger(^GCDRecursionBlock)(NSInteger,NSInteger) \n    = ^(NSInteger ra, NSInteger rb){\n        if (!ra || !rb) return MAX(ra, rb);\n        return GCDRecursionBlock(rb,ra%rb);\n    };\n    return GCDRecursionBlock(a,b);\n}\n\n//最小公倍数\n-(NSInteger)lcmOf:(NSInteger)a and:(NSInteger)b\n{\n    return a * b / [self gcdOf:a and:b]; //最小公倍数等于两数之积除以最大公约数\n}\n```\n\n然后开始实现算法\n\n```\n0.先创建3个Model，把题目\"抄\"一遍\n\nCRTModel *model1 = [CRTModel modelWithDivider:3 remain:2];\nCRTModel *model2 = [CRTModel modelWithDivider:5 remain:3];\nCRTModel *model3 = [CRTModel modelWithDivider:7 remain:2];\n```\n\n```\n1.取到算法中步骤1的结果：\n\n-(NSInteger)getSubMinNumberOfDivider1:(NSInteger)divider1\n                              divider2:(NSInteger)divider2\n                           andDivider3:(NSInteger)divider3\n                             remainOf3:(NSInteger)remainOf3\n{\n    NSInteger lcm = [self lcmOf:divider1 and:divider2];\n    NSInteger result = lcm;\n    while ((result % divider3) != remainOf3) {\n        result += lcm;\n    }\n    return result;\n}\n\nNSInteger a = [self getSubMinNumberOfDivider1:model1.divider divider2:model2.divider andDivider3:model3.divider remainOf3:model3.remain];\nNSInteger b = [self getSubMinNumberOfDivider1:model2.divider divider2:model3.divider andDivider3:model1.divider remainOf3:model1.remain];\nNSInteger c = [self getSubMinNumberOfDivider1:model3.divider divider2:model1.divider andDivider3:model2.divider remainOf3:model2.remain];\n```\n\n```\n2.求和\n\nNSInteger sum = a + b + c;\n```\n\n```\n3.求全部除数的最小公倍数，然后求结果\n\n//使用\"更相减损术\"\nNSInteger lcmOfAll = \n    [self lcmOf:[self lcmOf:model1.divider and:model2.divider] and:model3.divider];\n    \n//求结果\nNSInteger result = sum - lcmOfAll;\nNSLog(@\"计算结果为：%ld + %ld * k (k为自然数)\",result,lcmOfAll);    \n```\n\n就这么多了。这是我昨晚回顾RSA加密时候看到的，刚好就学习下了，其实想再复习下欧拉函数什么的，都忘光了！ 有时间就搞！！\n\n","source":"_posts/简单算法实现之《中国剩余定理》.md","raw":"---\ntitle: 简单算法实现之《中国剩余定理》\ndate: 2016-04-24 17:37:00\ntags: 算法\n---\n[中国剩余定理](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86)\n这个定理之前没见过，是在[RSA算法原理（一）](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)中提到的，想深入了解的可以去读下。\n    \n##### 故事背景\n* 韩信点兵\n\n> 秦朝末年，楚汉相争。一次，韩信将1500名将士与楚王大将李锋交战。苦战一场，楚军不敌，败退回营，汉军也死伤四五百人，于是韩信整顿兵马也返回大本营。当行至一山坡，忽有后军来报，说有楚军骑兵追来。只见远方尘土飞扬，杀声震天。汉军本来已十分疲惫，这时队伍大哗。韩信兵马到坡顶，见来敌不足五百骑，便急速点兵迎敌。他命令士兵3人一排，结果多出2名；接着命令士兵5人一排，结果多出3名；他又命令士兵7人一排，结果又多出2名。韩信马上向将士们宣布：我军有1073名勇士，敌人不足五百，我们居高临下，以众击寡，一定能打败敌人。汉军本来就信服自己的统帅，这一来更相信韩信是“神仙下凡”、“神机妙算”。于是士气大振。一时间旌旗摇动，鼓声喧天，汉军步步进逼，楚军乱作一团。交战不久，楚军大败而逃。\n\n题目就是：将军点兵，三三数余2，五五数余3，七七数余2。问兵几何？<!-- more -->\n\n* 孙子算经\n\n> 今有物，不知其数，三三数之，剩二，五五数之，剩三，七七数之，剩二，问物几何？\n答曰：二十三　　\n术曰：三三数之剩二，置一百四十，五五数之剩三，置六十三，七七数之剩二，置三十，并之，得二百三十三，以二百一十减之，即得。凡三三数之剩一，则置七十，五五数之剩一，则置二十一，七七数之剩一，则置十五，即得。\n\n《孙子算经》里给出了解决办法\n######  步骤一\n```\n除3余2 -> 取140\n除5余3 -> 取63\n除7余2 -> 取30\n```\n######  步骤二：\n```\n对上面取到的数求和\n140 + 63 + 30 = 233\n```\n######  步骤三\n```\n用上面求出的结果减去210，就是结果\n233 - 210 = 23\n结果也就是23了\n```\n\n不过那140，63，30，还有210是怎么来的呢？这就涉及到中国剩余定理的算法原理了。\n\n### 中国剩余定理原理\n```\n#题目：\n设要求的数为x，每个除法的结果分别为k1，k2，k3，那么就有：\n[1]  x / 3 = k1 + 2\n[2]  x / 5 = k2 + 3\n[3]  x / 7 = k3 + 2\n```\n```\n1.对步骤一中的式子1求解过程为：取式子2和式子3中除数（5和7）的最小公倍数LCM（35），\n然后把这个LCM作为x带入式子1。如果LCM不能适应式子1，就对LCM再加上一个LCM，\n然后带入式子1中......直到满足式子1为止。\n\n按照这个求解过程，分别对3个式子求解，取到的结果为：35，63，30\n```\n```\n2.把上面求到的结果求和\n\n35 + 63 + 30 = 128\n```\n```\n3.这里对3个式子的除数取最小公倍数\n\n3，5，7的最小公倍数为105\n然后用上面的结果减去这个最小公倍数，就是结果了\n128 - 105 = 23\n```\n\n`\n这里估计有人要问了：这个35也不是140，而且105也不等于210啊？！\n这个不用纠结，这个跟古代数学的发展史有关嘛！\n当然，这是我瞎说的，想要深挖的可以去研究下相关资料。\n`\n\n-\n\n## 下面具体说代码实现\n首先创建个model类，类里面有除数和余数2个属性，然后提供一个遍历构造器，方便使用\n\n```\n@interface CRTModel : NSObject\n\n@property (assign, nonatomic) NSInteger divider;\n\n@property (assign, nonatomic) NSInteger remain;\n\n+(instancetype)modelWithDivider:(NSInteger)divider\n                         remain:(NSInteger)remain;\n\n@end\n\n@implementation CRTModel\n\n+(instancetype)modelWithDivider:(NSInteger)divider remain:(NSInteger)remain\n{\n    CRTModel *model = [[self alloc] init];\n    model.divider = divider;\n    model.remain = remain;\n    return model;\n}\n\n@end\n```\n\n还需要用到2个函数，最大公约数GCD和最小公倍数LCM\n\n```//最大公约数\n-(NSInteger)gcdOf:(NSInteger)a and:(NSInteger)b\n{\n    //这里用__block修饰也可以\n    static const NSInteger(^GCDRecursionBlock)(NSInteger,NSInteger) \n    = ^(NSInteger ra, NSInteger rb){\n        if (!ra || !rb) return MAX(ra, rb);\n        return GCDRecursionBlock(rb,ra%rb);\n    };\n    return GCDRecursionBlock(a,b);\n}\n\n//最小公倍数\n-(NSInteger)lcmOf:(NSInteger)a and:(NSInteger)b\n{\n    return a * b / [self gcdOf:a and:b]; //最小公倍数等于两数之积除以最大公约数\n}\n```\n\n然后开始实现算法\n\n```\n0.先创建3个Model，把题目\"抄\"一遍\n\nCRTModel *model1 = [CRTModel modelWithDivider:3 remain:2];\nCRTModel *model2 = [CRTModel modelWithDivider:5 remain:3];\nCRTModel *model3 = [CRTModel modelWithDivider:7 remain:2];\n```\n\n```\n1.取到算法中步骤1的结果：\n\n-(NSInteger)getSubMinNumberOfDivider1:(NSInteger)divider1\n                              divider2:(NSInteger)divider2\n                           andDivider3:(NSInteger)divider3\n                             remainOf3:(NSInteger)remainOf3\n{\n    NSInteger lcm = [self lcmOf:divider1 and:divider2];\n    NSInteger result = lcm;\n    while ((result % divider3) != remainOf3) {\n        result += lcm;\n    }\n    return result;\n}\n\nNSInteger a = [self getSubMinNumberOfDivider1:model1.divider divider2:model2.divider andDivider3:model3.divider remainOf3:model3.remain];\nNSInteger b = [self getSubMinNumberOfDivider1:model2.divider divider2:model3.divider andDivider3:model1.divider remainOf3:model1.remain];\nNSInteger c = [self getSubMinNumberOfDivider1:model3.divider divider2:model1.divider andDivider3:model2.divider remainOf3:model2.remain];\n```\n\n```\n2.求和\n\nNSInteger sum = a + b + c;\n```\n\n```\n3.求全部除数的最小公倍数，然后求结果\n\n//使用\"更相减损术\"\nNSInteger lcmOfAll = \n    [self lcmOf:[self lcmOf:model1.divider and:model2.divider] and:model3.divider];\n    \n//求结果\nNSInteger result = sum - lcmOfAll;\nNSLog(@\"计算结果为：%ld + %ld * k (k为自然数)\",result,lcmOfAll);    \n```\n\n就这么多了。这是我昨晚回顾RSA加密时候看到的，刚好就学习下了，其实想再复习下欧拉函数什么的，都忘光了！ 有时间就搞！！\n\n","slug":"简单算法实现之《中国剩余定理》","published":1,"updated":"2016-06-18T10:54:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbnr0004f1s6a27yguyv","content":"<p><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86\" target=\"_blank\" rel=\"external\">中国剩余定理</a><br>这个定理之前没见过，是在<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\" target=\"_blank\" rel=\"external\">RSA算法原理（一）</a>中提到的，想深入了解的可以去读下。</p>\n<h5 id=\"故事背景\"><a href=\"#故事背景\" class=\"headerlink\" title=\"故事背景\"></a>故事背景</h5><ul>\n<li>韩信点兵</li>\n</ul>\n<blockquote>\n<p>秦朝末年，楚汉相争。一次，韩信将1500名将士与楚王大将李锋交战。苦战一场，楚军不敌，败退回营，汉军也死伤四五百人，于是韩信整顿兵马也返回大本营。当行至一山坡，忽有后军来报，说有楚军骑兵追来。只见远方尘土飞扬，杀声震天。汉军本来已十分疲惫，这时队伍大哗。韩信兵马到坡顶，见来敌不足五百骑，便急速点兵迎敌。他命令士兵3人一排，结果多出2名；接着命令士兵5人一排，结果多出3名；他又命令士兵7人一排，结果又多出2名。韩信马上向将士们宣布：我军有1073名勇士，敌人不足五百，我们居高临下，以众击寡，一定能打败敌人。汉军本来就信服自己的统帅，这一来更相信韩信是“神仙下凡”、“神机妙算”。于是士气大振。一时间旌旗摇动，鼓声喧天，汉军步步进逼，楚军乱作一团。交战不久，楚军大败而逃。</p>\n</blockquote>\n<p>题目就是：将军点兵，三三数余2，五五数余3，七七数余2。问兵几何？<a id=\"more\"></a></p>\n<ul>\n<li>孙子算经</li>\n</ul>\n<blockquote>\n<p>今有物，不知其数，三三数之，剩二，五五数之，剩三，七七数之，剩二，问物几何？<br>答曰：二十三　　<br>术曰：三三数之剩二，置一百四十，五五数之剩三，置六十三，七七数之剩二，置三十，并之，得二百三十三，以二百一十减之，即得。凡三三数之剩一，则置七十，五五数之剩一，则置二十一，七七数之剩一，则置十五，即得。</p>\n</blockquote>\n<p>《孙子算经》里给出了解决办法</p>\n<h6 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">除3余2 -&gt; 取140</span><br><span class=\"line\">除5余3 -&gt; 取63</span><br><span class=\"line\">除7余2 -&gt; 取30</span><br></pre></td></tr></table></figure>\n<h6 id=\"步骤二：\"><a href=\"#步骤二：\" class=\"headerlink\" title=\"步骤二：\"></a>步骤二：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对上面取到的数求和</span><br><span class=\"line\">140 + 63 + 30 = 233</span><br></pre></td></tr></table></figure>\n<h6 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用上面求出的结果减去210，就是结果</span><br><span class=\"line\">233 - 210 = 23</span><br><span class=\"line\">结果也就是23了</span><br></pre></td></tr></table></figure>\n<p>不过那140，63，30，还有210是怎么来的呢？这就涉及到中国剩余定理的算法原理了。</p>\n<h3 id=\"中国剩余定理原理\"><a href=\"#中国剩余定理原理\" class=\"headerlink\" title=\"中国剩余定理原理\"></a>中国剩余定理原理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#题目：</span><br><span class=\"line\">设要求的数为x，每个除法的结果分别为k1，k2，k3，那么就有：</span><br><span class=\"line\">[1]  x / 3 = k1 + 2</span><br><span class=\"line\">[2]  x / 5 = k2 + 3</span><br><span class=\"line\">[3]  x / 7 = k3 + 2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.对步骤一中的式子1求解过程为：取式子2和式子3中除数（5和7）的最小公倍数LCM（35），</span><br><span class=\"line\">然后把这个LCM作为x带入式子1。如果LCM不能适应式子1，就对LCM再加上一个LCM，</span><br><span class=\"line\">然后带入式子1中......直到满足式子1为止。</span><br><span class=\"line\"></span><br><span class=\"line\">按照这个求解过程，分别对3个式子求解，取到的结果为：35，63，30</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.把上面求到的结果求和</span><br><span class=\"line\"></span><br><span class=\"line\">35 + 63 + 30 = 128</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.这里对3个式子的除数取最小公倍数</span><br><span class=\"line\"></span><br><span class=\"line\">3，5，7的最小公倍数为105</span><br><span class=\"line\">然后用上面的结果减去这个最小公倍数，就是结果了</span><br><span class=\"line\">128 - 105 = 23</span><br></pre></td></tr></table></figure>\n<p><code>这里估计有人要问了：这个35也不是140，而且105也不等于210啊？！\n这个不用纠结，这个跟古代数学的发展史有关嘛！\n当然，这是我瞎说的，想要深挖的可以去研究下相关资料。</code></p>\n<p>-</p>\n<h2 id=\"下面具体说代码实现\"><a href=\"#下面具体说代码实现\" class=\"headerlink\" title=\"下面具体说代码实现\"></a>下面具体说代码实现</h2><p>首先创建个model类，类里面有除数和余数2个属性，然后提供一个遍历构造器，方便使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface CRTModel : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign, nonatomic) NSInteger divider;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign, nonatomic) NSInteger remain;</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)modelWithDivider:(NSInteger)divider</span><br><span class=\"line\">                         remain:(NSInteger)remain;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CRTModel</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)modelWithDivider:(NSInteger)divider remain:(NSInteger)remain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CRTModel *model = [[self alloc] init];</span><br><span class=\"line\">    model.divider = divider;</span><br><span class=\"line\">    model.remain = remain;</span><br><span class=\"line\">    return model;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>还需要用到2个函数，最大公约数GCD和最小公倍数LCM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(NSInteger)gcdOf:(NSInteger)a and:(NSInteger)b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //这里用__block修饰也可以</span><br><span class=\"line\">    static const NSInteger(^GCDRecursionBlock)(NSInteger,NSInteger) </span><br><span class=\"line\">    = ^(NSInteger ra, NSInteger rb)&#123;</span><br><span class=\"line\">        if (!ra || !rb) return MAX(ra, rb);</span><br><span class=\"line\">        return GCDRecursionBlock(rb,ra%rb);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return GCDRecursionBlock(a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//最小公倍数</span><br><span class=\"line\">-(NSInteger)lcmOf:(NSInteger)a and:(NSInteger)b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return a * b / [self gcdOf:a and:b]; //最小公倍数等于两数之积除以最大公约数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后开始实现算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.先创建3个Model，把题目&quot;抄&quot;一遍</span><br><span class=\"line\"></span><br><span class=\"line\">CRTModel *model1 = [CRTModel modelWithDivider:3 remain:2];</span><br><span class=\"line\">CRTModel *model2 = [CRTModel modelWithDivider:5 remain:3];</span><br><span class=\"line\">CRTModel *model3 = [CRTModel modelWithDivider:7 remain:2];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.取到算法中步骤1的结果：</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)getSubMinNumberOfDivider1:(NSInteger)divider1</span><br><span class=\"line\">                              divider2:(NSInteger)divider2</span><br><span class=\"line\">                           andDivider3:(NSInteger)divider3</span><br><span class=\"line\">                             remainOf3:(NSInteger)remainOf3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSInteger lcm = [self lcmOf:divider1 and:divider2];</span><br><span class=\"line\">    NSInteger result = lcm;</span><br><span class=\"line\">    while ((result % divider3) != remainOf3) &#123;</span><br><span class=\"line\">        result += lcm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger a = [self getSubMinNumberOfDivider1:model1.divider divider2:model2.divider andDivider3:model3.divider remainOf3:model3.remain];</span><br><span class=\"line\">NSInteger b = [self getSubMinNumberOfDivider1:model2.divider divider2:model3.divider andDivider3:model1.divider remainOf3:model1.remain];</span><br><span class=\"line\">NSInteger c = [self getSubMinNumberOfDivider1:model3.divider divider2:model1.divider andDivider3:model2.divider remainOf3:model2.remain];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.求和</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger sum = a + b + c;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.求全部除数的最小公倍数，然后求结果</span><br><span class=\"line\"></span><br><span class=\"line\">//使用&quot;更相减损术&quot;</span><br><span class=\"line\">NSInteger lcmOfAll = </span><br><span class=\"line\">    [self lcmOf:[self lcmOf:model1.divider and:model2.divider] and:model3.divider];</span><br><span class=\"line\">    </span><br><span class=\"line\">//求结果</span><br><span class=\"line\">NSInteger result = sum - lcmOfAll;</span><br><span class=\"line\">NSLog(@&quot;计算结果为：%ld + %ld * k (k为自然数)&quot;,result,lcmOfAll);</span><br></pre></td></tr></table></figure>\n<p>就这么多了。这是我昨晚回顾RSA加密时候看到的，刚好就学习下了，其实想再复习下欧拉函数什么的，都忘光了！ 有时间就搞！！</p>\n","excerpt":"<p><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86\">中国剩余定理</a><br>这个定理之前没见过，是在<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">RSA算法原理（一）</a>中提到的，想深入了解的可以去读下。</p>\n<h5 id=\"故事背景\"><a href=\"#故事背景\" class=\"headerlink\" title=\"故事背景\"></a>故事背景</h5><ul>\n<li>韩信点兵</li>\n</ul>\n<blockquote>\n<p>秦朝末年，楚汉相争。一次，韩信将1500名将士与楚王大将李锋交战。苦战一场，楚军不敌，败退回营，汉军也死伤四五百人，于是韩信整顿兵马也返回大本营。当行至一山坡，忽有后军来报，说有楚军骑兵追来。只见远方尘土飞扬，杀声震天。汉军本来已十分疲惫，这时队伍大哗。韩信兵马到坡顶，见来敌不足五百骑，便急速点兵迎敌。他命令士兵3人一排，结果多出2名；接着命令士兵5人一排，结果多出3名；他又命令士兵7人一排，结果又多出2名。韩信马上向将士们宣布：我军有1073名勇士，敌人不足五百，我们居高临下，以众击寡，一定能打败敌人。汉军本来就信服自己的统帅，这一来更相信韩信是“神仙下凡”、“神机妙算”。于是士气大振。一时间旌旗摇动，鼓声喧天，汉军步步进逼，楚军乱作一团。交战不久，楚军大败而逃。</p>\n</blockquote>\n<p>题目就是：将军点兵，三三数余2，五五数余3，七七数余2。问兵几何？","more":"</p>\n<ul>\n<li>孙子算经</li>\n</ul>\n<blockquote>\n<p>今有物，不知其数，三三数之，剩二，五五数之，剩三，七七数之，剩二，问物几何？<br>答曰：二十三　　<br>术曰：三三数之剩二，置一百四十，五五数之剩三，置六十三，七七数之剩二，置三十，并之，得二百三十三，以二百一十减之，即得。凡三三数之剩一，则置七十，五五数之剩一，则置二十一，七七数之剩一，则置十五，即得。</p>\n</blockquote>\n<p>《孙子算经》里给出了解决办法</p>\n<h6 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">除3余2 -&gt; 取140</span><br><span class=\"line\">除5余3 -&gt; 取63</span><br><span class=\"line\">除7余2 -&gt; 取30</span><br></pre></td></tr></table></figure>\n<h6 id=\"步骤二：\"><a href=\"#步骤二：\" class=\"headerlink\" title=\"步骤二：\"></a>步骤二：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对上面取到的数求和</span><br><span class=\"line\">140 + 63 + 30 = 233</span><br></pre></td></tr></table></figure>\n<h6 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用上面求出的结果减去210，就是结果</span><br><span class=\"line\">233 - 210 = 23</span><br><span class=\"line\">结果也就是23了</span><br></pre></td></tr></table></figure>\n<p>不过那140，63，30，还有210是怎么来的呢？这就涉及到中国剩余定理的算法原理了。</p>\n<h3 id=\"中国剩余定理原理\"><a href=\"#中国剩余定理原理\" class=\"headerlink\" title=\"中国剩余定理原理\"></a>中国剩余定理原理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#题目：</span><br><span class=\"line\">设要求的数为x，每个除法的结果分别为k1，k2，k3，那么就有：</span><br><span class=\"line\">[1]  x / 3 = k1 + 2</span><br><span class=\"line\">[2]  x / 5 = k2 + 3</span><br><span class=\"line\">[3]  x / 7 = k3 + 2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.对步骤一中的式子1求解过程为：取式子2和式子3中除数（5和7）的最小公倍数LCM（35），</span><br><span class=\"line\">然后把这个LCM作为x带入式子1。如果LCM不能适应式子1，就对LCM再加上一个LCM，</span><br><span class=\"line\">然后带入式子1中......直到满足式子1为止。</span><br><span class=\"line\"></span><br><span class=\"line\">按照这个求解过程，分别对3个式子求解，取到的结果为：35，63，30</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.把上面求到的结果求和</span><br><span class=\"line\"></span><br><span class=\"line\">35 + 63 + 30 = 128</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.这里对3个式子的除数取最小公倍数</span><br><span class=\"line\"></span><br><span class=\"line\">3，5，7的最小公倍数为105</span><br><span class=\"line\">然后用上面的结果减去这个最小公倍数，就是结果了</span><br><span class=\"line\">128 - 105 = 23</span><br></pre></td></tr></table></figure>\n<p><code>这里估计有人要问了：这个35也不是140，而且105也不等于210啊？！\n这个不用纠结，这个跟古代数学的发展史有关嘛！\n当然，这是我瞎说的，想要深挖的可以去研究下相关资料。</code></p>\n<p>-</p>\n<h2 id=\"下面具体说代码实现\"><a href=\"#下面具体说代码实现\" class=\"headerlink\" title=\"下面具体说代码实现\"></a>下面具体说代码实现</h2><p>首先创建个model类，类里面有除数和余数2个属性，然后提供一个遍历构造器，方便使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface CRTModel : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign, nonatomic) NSInteger divider;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign, nonatomic) NSInteger remain;</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)modelWithDivider:(NSInteger)divider</span><br><span class=\"line\">                         remain:(NSInteger)remain;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation CRTModel</span><br><span class=\"line\"></span><br><span class=\"line\">+(instancetype)modelWithDivider:(NSInteger)divider remain:(NSInteger)remain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CRTModel *model = [[self alloc] init];</span><br><span class=\"line\">    model.divider = divider;</span><br><span class=\"line\">    model.remain = remain;</span><br><span class=\"line\">    return model;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>还需要用到2个函数，最大公约数GCD和最小公倍数LCM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(NSInteger)gcdOf:(NSInteger)a and:(NSInteger)b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //这里用__block修饰也可以</span><br><span class=\"line\">    static const NSInteger(^GCDRecursionBlock)(NSInteger,NSInteger) </span><br><span class=\"line\">    = ^(NSInteger ra, NSInteger rb)&#123;</span><br><span class=\"line\">        if (!ra || !rb) return MAX(ra, rb);</span><br><span class=\"line\">        return GCDRecursionBlock(rb,ra%rb);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return GCDRecursionBlock(a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//最小公倍数</span><br><span class=\"line\">-(NSInteger)lcmOf:(NSInteger)a and:(NSInteger)b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return a * b / [self gcdOf:a and:b]; //最小公倍数等于两数之积除以最大公约数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后开始实现算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.先创建3个Model，把题目&quot;抄&quot;一遍</span><br><span class=\"line\"></span><br><span class=\"line\">CRTModel *model1 = [CRTModel modelWithDivider:3 remain:2];</span><br><span class=\"line\">CRTModel *model2 = [CRTModel modelWithDivider:5 remain:3];</span><br><span class=\"line\">CRTModel *model3 = [CRTModel modelWithDivider:7 remain:2];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.取到算法中步骤1的结果：</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSInteger)getSubMinNumberOfDivider1:(NSInteger)divider1</span><br><span class=\"line\">                              divider2:(NSInteger)divider2</span><br><span class=\"line\">                           andDivider3:(NSInteger)divider3</span><br><span class=\"line\">                             remainOf3:(NSInteger)remainOf3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSInteger lcm = [self lcmOf:divider1 and:divider2];</span><br><span class=\"line\">    NSInteger result = lcm;</span><br><span class=\"line\">    while ((result % divider3) != remainOf3) &#123;</span><br><span class=\"line\">        result += lcm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger a = [self getSubMinNumberOfDivider1:model1.divider divider2:model2.divider andDivider3:model3.divider remainOf3:model3.remain];</span><br><span class=\"line\">NSInteger b = [self getSubMinNumberOfDivider1:model2.divider divider2:model3.divider andDivider3:model1.divider remainOf3:model1.remain];</span><br><span class=\"line\">NSInteger c = [self getSubMinNumberOfDivider1:model3.divider divider2:model1.divider andDivider3:model2.divider remainOf3:model2.remain];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.求和</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger sum = a + b + c;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.求全部除数的最小公倍数，然后求结果</span><br><span class=\"line\"></span><br><span class=\"line\">//使用&quot;更相减损术&quot;</span><br><span class=\"line\">NSInteger lcmOfAll = </span><br><span class=\"line\">    [self lcmOf:[self lcmOf:model1.divider and:model2.divider] and:model3.divider];</span><br><span class=\"line\">    </span><br><span class=\"line\">//求结果</span><br><span class=\"line\">NSInteger result = sum - lcmOfAll;</span><br><span class=\"line\">NSLog(@&quot;计算结果为：%ld + %ld * k (k为自然数)&quot;,result,lcmOfAll);</span><br></pre></td></tr></table></figure>\n<p>就这么多了。这是我昨晚回顾RSA加密时候看到的，刚好就学习下了，其实想再复习下欧拉函数什么的，都忘光了！ 有时间就搞！！</p>"},{"title":"[转]优秀程序设计一十八原则","date":"2016-08-05T15:07:28.000Z","_content":"\n[原文链接(English)](http://www.artima.com/weblogs/viewpost.jsp?thread=331531)\n[译文链接](http://www.csdn.net/article/2011-07-29/302424)\n\n\n** 1.避免重复原则（DRY - Don’t repeat yourself）**\n编程的最基本原则是避免重复。在程序代码中总会有很多结构体，如循环、函数、类等等。一旦你重复某个语句或概念，就会很容易形成一个抽象体。\n** 2.抽象原则（Abstraction Principle ）**\n与DRY原则相关。要记住，程序代码中每一个重要的功能，只能出现在源代码的一个位置。\n** 3.简单原则（Keep It Simple and Stupid ）**\n简单是软件设计的目标，简单的代码占用时间少，漏洞少，并且易于修改。 <!--More-->\n** 4.避免创建你不要的代码 Avoid Creating a YAGNI (You aren’t going to need it)**\n除非你需要它，否则别创建新功能。\n** 5.尽可能做可运行的最简单的事（Do the simplest thing that could possibly work）**\n尽可能做可运行的最简单的事。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。\n** 6.别让我思考(Don’t make me think )**\n这是Steve Krug一本书的标题，同时也和编程有关。所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。\n** 7.开闭原则(Open/Closed Principle)**\n你所编写的软件实体（类、模块、函数等）最好是开源的，这样别人可以拓展开发。不过，对于你的代码，得限定别人不得修改。换句话说，别人可以基于你的代码进行拓展编写，但却不能修改你的代码。\n** 8.代码维护(Write Code for the Maintainer)**\n一个优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。用书中原话说“如果一个维护者不再继续维护你的代码，很可能他就有想杀了你的冲动。”\n** 9.最小惊讶原则(Principle of least astonishment)**\n最小惊讶原则通常是在用户界面方面引用，但同样适用于编写的代码。代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。\n** 10.单一责任原则(Single Responsibility Principle) **\n某个代码的功能，应该保证只有单一的明确的执行任务。\n** 11.低耦合原则(Minimize Coupling)**\n代码的任何一个部分应该减少对其他区域代码的依赖关系。尽量不要使用共享参数。低耦合往往是完美结构系统和优秀设计的标志。\n** 12.最大限度凝聚原则(Maximize Cohesion)**\n相似的功能代码应尽量放在一个部分。\n** 13.隐藏实现细节（Hide Implementation Details）**\n隐藏实现细节原则，当其他功能部分发生变化时，能够尽可能降低对其他组件的影响。\n** 14.迪米特法则又叫作最少知识原则(Law of Demeter)**\n该代码只和与其有直接关系的部分连接。（比如：该部分继承的类，包含的对象，参数传递的对象等）。\n** 15.避免过早优化(Avoid Premature Optimization)**\n除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。\n“过早的优化是一切罪恶的根源”——Donald Knuth\n** 16.代码重用原则（Code Reuse is Good） **\n重用代码能提高代码的可读性，缩短开发时间。\n** 17.关注点分离（Separation of Concerns）**\n不同领域的功能，应该由不同的代码和最小重迭的模块组成。\n** 18.拥抱改变（Embrace Change）**\n这是Kent Beck一本书的标题，同时也被认为是极限编程和敏捷方法的宗旨。\n许多其他原则都是基于这个概念的，即你应该积极面对变化。事实上，一些较老的编程原则如最小化耦合原则都是为了使代码能够容易变化。无论你是否是个极限编程者，基于这个原则去编写代码会让你的工作变得更有意义。\n**作者简介**：Christopher Diggins是加拿大一位有25年编程经验的资深技术人员，曾效力于Microsoft和Autodesk，并创办过两家赢利的互联网公司。\n他是《C++ Cookbook》的作者之一，并自己编写了一门编程语言Heron。\n","source":"_posts/转-优秀程序设计一十八原则.md","raw":"---\ntitle: '[转]优秀程序设计一十八原则'\ndate: 2016-08-05 23:07:28\ntags: 转载\n---\n\n[原文链接(English)](http://www.artima.com/weblogs/viewpost.jsp?thread=331531)\n[译文链接](http://www.csdn.net/article/2011-07-29/302424)\n\n\n** 1.避免重复原则（DRY - Don’t repeat yourself）**\n编程的最基本原则是避免重复。在程序代码中总会有很多结构体，如循环、函数、类等等。一旦你重复某个语句或概念，就会很容易形成一个抽象体。\n** 2.抽象原则（Abstraction Principle ）**\n与DRY原则相关。要记住，程序代码中每一个重要的功能，只能出现在源代码的一个位置。\n** 3.简单原则（Keep It Simple and Stupid ）**\n简单是软件设计的目标，简单的代码占用时间少，漏洞少，并且易于修改。 <!--More-->\n** 4.避免创建你不要的代码 Avoid Creating a YAGNI (You aren’t going to need it)**\n除非你需要它，否则别创建新功能。\n** 5.尽可能做可运行的最简单的事（Do the simplest thing that could possibly work）**\n尽可能做可运行的最简单的事。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。\n** 6.别让我思考(Don’t make me think )**\n这是Steve Krug一本书的标题，同时也和编程有关。所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。\n** 7.开闭原则(Open/Closed Principle)**\n你所编写的软件实体（类、模块、函数等）最好是开源的，这样别人可以拓展开发。不过，对于你的代码，得限定别人不得修改。换句话说，别人可以基于你的代码进行拓展编写，但却不能修改你的代码。\n** 8.代码维护(Write Code for the Maintainer)**\n一个优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。用书中原话说“如果一个维护者不再继续维护你的代码，很可能他就有想杀了你的冲动。”\n** 9.最小惊讶原则(Principle of least astonishment)**\n最小惊讶原则通常是在用户界面方面引用，但同样适用于编写的代码。代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。\n** 10.单一责任原则(Single Responsibility Principle) **\n某个代码的功能，应该保证只有单一的明确的执行任务。\n** 11.低耦合原则(Minimize Coupling)**\n代码的任何一个部分应该减少对其他区域代码的依赖关系。尽量不要使用共享参数。低耦合往往是完美结构系统和优秀设计的标志。\n** 12.最大限度凝聚原则(Maximize Cohesion)**\n相似的功能代码应尽量放在一个部分。\n** 13.隐藏实现细节（Hide Implementation Details）**\n隐藏实现细节原则，当其他功能部分发生变化时，能够尽可能降低对其他组件的影响。\n** 14.迪米特法则又叫作最少知识原则(Law of Demeter)**\n该代码只和与其有直接关系的部分连接。（比如：该部分继承的类，包含的对象，参数传递的对象等）。\n** 15.避免过早优化(Avoid Premature Optimization)**\n除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。\n“过早的优化是一切罪恶的根源”——Donald Knuth\n** 16.代码重用原则（Code Reuse is Good） **\n重用代码能提高代码的可读性，缩短开发时间。\n** 17.关注点分离（Separation of Concerns）**\n不同领域的功能，应该由不同的代码和最小重迭的模块组成。\n** 18.拥抱改变（Embrace Change）**\n这是Kent Beck一本书的标题，同时也被认为是极限编程和敏捷方法的宗旨。\n许多其他原则都是基于这个概念的，即你应该积极面对变化。事实上，一些较老的编程原则如最小化耦合原则都是为了使代码能够容易变化。无论你是否是个极限编程者，基于这个原则去编写代码会让你的工作变得更有意义。\n**作者简介**：Christopher Diggins是加拿大一位有25年编程经验的资深技术人员，曾效力于Microsoft和Autodesk，并创办过两家赢利的互联网公司。\n他是《C++ Cookbook》的作者之一，并自己编写了一门编程语言Heron。\n","slug":"转-优秀程序设计一十八原则","published":1,"updated":"2017-02-23T01:32:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbns0006f1s6i5psytlf","content":"<p><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=331531\" target=\"_blank\" rel=\"external\">原文链接(English)</a><br><a href=\"http://www.csdn.net/article/2011-07-29/302424\" target=\"_blank\" rel=\"external\">译文链接</a></p>\n<p><strong> 1.避免重复原则（DRY - Don’t repeat yourself）</strong><br>编程的最基本原则是避免重复。在程序代码中总会有很多结构体，如循环、函数、类等等。一旦你重复某个语句或概念，就会很容易形成一个抽象体。<br><strong> 2.抽象原则（Abstraction Principle ）</strong><br>与DRY原则相关。要记住，程序代码中每一个重要的功能，只能出现在源代码的一个位置。<br><strong> 3.简单原则（Keep It Simple and Stupid ）</strong><br>简单是软件设计的目标，简单的代码占用时间少，漏洞少，并且易于修改。 <a id=\"more\"></a><br><strong> 4.避免创建你不要的代码 Avoid Creating a YAGNI (You aren’t going to need it)</strong><br>除非你需要它，否则别创建新功能。<br><strong> 5.尽可能做可运行的最简单的事（Do the simplest thing that could possibly work）</strong><br>尽可能做可运行的最简单的事。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。<br><strong> 6.别让我思考(Don’t make me think )</strong><br>这是Steve Krug一本书的标题，同时也和编程有关。所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。<br><strong> 7.开闭原则(Open/Closed Principle)</strong><br>你所编写的软件实体（类、模块、函数等）最好是开源的，这样别人可以拓展开发。不过，对于你的代码，得限定别人不得修改。换句话说，别人可以基于你的代码进行拓展编写，但却不能修改你的代码。<br><strong> 8.代码维护(Write Code for the Maintainer)</strong><br>一个优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。用书中原话说“如果一个维护者不再继续维护你的代码，很可能他就有想杀了你的冲动。”<br><strong> 9.最小惊讶原则(Principle of least astonishment)</strong><br>最小惊讶原则通常是在用户界面方面引用，但同样适用于编写的代码。代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。<br><strong> 10.单一责任原则(Single Responsibility Principle) </strong><br>某个代码的功能，应该保证只有单一的明确的执行任务。<br><strong> 11.低耦合原则(Minimize Coupling)</strong><br>代码的任何一个部分应该减少对其他区域代码的依赖关系。尽量不要使用共享参数。低耦合往往是完美结构系统和优秀设计的标志。<br><strong> 12.最大限度凝聚原则(Maximize Cohesion)</strong><br>相似的功能代码应尽量放在一个部分。<br><strong> 13.隐藏实现细节（Hide Implementation Details）</strong><br>隐藏实现细节原则，当其他功能部分发生变化时，能够尽可能降低对其他组件的影响。<br><strong> 14.迪米特法则又叫作最少知识原则(Law of Demeter)</strong><br>该代码只和与其有直接关系的部分连接。（比如：该部分继承的类，包含的对象，参数传递的对象等）。<br><strong> 15.避免过早优化(Avoid Premature Optimization)</strong><br>除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。<br>“过早的优化是一切罪恶的根源”——Donald Knuth<br><strong> 16.代码重用原则（Code Reuse is Good） </strong><br>重用代码能提高代码的可读性，缩短开发时间。<br><strong> 17.关注点分离（Separation of Concerns）</strong><br>不同领域的功能，应该由不同的代码和最小重迭的模块组成。<br><strong> 18.拥抱改变（Embrace Change）</strong><br>这是Kent Beck一本书的标题，同时也被认为是极限编程和敏捷方法的宗旨。<br>许多其他原则都是基于这个概念的，即你应该积极面对变化。事实上，一些较老的编程原则如最小化耦合原则都是为了使代码能够容易变化。无论你是否是个极限编程者，基于这个原则去编写代码会让你的工作变得更有意义。<br><strong>作者简介</strong>：Christopher Diggins是加拿大一位有25年编程经验的资深技术人员，曾效力于Microsoft和Autodesk，并创办过两家赢利的互联网公司。<br>他是《C++ Cookbook》的作者之一，并自己编写了一门编程语言Heron。</p>\n","excerpt":"<p><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=331531\">原文链接(English)</a><br><a href=\"http://www.csdn.net/article/2011-07-29/302424\">译文链接</a></p>\n<p><strong> 1.避免重复原则（DRY - Don’t repeat yourself）</strong><br>编程的最基本原则是避免重复。在程序代码中总会有很多结构体，如循环、函数、类等等。一旦你重复某个语句或概念，就会很容易形成一个抽象体。<br><strong> 2.抽象原则（Abstraction Principle ）</strong><br>与DRY原则相关。要记住，程序代码中每一个重要的功能，只能出现在源代码的一个位置。<br><strong> 3.简单原则（Keep It Simple and Stupid ）</strong><br>简单是软件设计的目标，简单的代码占用时间少，漏洞少，并且易于修改。","more":"<br><strong> 4.避免创建你不要的代码 Avoid Creating a YAGNI (You aren’t going to need it)</strong><br>除非你需要它，否则别创建新功能。<br><strong> 5.尽可能做可运行的最简单的事（Do the simplest thing that could possibly work）</strong><br>尽可能做可运行的最简单的事。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。<br><strong> 6.别让我思考(Don’t make me think )</strong><br>这是Steve Krug一本书的标题，同时也和编程有关。所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。<br><strong> 7.开闭原则(Open/Closed Principle)</strong><br>你所编写的软件实体（类、模块、函数等）最好是开源的，这样别人可以拓展开发。不过，对于你的代码，得限定别人不得修改。换句话说，别人可以基于你的代码进行拓展编写，但却不能修改你的代码。<br><strong> 8.代码维护(Write Code for the Maintainer)</strong><br>一个优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。用书中原话说“如果一个维护者不再继续维护你的代码，很可能他就有想杀了你的冲动。”<br><strong> 9.最小惊讶原则(Principle of least astonishment)</strong><br>最小惊讶原则通常是在用户界面方面引用，但同样适用于编写的代码。代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。<br><strong> 10.单一责任原则(Single Responsibility Principle) </strong><br>某个代码的功能，应该保证只有单一的明确的执行任务。<br><strong> 11.低耦合原则(Minimize Coupling)</strong><br>代码的任何一个部分应该减少对其他区域代码的依赖关系。尽量不要使用共享参数。低耦合往往是完美结构系统和优秀设计的标志。<br><strong> 12.最大限度凝聚原则(Maximize Cohesion)</strong><br>相似的功能代码应尽量放在一个部分。<br><strong> 13.隐藏实现细节（Hide Implementation Details）</strong><br>隐藏实现细节原则，当其他功能部分发生变化时，能够尽可能降低对其他组件的影响。<br><strong> 14.迪米特法则又叫作最少知识原则(Law of Demeter)</strong><br>该代码只和与其有直接关系的部分连接。（比如：该部分继承的类，包含的对象，参数传递的对象等）。<br><strong> 15.避免过早优化(Avoid Premature Optimization)</strong><br>除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。<br>“过早的优化是一切罪恶的根源”——Donald Knuth<br><strong> 16.代码重用原则（Code Reuse is Good） </strong><br>重用代码能提高代码的可读性，缩短开发时间。<br><strong> 17.关注点分离（Separation of Concerns）</strong><br>不同领域的功能，应该由不同的代码和最小重迭的模块组成。<br><strong> 18.拥抱改变（Embrace Change）</strong><br>这是Kent Beck一本书的标题，同时也被认为是极限编程和敏捷方法的宗旨。<br>许多其他原则都是基于这个概念的，即你应该积极面对变化。事实上，一些较老的编程原则如最小化耦合原则都是为了使代码能够容易变化。无论你是否是个极限编程者，基于这个原则去编写代码会让你的工作变得更有意义。<br><strong>作者简介</strong>：Christopher Diggins是加拿大一位有25年编程经验的资深技术人员，曾效力于Microsoft和Autodesk，并创办过两家赢利的互联网公司。<br>他是《C++ Cookbook》的作者之一，并自己编写了一门编程语言Heron。</p>"},{"title":"Mac OSX平台软件推荐","date":"2016-06-11T14:35:13.000Z","_content":"\n\n**非开发类**\n1.`WeiboX`:Mac上看微博必备\n\n![][1-1]\n\n2.`1Password`:同步账户密码,license等的神器,最好买MAS版本,可以用iCloud\n\n![][1-2]\n\n3.`Alfred`:Mac上最好用的workflow工具,是个效率工具<!--More-->\n\n![][1-3]\n\n4.`Aria2`:Mac上百度,迅雷,115网盘下载的神器,需要配合chrome的插件使用\n\n![][1-4]\n\n5.`Bartender`:最好用的StatusBar管理工具,可以选择隐藏一些不会经常去手动操作的App的icon\n\n![][1-5]\n6.`BetterSnapTool`:窗口管理工具,对键盘党来说,应该是最好用的了\n\n![][1-6]\n\n7.`BetterTouchTool`:触摸板功能扩展工具\n\n![][1-7]\n\n8.`Bilibili`:非官方客户端\n\n![][1-8]\n\n9.`Boom2`:Mac音效增强工具,对声音稍敏感些的人,用过就离不开的App,iOS上的App也已经在前段时间上架\n\n![][1-9]\n\n10.`CheatSheet`:长按⌘,就可以显示当前App的基本上所有的快捷键\n\n![][1-10]\n\n11.`CleanMyMac`\n\n![][1-11]\n\n12.`Commander One Pro`:目前Mac上可以完全代替Finder的唯一工具,功能强大\n\n![][1-12]\n\n13.`Downie`:粘贴上一个视频网站的链接,就可以自动解析出视频地址,并下载的App,支持Youtube,Youku等大部分网站\n\n![][1-13]\n\n14.`Duet`:支持把iPhone,iPad,甚至是win的屏幕作为屏幕扩展的一款软件,由Apple前工程师开发\n\n![][1-14]\n\n15.`欧陆词典`:Mac上最好用的词典,内置多种词库,支持云同步\n\n![][1-15]\n\n16.`Feedly`:RSS阅读器\n\n![][1-16]\n\n17.`Folx`:非常强大的下载工具,通常会比迅雷等下载的快一些\n\n![][1-17]\n\n18.`HazeOver`:使用后,会自动把激活窗口高亮,帮你集中注意力\n\n![][1-18]\n\n19.`InsomniaX`:有几个不是太常用的功能,比如可以在你合上盖子的时候不中断下载等\n\n![][1-19]\n\n20.`iStat Menus`:用的最多的一般都是它的网速显示小工具\n\n![][1-20-1]\n\n![][1-20-2]\n\n21.`Magnet`:同样是窗口管理工具,但是非常便宜\n\n![][1-21]\n\n22.`Manico`:非常方便的用键盘切换App的应用\n\n![][1-22]\n\n23.`Mark Man`:通常是设计师用来标注的软件,不过好些开发用的最多\n\n![][1-23]\n\n24.`Moom`:可能是目前最出名的窗口管理工具,还可以\n\n![][1-24]\n\n25.`Mou`:读写Markdown的必备软件. 作者曾经说要上架1.0版本,结果1年多了,还是没消息,但是0.8.7的beta版也是蛮好用的,就是代码块支持的不太好,作者说在1.0会支持,但是明显是不可能了\n\n![][1-25]\n\n26.`Mounty`:可以不用装插件,让Mac支持NTFS\n\n![][1-26]\n\n27.`MWeb`:用来写markdown的另外一款软件,目前除了Mou,大部分人用的应该都是它\n\n![][1-27]\n\n28.`Near Lock`:利用BLE4.0技术,自动lock/unlock 你的Mac的一个软件,软件功能目前已经非常稳定了\n\n![][1-28]\n\n29.`网易云音乐`\n\n![][1-29]\n\n30.`OmniGraffle`\n\n![][1-30]\n\n31.`Paste`:剪贴板管理软件,颜值比较高,不过暂时不能云同步\n\n![][1-31]\n\n32.`Pocket`\n\n![][1-32]\n\n33.`PopClip`:一个功能强大的小工具,popup一个小工具条,然后通过它的插件来实现一些功能\n\n![][1-33-1]\n\n![][1-33-2]\n\n34.`PPDuck`:图片压缩工具,自动选择最优方案,速度较快,好像都是有损压缩\n\n![][1-34]\n\n35.`Proxifier`:功能跟名字一样\n\n![][1-35]\n\n36.`Reeder`:Rss阅读工具,支持者比较多,我自己没用这个\n\n![][1-36]\n\n37.`Leaf`:Rss阅读工具\n\n![][1-37]\n\n38.`ShadowsocksX`:Mac上使用ss的必备工具\n\n![][1-38]\n\n39.`Spotify`:音乐软件,不过不付费的话,会有广告\n\n![][1-39]\n\n40.`Surge`:又是一个强大的梯子,每个月需要用iOS端的App激活一次\n\n![][1-40]\n\n41.`SwitchHosts`:host管理工具,特别是经常需要切换host的人,非常有用\n\n![][1-41]\n\n42.`The Unarchiver`:解压缩工具,MAS上免费\n\n![][1-42]\n\n43.`Tickeys`:一个有趣的软件,可以自己尝试下(免费)\n\n![][1-43]\n\n44.`Ulysses`:在MWeb出来前是最好用的Markdown写作软件(当然,现在也是!)\n不过MWeb的用户可能会更多些(因为便宜py)\n\n![][1-44]\n\n45.`Yoink`:随时随地暂存文件的工具,可以拖动任何格式的文件到它的管理区内,这样的软件比较多,但是这个比较好用些\n\n![][1-45-1]\n\n![][1-45-2]\n\n46.`鼠须管:`神级输入法,有一定的门槛,但是如果要求不高,那就和普通输入法基本一样,不需要什么配置,主题,词库之类的配置起来也非常容易\n\n![][1-46]\n\n\n\n\n**开发类**\n1.`AliasManage`:alias管理工具,首次使用需要选择.bashsrc 或者.zshrc等终端配置文件\n\n![][2-1]\n\n2.`Atom`:Github出品的一个写代码的工具,和Sublime类似,但是颜值比较高,交互也不错,插件也比较多\n\n![][2-2]\n\n3.`Base`:好用的数据库管理工具\n\n![][2-3]\n\n4.`Charles`:非常强大的网络调试工具\n\n![][2-4]\n\n5.`Dash`:开发文档管理和查看工具,支持非常多的语言,还支持google和stackoverflow\n\n![][2-5]\n\n6.`dSYM`:Crash log自动分析的好工具\n\n![][2-6]\n\n7.`FileZilla`:开源的FTP工具\n\n![][2-7]\n\n8.`RegexToolBox`:正则测试工具\n\n![][2-8]\n\n9.`WWDC`:wwdc资源下载工具,也可以在线看\n\n![][2-9]\n\n10.`Hopper Disassembler`:逆向必备,比IDA容易很多\n\n![][2-10]\n\n11.`Hype`:无需代码的web开发的工具\n\n![][2-11]\n\n12.`iTerm`:替代系统自带终端的工具,配合zsh,非常好用\n\n![][2-12]\n\n13.`VSCode`:微软出品的一个写代码的工具,插件不是很多,但是非常干净整洁\n\n![][2-13]\n\n14.`PaintCode`:把设计稿自动转换为代码的工具\n\n![][2-14]\n\n15.`Paw`:接口调试工具\n\n![][2-15]\n\n16.`Prepo`:提供一个1024的png,就可以生成所有尺寸的icon,非常好用,还免费\n\n![][2-16]\n\n17.`Reveal`:iOS开发调试工具,可以显示所有的视图层级;如果有越狱设备,还可以查看任意一个设备里安装的app的视图结构\n\n![][2-17]\n\n18.`SimPholders`:方便的沙盒定位工具,不过目前已经收费了,可以找之前的免费版本\n\n![][2-18]\n\n19.`Sip`:取色工具,比系统自带的强大,可以自动生成代码,有历史列表的支持\n\n![][2-19]\n\n20.`Sketch`:设计类软件,但是开发用的也不少,画一些简单的原型图什么的,非常方便\n\n![][2-20]\n\n21.`SnippetsLab`:可以保存你的代码块,支持云同步\n\n![][2-21]\n\n22.`Spark Inspector`:和Reveal一样,但是可以自动刷新,非常方便,但是目前好像是不支持真机调试\n\n![][2-22]\n\n23.`sqlitbrowser`:免费的sqlite数据库管理工具\n\n![][2-23]\n\n24.`TextWrangler`:又一个强大的文本编辑器,免费\n\n![][2-24]\n\n25.`还有一些功能强大,但是用起来比较危险的软件,就不介绍了`\n\n\n### 有这么几个网站可以关注下:\n1.[https://bundlehunt.com](https://bundlehunt.com) \n`经常会有software-bundle 出售,一般都是$19.99,或者$21.99,老牌软件厂商喜欢参加这个活动,降价幅度很大`\n2.[反斗限免](http://free.apprcn.com/) \n`Android, iOS, Windows, BLACKBERRY 10平台的限免软件都有, 不过一般限免都有时间限制, 可以关注他们的微信公众号和微博,比较方便`\n3.[https://stacksocial.com/](https://stacksocial.com/)\n`这个网站有时候会有免费的bundle,但是如果订阅了的话,会很烦,因为它经常会给你发邮件,频率比较高....`\n4.[http://appshopper.com/](http://appshopper.com/)\n`各种App限免,降价等资讯的主要来源`\n5.`凑够5个`\n\n```\n购买正版App的几个建议：\n\n1.尽量选择在 Mac AppStore（简称MAS）上购买,只有 MAS 渠道的可以使用 iCloud 同步!\n  而且MAS版本的一般没有授权限制，并且不需要你用记事软件等记录license/key，省却了一堆的麻烦事！ \n2.如果软件还在官网等渠道销售，而且版本迭代比 MAS 快很多，最好在其他渠道购买 \n3.关注 bundlehunt，反斗限免，appshopper 等网站，购买降价，限免,或者是多个软件的低价bundle\n\n```\n\n```\n后续几篇预告:\n1.Xcode plugin\n2.Alfred workflow入门\n3.Alfred workflow高手进阶\n4.开发类书籍推荐\n\n注:前面的序号和文章发布的顺序无关\n```\n\n[1-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-1.png/blog\n[1-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-2.png/blog\n[1-3]: http://7xt8tf.com1.z0.glb.clouddn.com/1-3.png/blog\n[1-4]: http://7xt8tf.com1.z0.glb.clouddn.com/1-4.png/blog\n[1-5]: http://7xt8tf.com1.z0.glb.clouddn.com/1-5.png/blog\n[1-6]: http://7xt8tf.com1.z0.glb.clouddn.com/1-6.png/blog\n[1-7]: http://7xt8tf.com1.z0.glb.clouddn.com/1-7.png/blog\n[1-8]: http://7xt8tf.com1.z0.glb.clouddn.com/1-8.png/blog\n[1-9]: http://7xt8tf.com1.z0.glb.clouddn.com/1-9.png/blog\n[1-10]: http://7xt8tf.com1.z0.glb.clouddn.com/1-10.png/blog\n[1-11]: http://7xt8tf.com1.z0.glb.clouddn.com/1-11.png/blog\n[1-12]: http://7xt8tf.com1.z0.glb.clouddn.com/1-12.png/blog\n[1-13]: http://7xt8tf.com1.z0.glb.clouddn.com/1-13.png/blog\n[1-14]: http://7xt8tf.com1.z0.glb.clouddn.com/1-14.png/blog\n[1-15]: http://7xt8tf.com1.z0.glb.clouddn.com/1-15.png/blog\n[1-16]: http://7xt8tf.com1.z0.glb.clouddn.com/1-16.png/blog\n[1-17]: http://7xt8tf.com1.z0.glb.clouddn.com/1-17.png/blog\n[1-18]: http://7xt8tf.com1.z0.glb.clouddn.com/1-18.png/blog\n[1-19]: http://7xt8tf.com1.z0.glb.clouddn.com/1-19.png/blog\n[1-20-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-20-1.png/blog\n[1-20-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-20-2.png/blog\n[1-21]: http://7xt8tf.com1.z0.glb.clouddn.com/1-21.png/blog\n[1-22]: http://7xt8tf.com1.z0.glb.clouddn.com/1-22.png/blog\n[1-23]: http://7xt8tf.com1.z0.glb.clouddn.com/1-23.png/blog\n[1-24]: http://7xt8tf.com1.z0.glb.clouddn.com/1-24.png/blog\n[1-25]: http://7xt8tf.com1.z0.glb.clouddn.com/1-25.png/blog\n[1-26]: http://7xt8tf.com1.z0.glb.clouddn.com/1-26.png/blog\n[1-27]: http://7xt8tf.com1.z0.glb.clouddn.com/1-27.png/blog\n[1-28]: http://7xt8tf.com1.z0.glb.clouddn.com/1-28.png/blog\n[1-29]: http://7xt8tf.com1.z0.glb.clouddn.com/1-29.png/blog\n[1-30]: http://7xt8tf.com1.z0.glb.clouddn.com/1-30.png/blog\n[1-31]: http://7xt8tf.com1.z0.glb.clouddn.com/1-31.png/blog\n[1-32]: http://7xt8tf.com1.z0.glb.clouddn.com/1-32.png/blog\n[1-33-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-33-1.png/blog\n[1-33-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-33-2.png/blog\n[1-34]: http://7xt8tf.com1.z0.glb.clouddn.com/1-34.png/blog\n[1-35]: http://7xt8tf.com1.z0.glb.clouddn.com/1-35.png/blog\n[1-36]: http://7xt8tf.com1.z0.glb.clouddn.com/1-36.png/blog\n[1-37]: http://7xt8tf.com1.z0.glb.clouddn.com/1-37.png/blog\n[1-38]: http://7xt8tf.com1.z0.glb.clouddn.com/1-38.png/blog\n[1-39]: http://7xt8tf.com1.z0.glb.clouddn.com/1-39.png/blog\n[1-40]: http://7xt8tf.com1.z0.glb.clouddn.com/1-40.png/blog\n[1-41]: http://7xt8tf.com1.z0.glb.clouddn.com/1-41.png/blog\n[1-42]: http://7xt8tf.com1.z0.glb.clouddn.com/1-42.png/blog\n[1-43]: http://7xt8tf.com1.z0.glb.clouddn.com/1-43.png/blog\n[1-44]: http://7xt8tf.com1.z0.glb.clouddn.com/1-44.png/blog\n[1-45-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-45-1.png/blog\n[1-45-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-45-2.png/blog\n[1-46]: http://7xt8tf.com1.z0.glb.clouddn.com/1-46.png/blog\n\n[2-1]: http://7xt8tf.com1.z0.glb.clouddn.com/2-1.png/blog\n[2-2]: http://7xt8tf.com1.z0.glb.clouddn.com/2-2.png/blog\n[2-3]: http://7xt8tf.com1.z0.glb.clouddn.com/2-3.png/blog\n[2-4]: http://7xt8tf.com1.z0.glb.clouddn.com/2-4.png/blog\n[2-5]: http://7xt8tf.com1.z0.glb.clouddn.com/2-5.png/blog\n[2-6]: http://7xt8tf.com1.z0.glb.clouddn.com/2-6.png/blog\n[2-7]: http://7xt8tf.com1.z0.glb.clouddn.com/2-7.png/blog\n[2-8]: http://7xt8tf.com1.z0.glb.clouddn.com/2-8.png/blog\n[2-9]: http://7xt8tf.com1.z0.glb.clouddn.com/2-9.png/blog\n[2-10]: http://7xt8tf.com1.z0.glb.clouddn.com/2-10.png/blog\n[2-11]: http://7xt8tf.com1.z0.glb.clouddn.com/2-11.png/blog\n[2-12]: http://7xt8tf.com1.z0.glb.clouddn.com/2-12.png/blog\n[2-13]: http://7xt8tf.com1.z0.glb.clouddn.com/2-13.png/blog\n[2-14]: http://7xt8tf.com1.z0.glb.clouddn.com/2-14.png/blog\n[2-15]: http://7xt8tf.com1.z0.glb.clouddn.com/2-15.png/blog\n[2-16]: http://7xt8tf.com1.z0.glb.clouddn.com/2-16.png/blog\n[2-17]: http://7xt8tf.com1.z0.glb.clouddn.com/2-17.png/blog\n[2-18]: http://7xt8tf.com1.z0.glb.clouddn.com/2-18.png/blog\n[2-19]: http://7xt8tf.com1.z0.glb.clouddn.com/2-19.png/blog\n[2-20]: http://7xt8tf.com1.z0.glb.clouddn.com/2-20.png/blog\n[2-21]: http://7xt8tf.com1.z0.glb.clouddn.com/2-21.png/blog\n[2-22]: http://7xt8tf.com1.z0.glb.clouddn.com/2-22.png/blog\n[2-23]: http://7xt8tf.com1.z0.glb.clouddn.com/2-23.png/blog\n[2-24]: http://7xt8tf.com1.z0.glb.clouddn.com/2-24.png/blog\n\n","source":"_posts/Mac-OSX平台软件推荐.md","raw":"---\ntitle: Mac OSX平台软件推荐\ndate: 2016-06-11 22:35:13\ntags:\n---\n\n\n**非开发类**\n1.`WeiboX`:Mac上看微博必备\n\n![][1-1]\n\n2.`1Password`:同步账户密码,license等的神器,最好买MAS版本,可以用iCloud\n\n![][1-2]\n\n3.`Alfred`:Mac上最好用的workflow工具,是个效率工具<!--More-->\n\n![][1-3]\n\n4.`Aria2`:Mac上百度,迅雷,115网盘下载的神器,需要配合chrome的插件使用\n\n![][1-4]\n\n5.`Bartender`:最好用的StatusBar管理工具,可以选择隐藏一些不会经常去手动操作的App的icon\n\n![][1-5]\n6.`BetterSnapTool`:窗口管理工具,对键盘党来说,应该是最好用的了\n\n![][1-6]\n\n7.`BetterTouchTool`:触摸板功能扩展工具\n\n![][1-7]\n\n8.`Bilibili`:非官方客户端\n\n![][1-8]\n\n9.`Boom2`:Mac音效增强工具,对声音稍敏感些的人,用过就离不开的App,iOS上的App也已经在前段时间上架\n\n![][1-9]\n\n10.`CheatSheet`:长按⌘,就可以显示当前App的基本上所有的快捷键\n\n![][1-10]\n\n11.`CleanMyMac`\n\n![][1-11]\n\n12.`Commander One Pro`:目前Mac上可以完全代替Finder的唯一工具,功能强大\n\n![][1-12]\n\n13.`Downie`:粘贴上一个视频网站的链接,就可以自动解析出视频地址,并下载的App,支持Youtube,Youku等大部分网站\n\n![][1-13]\n\n14.`Duet`:支持把iPhone,iPad,甚至是win的屏幕作为屏幕扩展的一款软件,由Apple前工程师开发\n\n![][1-14]\n\n15.`欧陆词典`:Mac上最好用的词典,内置多种词库,支持云同步\n\n![][1-15]\n\n16.`Feedly`:RSS阅读器\n\n![][1-16]\n\n17.`Folx`:非常强大的下载工具,通常会比迅雷等下载的快一些\n\n![][1-17]\n\n18.`HazeOver`:使用后,会自动把激活窗口高亮,帮你集中注意力\n\n![][1-18]\n\n19.`InsomniaX`:有几个不是太常用的功能,比如可以在你合上盖子的时候不中断下载等\n\n![][1-19]\n\n20.`iStat Menus`:用的最多的一般都是它的网速显示小工具\n\n![][1-20-1]\n\n![][1-20-2]\n\n21.`Magnet`:同样是窗口管理工具,但是非常便宜\n\n![][1-21]\n\n22.`Manico`:非常方便的用键盘切换App的应用\n\n![][1-22]\n\n23.`Mark Man`:通常是设计师用来标注的软件,不过好些开发用的最多\n\n![][1-23]\n\n24.`Moom`:可能是目前最出名的窗口管理工具,还可以\n\n![][1-24]\n\n25.`Mou`:读写Markdown的必备软件. 作者曾经说要上架1.0版本,结果1年多了,还是没消息,但是0.8.7的beta版也是蛮好用的,就是代码块支持的不太好,作者说在1.0会支持,但是明显是不可能了\n\n![][1-25]\n\n26.`Mounty`:可以不用装插件,让Mac支持NTFS\n\n![][1-26]\n\n27.`MWeb`:用来写markdown的另外一款软件,目前除了Mou,大部分人用的应该都是它\n\n![][1-27]\n\n28.`Near Lock`:利用BLE4.0技术,自动lock/unlock 你的Mac的一个软件,软件功能目前已经非常稳定了\n\n![][1-28]\n\n29.`网易云音乐`\n\n![][1-29]\n\n30.`OmniGraffle`\n\n![][1-30]\n\n31.`Paste`:剪贴板管理软件,颜值比较高,不过暂时不能云同步\n\n![][1-31]\n\n32.`Pocket`\n\n![][1-32]\n\n33.`PopClip`:一个功能强大的小工具,popup一个小工具条,然后通过它的插件来实现一些功能\n\n![][1-33-1]\n\n![][1-33-2]\n\n34.`PPDuck`:图片压缩工具,自动选择最优方案,速度较快,好像都是有损压缩\n\n![][1-34]\n\n35.`Proxifier`:功能跟名字一样\n\n![][1-35]\n\n36.`Reeder`:Rss阅读工具,支持者比较多,我自己没用这个\n\n![][1-36]\n\n37.`Leaf`:Rss阅读工具\n\n![][1-37]\n\n38.`ShadowsocksX`:Mac上使用ss的必备工具\n\n![][1-38]\n\n39.`Spotify`:音乐软件,不过不付费的话,会有广告\n\n![][1-39]\n\n40.`Surge`:又是一个强大的梯子,每个月需要用iOS端的App激活一次\n\n![][1-40]\n\n41.`SwitchHosts`:host管理工具,特别是经常需要切换host的人,非常有用\n\n![][1-41]\n\n42.`The Unarchiver`:解压缩工具,MAS上免费\n\n![][1-42]\n\n43.`Tickeys`:一个有趣的软件,可以自己尝试下(免费)\n\n![][1-43]\n\n44.`Ulysses`:在MWeb出来前是最好用的Markdown写作软件(当然,现在也是!)\n不过MWeb的用户可能会更多些(因为便宜py)\n\n![][1-44]\n\n45.`Yoink`:随时随地暂存文件的工具,可以拖动任何格式的文件到它的管理区内,这样的软件比较多,但是这个比较好用些\n\n![][1-45-1]\n\n![][1-45-2]\n\n46.`鼠须管:`神级输入法,有一定的门槛,但是如果要求不高,那就和普通输入法基本一样,不需要什么配置,主题,词库之类的配置起来也非常容易\n\n![][1-46]\n\n\n\n\n**开发类**\n1.`AliasManage`:alias管理工具,首次使用需要选择.bashsrc 或者.zshrc等终端配置文件\n\n![][2-1]\n\n2.`Atom`:Github出品的一个写代码的工具,和Sublime类似,但是颜值比较高,交互也不错,插件也比较多\n\n![][2-2]\n\n3.`Base`:好用的数据库管理工具\n\n![][2-3]\n\n4.`Charles`:非常强大的网络调试工具\n\n![][2-4]\n\n5.`Dash`:开发文档管理和查看工具,支持非常多的语言,还支持google和stackoverflow\n\n![][2-5]\n\n6.`dSYM`:Crash log自动分析的好工具\n\n![][2-6]\n\n7.`FileZilla`:开源的FTP工具\n\n![][2-7]\n\n8.`RegexToolBox`:正则测试工具\n\n![][2-8]\n\n9.`WWDC`:wwdc资源下载工具,也可以在线看\n\n![][2-9]\n\n10.`Hopper Disassembler`:逆向必备,比IDA容易很多\n\n![][2-10]\n\n11.`Hype`:无需代码的web开发的工具\n\n![][2-11]\n\n12.`iTerm`:替代系统自带终端的工具,配合zsh,非常好用\n\n![][2-12]\n\n13.`VSCode`:微软出品的一个写代码的工具,插件不是很多,但是非常干净整洁\n\n![][2-13]\n\n14.`PaintCode`:把设计稿自动转换为代码的工具\n\n![][2-14]\n\n15.`Paw`:接口调试工具\n\n![][2-15]\n\n16.`Prepo`:提供一个1024的png,就可以生成所有尺寸的icon,非常好用,还免费\n\n![][2-16]\n\n17.`Reveal`:iOS开发调试工具,可以显示所有的视图层级;如果有越狱设备,还可以查看任意一个设备里安装的app的视图结构\n\n![][2-17]\n\n18.`SimPholders`:方便的沙盒定位工具,不过目前已经收费了,可以找之前的免费版本\n\n![][2-18]\n\n19.`Sip`:取色工具,比系统自带的强大,可以自动生成代码,有历史列表的支持\n\n![][2-19]\n\n20.`Sketch`:设计类软件,但是开发用的也不少,画一些简单的原型图什么的,非常方便\n\n![][2-20]\n\n21.`SnippetsLab`:可以保存你的代码块,支持云同步\n\n![][2-21]\n\n22.`Spark Inspector`:和Reveal一样,但是可以自动刷新,非常方便,但是目前好像是不支持真机调试\n\n![][2-22]\n\n23.`sqlitbrowser`:免费的sqlite数据库管理工具\n\n![][2-23]\n\n24.`TextWrangler`:又一个强大的文本编辑器,免费\n\n![][2-24]\n\n25.`还有一些功能强大,但是用起来比较危险的软件,就不介绍了`\n\n\n### 有这么几个网站可以关注下:\n1.[https://bundlehunt.com](https://bundlehunt.com) \n`经常会有software-bundle 出售,一般都是$19.99,或者$21.99,老牌软件厂商喜欢参加这个活动,降价幅度很大`\n2.[反斗限免](http://free.apprcn.com/) \n`Android, iOS, Windows, BLACKBERRY 10平台的限免软件都有, 不过一般限免都有时间限制, 可以关注他们的微信公众号和微博,比较方便`\n3.[https://stacksocial.com/](https://stacksocial.com/)\n`这个网站有时候会有免费的bundle,但是如果订阅了的话,会很烦,因为它经常会给你发邮件,频率比较高....`\n4.[http://appshopper.com/](http://appshopper.com/)\n`各种App限免,降价等资讯的主要来源`\n5.`凑够5个`\n\n```\n购买正版App的几个建议：\n\n1.尽量选择在 Mac AppStore（简称MAS）上购买,只有 MAS 渠道的可以使用 iCloud 同步!\n  而且MAS版本的一般没有授权限制，并且不需要你用记事软件等记录license/key，省却了一堆的麻烦事！ \n2.如果软件还在官网等渠道销售，而且版本迭代比 MAS 快很多，最好在其他渠道购买 \n3.关注 bundlehunt，反斗限免，appshopper 等网站，购买降价，限免,或者是多个软件的低价bundle\n\n```\n\n```\n后续几篇预告:\n1.Xcode plugin\n2.Alfred workflow入门\n3.Alfred workflow高手进阶\n4.开发类书籍推荐\n\n注:前面的序号和文章发布的顺序无关\n```\n\n[1-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-1.png/blog\n[1-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-2.png/blog\n[1-3]: http://7xt8tf.com1.z0.glb.clouddn.com/1-3.png/blog\n[1-4]: http://7xt8tf.com1.z0.glb.clouddn.com/1-4.png/blog\n[1-5]: http://7xt8tf.com1.z0.glb.clouddn.com/1-5.png/blog\n[1-6]: http://7xt8tf.com1.z0.glb.clouddn.com/1-6.png/blog\n[1-7]: http://7xt8tf.com1.z0.glb.clouddn.com/1-7.png/blog\n[1-8]: http://7xt8tf.com1.z0.glb.clouddn.com/1-8.png/blog\n[1-9]: http://7xt8tf.com1.z0.glb.clouddn.com/1-9.png/blog\n[1-10]: http://7xt8tf.com1.z0.glb.clouddn.com/1-10.png/blog\n[1-11]: http://7xt8tf.com1.z0.glb.clouddn.com/1-11.png/blog\n[1-12]: http://7xt8tf.com1.z0.glb.clouddn.com/1-12.png/blog\n[1-13]: http://7xt8tf.com1.z0.glb.clouddn.com/1-13.png/blog\n[1-14]: http://7xt8tf.com1.z0.glb.clouddn.com/1-14.png/blog\n[1-15]: http://7xt8tf.com1.z0.glb.clouddn.com/1-15.png/blog\n[1-16]: http://7xt8tf.com1.z0.glb.clouddn.com/1-16.png/blog\n[1-17]: http://7xt8tf.com1.z0.glb.clouddn.com/1-17.png/blog\n[1-18]: http://7xt8tf.com1.z0.glb.clouddn.com/1-18.png/blog\n[1-19]: http://7xt8tf.com1.z0.glb.clouddn.com/1-19.png/blog\n[1-20-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-20-1.png/blog\n[1-20-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-20-2.png/blog\n[1-21]: http://7xt8tf.com1.z0.glb.clouddn.com/1-21.png/blog\n[1-22]: http://7xt8tf.com1.z0.glb.clouddn.com/1-22.png/blog\n[1-23]: http://7xt8tf.com1.z0.glb.clouddn.com/1-23.png/blog\n[1-24]: http://7xt8tf.com1.z0.glb.clouddn.com/1-24.png/blog\n[1-25]: http://7xt8tf.com1.z0.glb.clouddn.com/1-25.png/blog\n[1-26]: http://7xt8tf.com1.z0.glb.clouddn.com/1-26.png/blog\n[1-27]: http://7xt8tf.com1.z0.glb.clouddn.com/1-27.png/blog\n[1-28]: http://7xt8tf.com1.z0.glb.clouddn.com/1-28.png/blog\n[1-29]: http://7xt8tf.com1.z0.glb.clouddn.com/1-29.png/blog\n[1-30]: http://7xt8tf.com1.z0.glb.clouddn.com/1-30.png/blog\n[1-31]: http://7xt8tf.com1.z0.glb.clouddn.com/1-31.png/blog\n[1-32]: http://7xt8tf.com1.z0.glb.clouddn.com/1-32.png/blog\n[1-33-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-33-1.png/blog\n[1-33-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-33-2.png/blog\n[1-34]: http://7xt8tf.com1.z0.glb.clouddn.com/1-34.png/blog\n[1-35]: http://7xt8tf.com1.z0.glb.clouddn.com/1-35.png/blog\n[1-36]: http://7xt8tf.com1.z0.glb.clouddn.com/1-36.png/blog\n[1-37]: http://7xt8tf.com1.z0.glb.clouddn.com/1-37.png/blog\n[1-38]: http://7xt8tf.com1.z0.glb.clouddn.com/1-38.png/blog\n[1-39]: http://7xt8tf.com1.z0.glb.clouddn.com/1-39.png/blog\n[1-40]: http://7xt8tf.com1.z0.glb.clouddn.com/1-40.png/blog\n[1-41]: http://7xt8tf.com1.z0.glb.clouddn.com/1-41.png/blog\n[1-42]: http://7xt8tf.com1.z0.glb.clouddn.com/1-42.png/blog\n[1-43]: http://7xt8tf.com1.z0.glb.clouddn.com/1-43.png/blog\n[1-44]: http://7xt8tf.com1.z0.glb.clouddn.com/1-44.png/blog\n[1-45-1]: http://7xt8tf.com1.z0.glb.clouddn.com/1-45-1.png/blog\n[1-45-2]: http://7xt8tf.com1.z0.glb.clouddn.com/1-45-2.png/blog\n[1-46]: http://7xt8tf.com1.z0.glb.clouddn.com/1-46.png/blog\n\n[2-1]: http://7xt8tf.com1.z0.glb.clouddn.com/2-1.png/blog\n[2-2]: http://7xt8tf.com1.z0.glb.clouddn.com/2-2.png/blog\n[2-3]: http://7xt8tf.com1.z0.glb.clouddn.com/2-3.png/blog\n[2-4]: http://7xt8tf.com1.z0.glb.clouddn.com/2-4.png/blog\n[2-5]: http://7xt8tf.com1.z0.glb.clouddn.com/2-5.png/blog\n[2-6]: http://7xt8tf.com1.z0.glb.clouddn.com/2-6.png/blog\n[2-7]: http://7xt8tf.com1.z0.glb.clouddn.com/2-7.png/blog\n[2-8]: http://7xt8tf.com1.z0.glb.clouddn.com/2-8.png/blog\n[2-9]: http://7xt8tf.com1.z0.glb.clouddn.com/2-9.png/blog\n[2-10]: http://7xt8tf.com1.z0.glb.clouddn.com/2-10.png/blog\n[2-11]: http://7xt8tf.com1.z0.glb.clouddn.com/2-11.png/blog\n[2-12]: http://7xt8tf.com1.z0.glb.clouddn.com/2-12.png/blog\n[2-13]: http://7xt8tf.com1.z0.glb.clouddn.com/2-13.png/blog\n[2-14]: http://7xt8tf.com1.z0.glb.clouddn.com/2-14.png/blog\n[2-15]: http://7xt8tf.com1.z0.glb.clouddn.com/2-15.png/blog\n[2-16]: http://7xt8tf.com1.z0.glb.clouddn.com/2-16.png/blog\n[2-17]: http://7xt8tf.com1.z0.glb.clouddn.com/2-17.png/blog\n[2-18]: http://7xt8tf.com1.z0.glb.clouddn.com/2-18.png/blog\n[2-19]: http://7xt8tf.com1.z0.glb.clouddn.com/2-19.png/blog\n[2-20]: http://7xt8tf.com1.z0.glb.clouddn.com/2-20.png/blog\n[2-21]: http://7xt8tf.com1.z0.glb.clouddn.com/2-21.png/blog\n[2-22]: http://7xt8tf.com1.z0.glb.clouddn.com/2-22.png/blog\n[2-23]: http://7xt8tf.com1.z0.glb.clouddn.com/2-23.png/blog\n[2-24]: http://7xt8tf.com1.z0.glb.clouddn.com/2-24.png/blog\n\n","slug":"Mac-OSX平台软件推荐","published":1,"updated":"2016-07-23T16:15:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbsb000mf1s6m35w74up","content":"<p><strong>非开发类</strong><br>1.<code>WeiboX</code>:Mac上看微博必备</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-1.png/blog\" alt=\"\"></p>\n<p>2.<code>1Password</code>:同步账户密码,license等的神器,最好买MAS版本,可以用iCloud</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-2.png/blog\" alt=\"\"></p>\n<p>3.<code>Alfred</code>:Mac上最好用的workflow工具,是个效率工具<a id=\"more\"></a></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-3.png/blog\" alt=\"\"></p>\n<p>4.<code>Aria2</code>:Mac上百度,迅雷,115网盘下载的神器,需要配合chrome的插件使用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-4.png/blog\" alt=\"\"></p>\n<p>5.<code>Bartender</code>:最好用的StatusBar管理工具,可以选择隐藏一些不会经常去手动操作的App的icon</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-5.png/blog\" alt=\"\"><br>6.<code>BetterSnapTool</code>:窗口管理工具,对键盘党来说,应该是最好用的了</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-6.png/blog\" alt=\"\"></p>\n<p>7.<code>BetterTouchTool</code>:触摸板功能扩展工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-7.png/blog\" alt=\"\"></p>\n<p>8.<code>Bilibili</code>:非官方客户端</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-8.png/blog\" alt=\"\"></p>\n<p>9.<code>Boom2</code>:Mac音效增强工具,对声音稍敏感些的人,用过就离不开的App,iOS上的App也已经在前段时间上架</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-9.png/blog\" alt=\"\"></p>\n<p>10.<code>CheatSheet</code>:长按⌘,就可以显示当前App的基本上所有的快捷键</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-10.png/blog\" alt=\"\"></p>\n<p>11.<code>CleanMyMac</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-11.png/blog\" alt=\"\"></p>\n<p>12.<code>Commander One Pro</code>:目前Mac上可以完全代替Finder的唯一工具,功能强大</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-12.png/blog\" alt=\"\"></p>\n<p>13.<code>Downie</code>:粘贴上一个视频网站的链接,就可以自动解析出视频地址,并下载的App,支持Youtube,Youku等大部分网站</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-13.png/blog\" alt=\"\"></p>\n<p>14.<code>Duet</code>:支持把iPhone,iPad,甚至是win的屏幕作为屏幕扩展的一款软件,由Apple前工程师开发</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-14.png/blog\" alt=\"\"></p>\n<p>15.<code>欧陆词典</code>:Mac上最好用的词典,内置多种词库,支持云同步</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-15.png/blog\" alt=\"\"></p>\n<p>16.<code>Feedly</code>:RSS阅读器</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-16.png/blog\" alt=\"\"></p>\n<p>17.<code>Folx</code>:非常强大的下载工具,通常会比迅雷等下载的快一些</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-17.png/blog\" alt=\"\"></p>\n<p>18.<code>HazeOver</code>:使用后,会自动把激活窗口高亮,帮你集中注意力</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-18.png/blog\" alt=\"\"></p>\n<p>19.<code>InsomniaX</code>:有几个不是太常用的功能,比如可以在你合上盖子的时候不中断下载等</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-19.png/blog\" alt=\"\"></p>\n<p>20.<code>iStat Menus</code>:用的最多的一般都是它的网速显示小工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-20-1.png/blog\" alt=\"\"></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-20-2.png/blog\" alt=\"\"></p>\n<p>21.<code>Magnet</code>:同样是窗口管理工具,但是非常便宜</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-21.png/blog\" alt=\"\"></p>\n<p>22.<code>Manico</code>:非常方便的用键盘切换App的应用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-22.png/blog\" alt=\"\"></p>\n<p>23.<code>Mark Man</code>:通常是设计师用来标注的软件,不过好些开发用的最多</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-23.png/blog\" alt=\"\"></p>\n<p>24.<code>Moom</code>:可能是目前最出名的窗口管理工具,还可以</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-24.png/blog\" alt=\"\"></p>\n<p>25.<code>Mou</code>:读写Markdown的必备软件. 作者曾经说要上架1.0版本,结果1年多了,还是没消息,但是0.8.7的beta版也是蛮好用的,就是代码块支持的不太好,作者说在1.0会支持,但是明显是不可能了</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-25.png/blog\" alt=\"\"></p>\n<p>26.<code>Mounty</code>:可以不用装插件,让Mac支持NTFS</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-26.png/blog\" alt=\"\"></p>\n<p>27.<code>MWeb</code>:用来写markdown的另外一款软件,目前除了Mou,大部分人用的应该都是它</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-27.png/blog\" alt=\"\"></p>\n<p>28.<code>Near Lock</code>:利用BLE4.0技术,自动lock/unlock 你的Mac的一个软件,软件功能目前已经非常稳定了</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-28.png/blog\" alt=\"\"></p>\n<p>29.<code>网易云音乐</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-29.png/blog\" alt=\"\"></p>\n<p>30.<code>OmniGraffle</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-30.png/blog\" alt=\"\"></p>\n<p>31.<code>Paste</code>:剪贴板管理软件,颜值比较高,不过暂时不能云同步</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-31.png/blog\" alt=\"\"></p>\n<p>32.<code>Pocket</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-32.png/blog\" alt=\"\"></p>\n<p>33.<code>PopClip</code>:一个功能强大的小工具,popup一个小工具条,然后通过它的插件来实现一些功能</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-33-1.png/blog\" alt=\"\"></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-33-2.png/blog\" alt=\"\"></p>\n<p>34.<code>PPDuck</code>:图片压缩工具,自动选择最优方案,速度较快,好像都是有损压缩</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-34.png/blog\" alt=\"\"></p>\n<p>35.<code>Proxifier</code>:功能跟名字一样</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-35.png/blog\" alt=\"\"></p>\n<p>36.<code>Reeder</code>:Rss阅读工具,支持者比较多,我自己没用这个</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-36.png/blog\" alt=\"\"></p>\n<p>37.<code>Leaf</code>:Rss阅读工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-37.png/blog\" alt=\"\"></p>\n<p>38.<code>ShadowsocksX</code>:Mac上使用ss的必备工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-38.png/blog\" alt=\"\"></p>\n<p>39.<code>Spotify</code>:音乐软件,不过不付费的话,会有广告</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-39.png/blog\" alt=\"\"></p>\n<p>40.<code>Surge</code>:又是一个强大的梯子,每个月需要用iOS端的App激活一次</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-40.png/blog\" alt=\"\"></p>\n<p>41.<code>SwitchHosts</code>:host管理工具,特别是经常需要切换host的人,非常有用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-41.png/blog\" alt=\"\"></p>\n<p>42.<code>The Unarchiver</code>:解压缩工具,MAS上免费</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-42.png/blog\" alt=\"\"></p>\n<p>43.<code>Tickeys</code>:一个有趣的软件,可以自己尝试下(免费)</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-43.png/blog\" alt=\"\"></p>\n<p>44.<code>Ulysses</code>:在MWeb出来前是最好用的Markdown写作软件(当然,现在也是!)<br>不过MWeb的用户可能会更多些(因为便宜py)</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-44.png/blog\" alt=\"\"></p>\n<p>45.<code>Yoink</code>:随时随地暂存文件的工具,可以拖动任何格式的文件到它的管理区内,这样的软件比较多,但是这个比较好用些</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-45-1.png/blog\" alt=\"\"></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-45-2.png/blog\" alt=\"\"></p>\n<p>46.<code>鼠须管:</code>神级输入法,有一定的门槛,但是如果要求不高,那就和普通输入法基本一样,不需要什么配置,主题,词库之类的配置起来也非常容易</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-46.png/blog\" alt=\"\"></p>\n<p><strong>开发类</strong><br>1.<code>AliasManage</code>:alias管理工具,首次使用需要选择.bashsrc 或者.zshrc等终端配置文件</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-1.png/blog\" alt=\"\"></p>\n<p>2.<code>Atom</code>:Github出品的一个写代码的工具,和Sublime类似,但是颜值比较高,交互也不错,插件也比较多</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-2.png/blog\" alt=\"\"></p>\n<p>3.<code>Base</code>:好用的数据库管理工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-3.png/blog\" alt=\"\"></p>\n<p>4.<code>Charles</code>:非常强大的网络调试工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-4.png/blog\" alt=\"\"></p>\n<p>5.<code>Dash</code>:开发文档管理和查看工具,支持非常多的语言,还支持google和stackoverflow</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-5.png/blog\" alt=\"\"></p>\n<p>6.<code>dSYM</code>:Crash log自动分析的好工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-6.png/blog\" alt=\"\"></p>\n<p>7.<code>FileZilla</code>:开源的FTP工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-7.png/blog\" alt=\"\"></p>\n<p>8.<code>RegexToolBox</code>:正则测试工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-8.png/blog\" alt=\"\"></p>\n<p>9.<code>WWDC</code>:wwdc资源下载工具,也可以在线看</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-9.png/blog\" alt=\"\"></p>\n<p>10.<code>Hopper Disassembler</code>:逆向必备,比IDA容易很多</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-10.png/blog\" alt=\"\"></p>\n<p>11.<code>Hype</code>:无需代码的web开发的工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-11.png/blog\" alt=\"\"></p>\n<p>12.<code>iTerm</code>:替代系统自带终端的工具,配合zsh,非常好用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-12.png/blog\" alt=\"\"></p>\n<p>13.<code>VSCode</code>:微软出品的一个写代码的工具,插件不是很多,但是非常干净整洁</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-13.png/blog\" alt=\"\"></p>\n<p>14.<code>PaintCode</code>:把设计稿自动转换为代码的工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-14.png/blog\" alt=\"\"></p>\n<p>15.<code>Paw</code>:接口调试工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-15.png/blog\" alt=\"\"></p>\n<p>16.<code>Prepo</code>:提供一个1024的png,就可以生成所有尺寸的icon,非常好用,还免费</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-16.png/blog\" alt=\"\"></p>\n<p>17.<code>Reveal</code>:iOS开发调试工具,可以显示所有的视图层级;如果有越狱设备,还可以查看任意一个设备里安装的app的视图结构</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-17.png/blog\" alt=\"\"></p>\n<p>18.<code>SimPholders</code>:方便的沙盒定位工具,不过目前已经收费了,可以找之前的免费版本</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-18.png/blog\" alt=\"\"></p>\n<p>19.<code>Sip</code>:取色工具,比系统自带的强大,可以自动生成代码,有历史列表的支持</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-19.png/blog\" alt=\"\"></p>\n<p>20.<code>Sketch</code>:设计类软件,但是开发用的也不少,画一些简单的原型图什么的,非常方便</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-20.png/blog\" alt=\"\"></p>\n<p>21.<code>SnippetsLab</code>:可以保存你的代码块,支持云同步</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-21.png/blog\" alt=\"\"></p>\n<p>22.<code>Spark Inspector</code>:和Reveal一样,但是可以自动刷新,非常方便,但是目前好像是不支持真机调试</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-22.png/blog\" alt=\"\"></p>\n<p>23.<code>sqlitbrowser</code>:免费的sqlite数据库管理工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-23.png/blog\" alt=\"\"></p>\n<p>24.<code>TextWrangler</code>:又一个强大的文本编辑器,免费</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-24.png/blog\" alt=\"\"></p>\n<p>25.<code>还有一些功能强大,但是用起来比较危险的软件,就不介绍了</code></p>\n<h3 id=\"有这么几个网站可以关注下\"><a href=\"#有这么几个网站可以关注下\" class=\"headerlink\" title=\"有这么几个网站可以关注下:\"></a>有这么几个网站可以关注下:</h3><p>1.<a href=\"https://bundlehunt.com\" target=\"_blank\" rel=\"external\">https://bundlehunt.com</a><br><code>经常会有software-bundle 出售,一般都是$19.99,或者$21.99,老牌软件厂商喜欢参加这个活动,降价幅度很大</code><br>2.<a href=\"http://free.apprcn.com/\" target=\"_blank\" rel=\"external\">反斗限免</a><br><code>Android, iOS, Windows, BLACKBERRY 10平台的限免软件都有, 不过一般限免都有时间限制, 可以关注他们的微信公众号和微博,比较方便</code><br>3.<a href=\"https://stacksocial.com/\" target=\"_blank\" rel=\"external\">https://stacksocial.com/</a><br><code>这个网站有时候会有免费的bundle,但是如果订阅了的话,会很烦,因为它经常会给你发邮件,频率比较高....</code><br>4.<a href=\"http://appshopper.com/\" target=\"_blank\" rel=\"external\">http://appshopper.com/</a><br><code>各种App限免,降价等资讯的主要来源</code><br>5.<code>凑够5个</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">购买正版App的几个建议：</span><br><span class=\"line\"></span><br><span class=\"line\">1.尽量选择在 Mac AppStore（简称MAS）上购买,只有 MAS 渠道的可以使用 iCloud 同步!</span><br><span class=\"line\">  而且MAS版本的一般没有授权限制，并且不需要你用记事软件等记录license/key，省却了一堆的麻烦事！ </span><br><span class=\"line\">2.如果软件还在官网等渠道销售，而且版本迭代比 MAS 快很多，最好在其他渠道购买 </span><br><span class=\"line\">3.关注 bundlehunt，反斗限免，appshopper 等网站，购买降价，限免,或者是多个软件的低价bundle</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后续几篇预告:</span><br><span class=\"line\">1.Xcode plugin</span><br><span class=\"line\">2.Alfred workflow入门</span><br><span class=\"line\">3.Alfred workflow高手进阶</span><br><span class=\"line\">4.开发类书籍推荐</span><br><span class=\"line\"></span><br><span class=\"line\">注:前面的序号和文章发布的顺序无关</span><br></pre></td></tr></table></figure>\n","excerpt":"<p><strong>非开发类</strong><br>1.<code>WeiboX</code>:Mac上看微博必备</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-1.png/blog\" alt=\"\"></p>\n<p>2.<code>1Password</code>:同步账户密码,license等的神器,最好买MAS版本,可以用iCloud</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-2.png/blog\" alt=\"\"></p>\n<p>3.<code>Alfred</code>:Mac上最好用的workflow工具,是个效率工具","more":"</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-3.png/blog\" alt=\"\"></p>\n<p>4.<code>Aria2</code>:Mac上百度,迅雷,115网盘下载的神器,需要配合chrome的插件使用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-4.png/blog\" alt=\"\"></p>\n<p>5.<code>Bartender</code>:最好用的StatusBar管理工具,可以选择隐藏一些不会经常去手动操作的App的icon</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-5.png/blog\" alt=\"\"><br>6.<code>BetterSnapTool</code>:窗口管理工具,对键盘党来说,应该是最好用的了</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-6.png/blog\" alt=\"\"></p>\n<p>7.<code>BetterTouchTool</code>:触摸板功能扩展工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-7.png/blog\" alt=\"\"></p>\n<p>8.<code>Bilibili</code>:非官方客户端</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-8.png/blog\" alt=\"\"></p>\n<p>9.<code>Boom2</code>:Mac音效增强工具,对声音稍敏感些的人,用过就离不开的App,iOS上的App也已经在前段时间上架</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-9.png/blog\" alt=\"\"></p>\n<p>10.<code>CheatSheet</code>:长按⌘,就可以显示当前App的基本上所有的快捷键</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-10.png/blog\" alt=\"\"></p>\n<p>11.<code>CleanMyMac</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-11.png/blog\" alt=\"\"></p>\n<p>12.<code>Commander One Pro</code>:目前Mac上可以完全代替Finder的唯一工具,功能强大</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-12.png/blog\" alt=\"\"></p>\n<p>13.<code>Downie</code>:粘贴上一个视频网站的链接,就可以自动解析出视频地址,并下载的App,支持Youtube,Youku等大部分网站</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-13.png/blog\" alt=\"\"></p>\n<p>14.<code>Duet</code>:支持把iPhone,iPad,甚至是win的屏幕作为屏幕扩展的一款软件,由Apple前工程师开发</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-14.png/blog\" alt=\"\"></p>\n<p>15.<code>欧陆词典</code>:Mac上最好用的词典,内置多种词库,支持云同步</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-15.png/blog\" alt=\"\"></p>\n<p>16.<code>Feedly</code>:RSS阅读器</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-16.png/blog\" alt=\"\"></p>\n<p>17.<code>Folx</code>:非常强大的下载工具,通常会比迅雷等下载的快一些</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-17.png/blog\" alt=\"\"></p>\n<p>18.<code>HazeOver</code>:使用后,会自动把激活窗口高亮,帮你集中注意力</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-18.png/blog\" alt=\"\"></p>\n<p>19.<code>InsomniaX</code>:有几个不是太常用的功能,比如可以在你合上盖子的时候不中断下载等</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-19.png/blog\" alt=\"\"></p>\n<p>20.<code>iStat Menus</code>:用的最多的一般都是它的网速显示小工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-20-1.png/blog\" alt=\"\"></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-20-2.png/blog\" alt=\"\"></p>\n<p>21.<code>Magnet</code>:同样是窗口管理工具,但是非常便宜</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-21.png/blog\" alt=\"\"></p>\n<p>22.<code>Manico</code>:非常方便的用键盘切换App的应用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-22.png/blog\" alt=\"\"></p>\n<p>23.<code>Mark Man</code>:通常是设计师用来标注的软件,不过好些开发用的最多</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-23.png/blog\" alt=\"\"></p>\n<p>24.<code>Moom</code>:可能是目前最出名的窗口管理工具,还可以</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-24.png/blog\" alt=\"\"></p>\n<p>25.<code>Mou</code>:读写Markdown的必备软件. 作者曾经说要上架1.0版本,结果1年多了,还是没消息,但是0.8.7的beta版也是蛮好用的,就是代码块支持的不太好,作者说在1.0会支持,但是明显是不可能了</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-25.png/blog\" alt=\"\"></p>\n<p>26.<code>Mounty</code>:可以不用装插件,让Mac支持NTFS</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-26.png/blog\" alt=\"\"></p>\n<p>27.<code>MWeb</code>:用来写markdown的另外一款软件,目前除了Mou,大部分人用的应该都是它</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-27.png/blog\" alt=\"\"></p>\n<p>28.<code>Near Lock</code>:利用BLE4.0技术,自动lock/unlock 你的Mac的一个软件,软件功能目前已经非常稳定了</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-28.png/blog\" alt=\"\"></p>\n<p>29.<code>网易云音乐</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-29.png/blog\" alt=\"\"></p>\n<p>30.<code>OmniGraffle</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-30.png/blog\" alt=\"\"></p>\n<p>31.<code>Paste</code>:剪贴板管理软件,颜值比较高,不过暂时不能云同步</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-31.png/blog\" alt=\"\"></p>\n<p>32.<code>Pocket</code></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-32.png/blog\" alt=\"\"></p>\n<p>33.<code>PopClip</code>:一个功能强大的小工具,popup一个小工具条,然后通过它的插件来实现一些功能</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-33-1.png/blog\" alt=\"\"></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-33-2.png/blog\" alt=\"\"></p>\n<p>34.<code>PPDuck</code>:图片压缩工具,自动选择最优方案,速度较快,好像都是有损压缩</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-34.png/blog\" alt=\"\"></p>\n<p>35.<code>Proxifier</code>:功能跟名字一样</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-35.png/blog\" alt=\"\"></p>\n<p>36.<code>Reeder</code>:Rss阅读工具,支持者比较多,我自己没用这个</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-36.png/blog\" alt=\"\"></p>\n<p>37.<code>Leaf</code>:Rss阅读工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-37.png/blog\" alt=\"\"></p>\n<p>38.<code>ShadowsocksX</code>:Mac上使用ss的必备工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-38.png/blog\" alt=\"\"></p>\n<p>39.<code>Spotify</code>:音乐软件,不过不付费的话,会有广告</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-39.png/blog\" alt=\"\"></p>\n<p>40.<code>Surge</code>:又是一个强大的梯子,每个月需要用iOS端的App激活一次</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-40.png/blog\" alt=\"\"></p>\n<p>41.<code>SwitchHosts</code>:host管理工具,特别是经常需要切换host的人,非常有用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-41.png/blog\" alt=\"\"></p>\n<p>42.<code>The Unarchiver</code>:解压缩工具,MAS上免费</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-42.png/blog\" alt=\"\"></p>\n<p>43.<code>Tickeys</code>:一个有趣的软件,可以自己尝试下(免费)</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-43.png/blog\" alt=\"\"></p>\n<p>44.<code>Ulysses</code>:在MWeb出来前是最好用的Markdown写作软件(当然,现在也是!)<br>不过MWeb的用户可能会更多些(因为便宜py)</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-44.png/blog\" alt=\"\"></p>\n<p>45.<code>Yoink</code>:随时随地暂存文件的工具,可以拖动任何格式的文件到它的管理区内,这样的软件比较多,但是这个比较好用些</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-45-1.png/blog\" alt=\"\"></p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-45-2.png/blog\" alt=\"\"></p>\n<p>46.<code>鼠须管:</code>神级输入法,有一定的门槛,但是如果要求不高,那就和普通输入法基本一样,不需要什么配置,主题,词库之类的配置起来也非常容易</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/1-46.png/blog\" alt=\"\"></p>\n<p><strong>开发类</strong><br>1.<code>AliasManage</code>:alias管理工具,首次使用需要选择.bashsrc 或者.zshrc等终端配置文件</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-1.png/blog\" alt=\"\"></p>\n<p>2.<code>Atom</code>:Github出品的一个写代码的工具,和Sublime类似,但是颜值比较高,交互也不错,插件也比较多</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-2.png/blog\" alt=\"\"></p>\n<p>3.<code>Base</code>:好用的数据库管理工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-3.png/blog\" alt=\"\"></p>\n<p>4.<code>Charles</code>:非常强大的网络调试工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-4.png/blog\" alt=\"\"></p>\n<p>5.<code>Dash</code>:开发文档管理和查看工具,支持非常多的语言,还支持google和stackoverflow</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-5.png/blog\" alt=\"\"></p>\n<p>6.<code>dSYM</code>:Crash log自动分析的好工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-6.png/blog\" alt=\"\"></p>\n<p>7.<code>FileZilla</code>:开源的FTP工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-7.png/blog\" alt=\"\"></p>\n<p>8.<code>RegexToolBox</code>:正则测试工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-8.png/blog\" alt=\"\"></p>\n<p>9.<code>WWDC</code>:wwdc资源下载工具,也可以在线看</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-9.png/blog\" alt=\"\"></p>\n<p>10.<code>Hopper Disassembler</code>:逆向必备,比IDA容易很多</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-10.png/blog\" alt=\"\"></p>\n<p>11.<code>Hype</code>:无需代码的web开发的工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-11.png/blog\" alt=\"\"></p>\n<p>12.<code>iTerm</code>:替代系统自带终端的工具,配合zsh,非常好用</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-12.png/blog\" alt=\"\"></p>\n<p>13.<code>VSCode</code>:微软出品的一个写代码的工具,插件不是很多,但是非常干净整洁</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-13.png/blog\" alt=\"\"></p>\n<p>14.<code>PaintCode</code>:把设计稿自动转换为代码的工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-14.png/blog\" alt=\"\"></p>\n<p>15.<code>Paw</code>:接口调试工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-15.png/blog\" alt=\"\"></p>\n<p>16.<code>Prepo</code>:提供一个1024的png,就可以生成所有尺寸的icon,非常好用,还免费</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-16.png/blog\" alt=\"\"></p>\n<p>17.<code>Reveal</code>:iOS开发调试工具,可以显示所有的视图层级;如果有越狱设备,还可以查看任意一个设备里安装的app的视图结构</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-17.png/blog\" alt=\"\"></p>\n<p>18.<code>SimPholders</code>:方便的沙盒定位工具,不过目前已经收费了,可以找之前的免费版本</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-18.png/blog\" alt=\"\"></p>\n<p>19.<code>Sip</code>:取色工具,比系统自带的强大,可以自动生成代码,有历史列表的支持</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-19.png/blog\" alt=\"\"></p>\n<p>20.<code>Sketch</code>:设计类软件,但是开发用的也不少,画一些简单的原型图什么的,非常方便</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-20.png/blog\" alt=\"\"></p>\n<p>21.<code>SnippetsLab</code>:可以保存你的代码块,支持云同步</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-21.png/blog\" alt=\"\"></p>\n<p>22.<code>Spark Inspector</code>:和Reveal一样,但是可以自动刷新,非常方便,但是目前好像是不支持真机调试</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-22.png/blog\" alt=\"\"></p>\n<p>23.<code>sqlitbrowser</code>:免费的sqlite数据库管理工具</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-23.png/blog\" alt=\"\"></p>\n<p>24.<code>TextWrangler</code>:又一个强大的文本编辑器,免费</p>\n<p><img src=\"http://7xt8tf.com1.z0.glb.clouddn.com/2-24.png/blog\" alt=\"\"></p>\n<p>25.<code>还有一些功能强大,但是用起来比较危险的软件,就不介绍了</code></p>\n<h3 id=\"有这么几个网站可以关注下\"><a href=\"#有这么几个网站可以关注下\" class=\"headerlink\" title=\"有这么几个网站可以关注下:\"></a>有这么几个网站可以关注下:</h3><p>1.<a href=\"https://bundlehunt.com\">https://bundlehunt.com</a><br><code>经常会有software-bundle 出售,一般都是$19.99,或者$21.99,老牌软件厂商喜欢参加这个活动,降价幅度很大</code><br>2.<a href=\"http://free.apprcn.com/\">反斗限免</a><br><code>Android, iOS, Windows, BLACKBERRY 10平台的限免软件都有, 不过一般限免都有时间限制, 可以关注他们的微信公众号和微博,比较方便</code><br>3.<a href=\"https://stacksocial.com/\">https://stacksocial.com/</a><br><code>这个网站有时候会有免费的bundle,但是如果订阅了的话,会很烦,因为它经常会给你发邮件,频率比较高....</code><br>4.<a href=\"http://appshopper.com/\">http://appshopper.com/</a><br><code>各种App限免,降价等资讯的主要来源</code><br>5.<code>凑够5个</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">购买正版App的几个建议：</span><br><span class=\"line\"></span><br><span class=\"line\">1.尽量选择在 Mac AppStore（简称MAS）上购买,只有 MAS 渠道的可以使用 iCloud 同步!</span><br><span class=\"line\">  而且MAS版本的一般没有授权限制，并且不需要你用记事软件等记录license/key，省却了一堆的麻烦事！ </span><br><span class=\"line\">2.如果软件还在官网等渠道销售，而且版本迭代比 MAS 快很多，最好在其他渠道购买 </span><br><span class=\"line\">3.关注 bundlehunt，反斗限免，appshopper 等网站，购买降价，限免,或者是多个软件的低价bundle</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后续几篇预告:</span><br><span class=\"line\">1.Xcode plugin</span><br><span class=\"line\">2.Alfred workflow入门</span><br><span class=\"line\">3.Alfred workflow高手进阶</span><br><span class=\"line\">4.开发类书籍推荐</span><br><span class=\"line\"></span><br><span class=\"line\">注:前面的序号和文章发布的顺序无关</span><br></pre></td></tr></table></figure>"},{"title":"使用Swift实现基于HealthKit的睡眠分析功能","date":"2016-07-18T13:03:52.000Z","_content":"\n原文:[链接][1]\n译者:[Bluelich][2]\n\n如今,睡眠分析的彻底改变已经成为一种趋势。用户比以往更加好奇，他们不仅希望知道自己的睡眠时间，比如说什么时候开始进入睡眠等，他们还想要通过获得聚合数据来了解自己的睡眠趋势。而今，硬件和手机的技术革新，给这个正在日益增长的用户群体带来了新的曙光。\n\nApple提供了一个非常酷的方式，让你可以以非常安全的方式，通过内置的`健康`应用和用户的健康信息进行交互。你不仅仅可以通过使用`HealthKit`来[构建一个健身App][3]，该框架还允许你对用户睡眠数据进行分析。\n\n在这个教程里，我将会对`HealthKit`进行一个简单介绍，并演示如何构建一个简单的睡眠分析App。<!--More-->\n\n## 介绍\n\nHealthKit框架提供了一个叫做`HealthKit store`的加密数据库结构来保存数据。你可以通过`HKHealthStore`这个类来访问这个数据库。 iPhone和Apple Watch都有他们自己的`HealthKit Store`。 健康数据会在iPhone和Apple Watch上进行同步；需要注意的是在Apple Watch上，一旦可用空间不足，旧的数据就会被删除掉；另外`HealthKit`在iPad上无法使用。\n\n如果你想创建一个基于健康数据的iOS或watchOS应用，HealthKit将会是一个非常强大的工具。 \n它被设计为一个管理各个来源的健康数据的工具，根据用户的偏好设置，将这些数据进行聚合。这些基于`HealthKit`的App拥有在`健康`App中各自数据的读写访问权限，还可以将各自的数据进行合并。这些数据不仅包括用户身体状况的基本数据，健身信息，营养状况，还包括用户的睡眠分析数据。\n\n本文的其余部分,我将向您展示如何在iOS上利用`HealthKit`框架读写睡眠分析数据。 同样的方法也适用于watchOS应用程序。 请注意,本教程编写使用Swift 2.0 和 Xcode 7。所以确保你使用的也是Xcode 7，以便继续下面的教程。\n\n在进行下一步之前，你可以先下载这个[启动项目][4]然后解压。这是一个拥有基本功能的App。运行这个项目后，你会看到一个显示时间的计时器UI和一个开始按钮。\n\n## 使用HealthKit框架\n\n我们要实现的效果是，通过点击`Start`和`Stop`按钮来保存和查询用户的数据。要使用`HealthKit`，必须先让你的App获取到`HealthKit`权限，在工程中选中当前项目Target，然后选择Capabilities,打开`HealthKit`的开关\n![HealthKit-allow][image-1]\n接下来，你讲需要在`ViewController`中创建一个`HKHealthStore`的对象。\n代码如下：\n`let healthStore = HKHealthStore()`\n后面我们就要使用这个对象`healthStore`来访问`HealthKit store`了\n\n就像前面说的那样，HealthKit给予用户权限来掌控自己的健康数据，因此你在对用户的睡眠数据进行分析之前，需要先获得用户的许可。要获得许可，需要先引入`HealthKit`framework，然后更新`viewDidLoad`里的代码。\n\n代码如下：\n```swift\n\toverride func viewDidLoad() {\n\t    super.viewDidLoad()\n\t    let typestoRead = Set([\n\t        HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis)!\n\t        ])\n\t    let typestoShare = Set([\n\t        HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis)!\n\t        ])\n\t    self.healthStore.requestAuthorizationToShareTypes(typestoShare, readTypes: typestoRead) { (success, error) -> Void in\n\t        if success == false {\n\t            NSLog(\"请求权限失败\")\n\t        }\n\t    }\n\t}\n```\n\n这段代码将提示用户`Allow`或`Dont Allow`你的权限请求。 通过这个completion block,您可以处理成功或错误，并得到最终结果。 让用户授予App所有请求的权限并不是必要的，所以你必须优雅地处理应用程序中的错误。\n\n但对于测试的目的,你必须选择“Allow”选项给予允许应用程序访问设备的健康数据。\n\n![Health-App-Permission][image-2]\n\n\n\n## 写入睡眠分析的数据\n\n首先,我们如何检索睡眠分析数据? 根据Apple的文档,每个睡眠分析样本只能有一个值。 `HealthKit`使用两个或更多的样本的叠加来代表用户在床上和睡眠中的状态。 通过比较这些样本的开始和结束时间,应用程序可以二次统计:\n\n- 用户进入睡眠所用的时间\n- 实际睡觉的时间对比在床上的时间的百分比\n- 用户在床上醒来的次数\n- 进入睡眠和在床上的时间之和\n\n![record\\_sleep\\_data][image-3]\n\n简而言之,你需要遵循以下方法来吧睡眠分析数据保存到`HealthKit store`中:\n\n1. 我们需要定义2个 `NSDate`  对象，分别对应起始时间和结束时间。\n2. 然后用`HKCategoryTypeIdentifierSleepAnalysis`(这是一个`Enum`)创建一个 `HKObjectType`对象 .\n3. 我们需要创建一个新的`HKCategorySample`的对象,因为我们需要用这个对象来记录睡眠数据。个人样本代表了用户在床上或者睡着了的时间周期。因此我们要创建2个样本，分别是在床上的样本和睡着了的样本的时间\n4. 最后, 我们使用`HKHealthStore`的 `saveObject` 这个类方法，保存数据.\n\n**编者注**: 对于`HKCategorySample`的类型,可以查看 [HealthKit Constants Reference][5]。\n\n\n\n下面我们用Swift来实现上面的4个步骤,保存用户的睡眠数据。 请讲该代码片段放到`ViewController`类中。\n\n代码如下：\n\n```swift\nfunc saveSleepAnalysis() {\n\t// alarmTime 和 endTime 都是 NSDate 对象\n\tif let sleepType = HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) {\n\t\n\t    // 根据我们想要做的事情,选择相应的类型和起止时间，构造出一个新的HKCategorySample对象，我们将通过这个对象和系统的Health应用进行交互\n\t    let object = HKCategorySample(type:sleepType, value: HKCategoryValueSleepAnalysis.InBed.rawValue, startDate: self.alarmTime, endDate: self.endTime)\n\t\n\t    // 然后，保存下来\n\t    healthStore.saveObject(object, withCompletion: { (success, error) -> Void in\n\t\n\t        if error != nil {\n\t            // 这里可以处理下error\n\t            return\n\t        }\n\t\n\t        if success {\n\t            print(\"数据已经保存到Health App中了\")\n\t\n\t        } else {\n\t            // 处理其他异常\n\t        }\n\t\n\t    })\n\t\n\t    let object2 = HKCategorySample(type:sleepType, value: HKCategoryValueSleepAnalysis.Asleep.rawValue, startDate: self.alarmTime, endDate: self.endTime)\n\t\n\t    healthStore.saveObject(object2, withCompletion: { (success, error) -> Void in\n\t        if error != nil {\n\t            // 这里可以处理下error\n\t            return\n\t        }\n\t\n\t        if success {\n\t            print(\"数据已经保存到Health App中了\")\n\t        } else {\n\t            // 处理其他异常\n\t        }\n\t\n\t    })\n\t\n\t}\n}\n```\n\n当我们想要保存我们自己App的睡眠数据到HealthKit的时候，可以调用这个方法。\n\n## 读取睡眠分析数据\n\n要读取睡眠分析数据,我们需要创建一个`HKSampleQuery`来进行查询。 通过指定`HKCategoryTypeIdentifierSleepAnalysis`来创建一个`HKObjectType` 的对象 。 您可能还希望使用谓词来过滤获取到的数据，你可以通过指定`startDate` 和`endDate` 来确定你要查询的时间范围。 你可能还想要创建一个sortDescriptor 来对最终结果进行排序。\n\n获取睡眠分析结果数据的代码如下：\n\n```swift\nfunc retrieveSleepAnalysis() {\n\t// 首先，通过构造一个HKObjectType，来指定我们要查询的类型\n\tif let sleepType = HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) {\n\t\n\t    // 使用sortDescriptor来获取到最新的数据\n\t    let sortDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false)\n\t\n\t    // 创建一次查询，在下一步执行查询后，会回调这个构造函数的block，我们可以通过这个回调来对获取的结果进行处理\n\t    let query = HKSampleQuery(sampleType: sleepType, predicate: nil, limit: 30, sortDescriptors: [sortDescriptor]) { (query, tmpResult, error) -> Void in\n\t\n\t        if error != nil {\n\t\n\t            // 这里可以处理下error\n\t            return\n\t\n\t        }\n\t\n\t        if let result = tmpResult {\n\t\n\t            // 处理数据\n\t            for item in result {\n\t                if let sample = item as? HKCategorySample {\n\t                    let value = (sample.value == HKCategoryValueSleepAnalysis.InBed.rawValue) ? \"InBed\" : \"Asleep\"\n\t                    print(\"Healthkit sleep: \\(sample.startDate) \\(sample.endDate) - value: \\(value)\")\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // 最后执行查询\n\t    healthStore.executeQuery(query)\n\t}\n}\n```\n\n这段代码做的事情是：指定期望为降序排列，然后向`HealthKit`查询所有的睡眠数据。然后每个查询结果都会打印(开始时间，结束时间，睡眠状态)。在构造查询对象时，通过设置`limit: 30`来指定需要查询的条数为30条，因为前面的期望为降序排列，所以是最近的30条记录，你可以通过指定`predicate`来限定你想要获取记录的开始和结束时间。\n\n\n\n## App测试\n\n在这个demo中，当你点击`Start`按钮的时候，我使用了NSTimer来刷新Label的显示，以表示时间的累加。当你点击`Start`和`Stop`按钮的时候，会分别创建一个`NSDate`对象来保存当前时间。当你点击`Stop`按钮的时候，会计算2个时间的时间差，然后根据这个时间，保存用户的睡眠数据，在`func stop(sender: AnyObject)`中，你可以调用`saveSleepAnalysis()` 和 `retrieveSleepAnalysis()` 方法来保存和获取用户的睡眠数据。\n\n```swift\n@IBAction func stop(sender: AnyObject) {\n\tendTime = NSDate()\n\tsaveSleepAnalysis()\n\tretrieveSleepAnalysis()\n\ttimer.invalidate()\n}\n```\n\n在你的App中，你可能想要修改NSDate对象来选择相关的开始和结束时间(可能是不同的)来保存在床上和睡着了的状态下的数据。\n\n一旦你做出了更改，你就可以运行这个demo，接着启动timer。让app运行几分钟，然后点击`Stop`按钮。然后，打开`Health`应用，你会发现你的App的睡眠数据已经保存在里面了。\n\n![sleep-analysis-test][image-4]\n\n\n\n## 给HealthKit Apps的一些建议\n\nHealthKit旨在给开发者提供一个公共的平台，用于非常便利地访问和共享用户的健康数据，并且避免任何可能状况下的重复或者异常数据。Apple的审核指南非常明确地指出，如果你App使用了HealthKit来向用户请求读写健康数据的权限，但是不能给出明确的用途的话，你的App是会被拒的。\n\n保存虚假数据或者不正确的数据到Helath应用的App也会被拒。这意味着，你不能轻信你的App中那些计算健康数据的算法(比如在这个教程中的睡眠分析)。你应该尝试使用内置的传感器数据来读取和操作任何参数，以避免计算出错误的数据。\n\n在[这里][6]，你可以下载到这个教程对应的完整项目。\n\n[1]:\thttp://www.appcoda.com/sleep-analysis-healthkit/\n[2]:\thttp://weibo.com/u/1376767097\n[3]:\thttps://www.appcoda.com/healthkit-introduction/\n[4]:\thttps://github.com/appcoda/SleepAnalysis/blob/master/SleepAnalysisStarter.zip?raw=true\n[5]:\thttps://developer.apple.com/library/ios/documentation/HealthKit/Reference/HealthKit_Constants/index.html#//apple_ref/doc/uid/TP40014710\n[6]:\thttps://github.com/appcoda/SleepAnalysis\n\n[image-1]:\thttp://www.appcoda.com/wp-content/uploads/2016/05/HealthKit-allow-1024x640.png\n[image-2]:\thttp://www.appcoda.com/wp-content/uploads/2016/05/Health-App-Permission.png\n[image-3]:\thttp://www.appcoda.com/wp-content/uploads/2016/05/record_sleep_data-1024x525.png\n[image-4]:\thttp://www.appcoda.com/wp-content/uploads/2016/06/sleep-analysis-test-1024x725.png\n\n","source":"_posts/Using-Sleep-Analysis-in-HealthKit-with-Swift.md","raw":"---\ntitle: 使用Swift实现基于HealthKit的睡眠分析功能\ndate: 2016-07-18 21:03:52\ntags:\n---\n\n原文:[链接][1]\n译者:[Bluelich][2]\n\n如今,睡眠分析的彻底改变已经成为一种趋势。用户比以往更加好奇，他们不仅希望知道自己的睡眠时间，比如说什么时候开始进入睡眠等，他们还想要通过获得聚合数据来了解自己的睡眠趋势。而今，硬件和手机的技术革新，给这个正在日益增长的用户群体带来了新的曙光。\n\nApple提供了一个非常酷的方式，让你可以以非常安全的方式，通过内置的`健康`应用和用户的健康信息进行交互。你不仅仅可以通过使用`HealthKit`来[构建一个健身App][3]，该框架还允许你对用户睡眠数据进行分析。\n\n在这个教程里，我将会对`HealthKit`进行一个简单介绍，并演示如何构建一个简单的睡眠分析App。<!--More-->\n\n## 介绍\n\nHealthKit框架提供了一个叫做`HealthKit store`的加密数据库结构来保存数据。你可以通过`HKHealthStore`这个类来访问这个数据库。 iPhone和Apple Watch都有他们自己的`HealthKit Store`。 健康数据会在iPhone和Apple Watch上进行同步；需要注意的是在Apple Watch上，一旦可用空间不足，旧的数据就会被删除掉；另外`HealthKit`在iPad上无法使用。\n\n如果你想创建一个基于健康数据的iOS或watchOS应用，HealthKit将会是一个非常强大的工具。 \n它被设计为一个管理各个来源的健康数据的工具，根据用户的偏好设置，将这些数据进行聚合。这些基于`HealthKit`的App拥有在`健康`App中各自数据的读写访问权限，还可以将各自的数据进行合并。这些数据不仅包括用户身体状况的基本数据，健身信息，营养状况，还包括用户的睡眠分析数据。\n\n本文的其余部分,我将向您展示如何在iOS上利用`HealthKit`框架读写睡眠分析数据。 同样的方法也适用于watchOS应用程序。 请注意,本教程编写使用Swift 2.0 和 Xcode 7。所以确保你使用的也是Xcode 7，以便继续下面的教程。\n\n在进行下一步之前，你可以先下载这个[启动项目][4]然后解压。这是一个拥有基本功能的App。运行这个项目后，你会看到一个显示时间的计时器UI和一个开始按钮。\n\n## 使用HealthKit框架\n\n我们要实现的效果是，通过点击`Start`和`Stop`按钮来保存和查询用户的数据。要使用`HealthKit`，必须先让你的App获取到`HealthKit`权限，在工程中选中当前项目Target，然后选择Capabilities,打开`HealthKit`的开关\n![HealthKit-allow][image-1]\n接下来，你讲需要在`ViewController`中创建一个`HKHealthStore`的对象。\n代码如下：\n`let healthStore = HKHealthStore()`\n后面我们就要使用这个对象`healthStore`来访问`HealthKit store`了\n\n就像前面说的那样，HealthKit给予用户权限来掌控自己的健康数据，因此你在对用户的睡眠数据进行分析之前，需要先获得用户的许可。要获得许可，需要先引入`HealthKit`framework，然后更新`viewDidLoad`里的代码。\n\n代码如下：\n```swift\n\toverride func viewDidLoad() {\n\t    super.viewDidLoad()\n\t    let typestoRead = Set([\n\t        HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis)!\n\t        ])\n\t    let typestoShare = Set([\n\t        HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis)!\n\t        ])\n\t    self.healthStore.requestAuthorizationToShareTypes(typestoShare, readTypes: typestoRead) { (success, error) -> Void in\n\t        if success == false {\n\t            NSLog(\"请求权限失败\")\n\t        }\n\t    }\n\t}\n```\n\n这段代码将提示用户`Allow`或`Dont Allow`你的权限请求。 通过这个completion block,您可以处理成功或错误，并得到最终结果。 让用户授予App所有请求的权限并不是必要的，所以你必须优雅地处理应用程序中的错误。\n\n但对于测试的目的,你必须选择“Allow”选项给予允许应用程序访问设备的健康数据。\n\n![Health-App-Permission][image-2]\n\n\n\n## 写入睡眠分析的数据\n\n首先,我们如何检索睡眠分析数据? 根据Apple的文档,每个睡眠分析样本只能有一个值。 `HealthKit`使用两个或更多的样本的叠加来代表用户在床上和睡眠中的状态。 通过比较这些样本的开始和结束时间,应用程序可以二次统计:\n\n- 用户进入睡眠所用的时间\n- 实际睡觉的时间对比在床上的时间的百分比\n- 用户在床上醒来的次数\n- 进入睡眠和在床上的时间之和\n\n![record\\_sleep\\_data][image-3]\n\n简而言之,你需要遵循以下方法来吧睡眠分析数据保存到`HealthKit store`中:\n\n1. 我们需要定义2个 `NSDate`  对象，分别对应起始时间和结束时间。\n2. 然后用`HKCategoryTypeIdentifierSleepAnalysis`(这是一个`Enum`)创建一个 `HKObjectType`对象 .\n3. 我们需要创建一个新的`HKCategorySample`的对象,因为我们需要用这个对象来记录睡眠数据。个人样本代表了用户在床上或者睡着了的时间周期。因此我们要创建2个样本，分别是在床上的样本和睡着了的样本的时间\n4. 最后, 我们使用`HKHealthStore`的 `saveObject` 这个类方法，保存数据.\n\n**编者注**: 对于`HKCategorySample`的类型,可以查看 [HealthKit Constants Reference][5]。\n\n\n\n下面我们用Swift来实现上面的4个步骤,保存用户的睡眠数据。 请讲该代码片段放到`ViewController`类中。\n\n代码如下：\n\n```swift\nfunc saveSleepAnalysis() {\n\t// alarmTime 和 endTime 都是 NSDate 对象\n\tif let sleepType = HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) {\n\t\n\t    // 根据我们想要做的事情,选择相应的类型和起止时间，构造出一个新的HKCategorySample对象，我们将通过这个对象和系统的Health应用进行交互\n\t    let object = HKCategorySample(type:sleepType, value: HKCategoryValueSleepAnalysis.InBed.rawValue, startDate: self.alarmTime, endDate: self.endTime)\n\t\n\t    // 然后，保存下来\n\t    healthStore.saveObject(object, withCompletion: { (success, error) -> Void in\n\t\n\t        if error != nil {\n\t            // 这里可以处理下error\n\t            return\n\t        }\n\t\n\t        if success {\n\t            print(\"数据已经保存到Health App中了\")\n\t\n\t        } else {\n\t            // 处理其他异常\n\t        }\n\t\n\t    })\n\t\n\t    let object2 = HKCategorySample(type:sleepType, value: HKCategoryValueSleepAnalysis.Asleep.rawValue, startDate: self.alarmTime, endDate: self.endTime)\n\t\n\t    healthStore.saveObject(object2, withCompletion: { (success, error) -> Void in\n\t        if error != nil {\n\t            // 这里可以处理下error\n\t            return\n\t        }\n\t\n\t        if success {\n\t            print(\"数据已经保存到Health App中了\")\n\t        } else {\n\t            // 处理其他异常\n\t        }\n\t\n\t    })\n\t\n\t}\n}\n```\n\n当我们想要保存我们自己App的睡眠数据到HealthKit的时候，可以调用这个方法。\n\n## 读取睡眠分析数据\n\n要读取睡眠分析数据,我们需要创建一个`HKSampleQuery`来进行查询。 通过指定`HKCategoryTypeIdentifierSleepAnalysis`来创建一个`HKObjectType` 的对象 。 您可能还希望使用谓词来过滤获取到的数据，你可以通过指定`startDate` 和`endDate` 来确定你要查询的时间范围。 你可能还想要创建一个sortDescriptor 来对最终结果进行排序。\n\n获取睡眠分析结果数据的代码如下：\n\n```swift\nfunc retrieveSleepAnalysis() {\n\t// 首先，通过构造一个HKObjectType，来指定我们要查询的类型\n\tif let sleepType = HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) {\n\t\n\t    // 使用sortDescriptor来获取到最新的数据\n\t    let sortDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false)\n\t\n\t    // 创建一次查询，在下一步执行查询后，会回调这个构造函数的block，我们可以通过这个回调来对获取的结果进行处理\n\t    let query = HKSampleQuery(sampleType: sleepType, predicate: nil, limit: 30, sortDescriptors: [sortDescriptor]) { (query, tmpResult, error) -> Void in\n\t\n\t        if error != nil {\n\t\n\t            // 这里可以处理下error\n\t            return\n\t\n\t        }\n\t\n\t        if let result = tmpResult {\n\t\n\t            // 处理数据\n\t            for item in result {\n\t                if let sample = item as? HKCategorySample {\n\t                    let value = (sample.value == HKCategoryValueSleepAnalysis.InBed.rawValue) ? \"InBed\" : \"Asleep\"\n\t                    print(\"Healthkit sleep: \\(sample.startDate) \\(sample.endDate) - value: \\(value)\")\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // 最后执行查询\n\t    healthStore.executeQuery(query)\n\t}\n}\n```\n\n这段代码做的事情是：指定期望为降序排列，然后向`HealthKit`查询所有的睡眠数据。然后每个查询结果都会打印(开始时间，结束时间，睡眠状态)。在构造查询对象时，通过设置`limit: 30`来指定需要查询的条数为30条，因为前面的期望为降序排列，所以是最近的30条记录，你可以通过指定`predicate`来限定你想要获取记录的开始和结束时间。\n\n\n\n## App测试\n\n在这个demo中，当你点击`Start`按钮的时候，我使用了NSTimer来刷新Label的显示，以表示时间的累加。当你点击`Start`和`Stop`按钮的时候，会分别创建一个`NSDate`对象来保存当前时间。当你点击`Stop`按钮的时候，会计算2个时间的时间差，然后根据这个时间，保存用户的睡眠数据，在`func stop(sender: AnyObject)`中，你可以调用`saveSleepAnalysis()` 和 `retrieveSleepAnalysis()` 方法来保存和获取用户的睡眠数据。\n\n```swift\n@IBAction func stop(sender: AnyObject) {\n\tendTime = NSDate()\n\tsaveSleepAnalysis()\n\tretrieveSleepAnalysis()\n\ttimer.invalidate()\n}\n```\n\n在你的App中，你可能想要修改NSDate对象来选择相关的开始和结束时间(可能是不同的)来保存在床上和睡着了的状态下的数据。\n\n一旦你做出了更改，你就可以运行这个demo，接着启动timer。让app运行几分钟，然后点击`Stop`按钮。然后，打开`Health`应用，你会发现你的App的睡眠数据已经保存在里面了。\n\n![sleep-analysis-test][image-4]\n\n\n\n## 给HealthKit Apps的一些建议\n\nHealthKit旨在给开发者提供一个公共的平台，用于非常便利地访问和共享用户的健康数据，并且避免任何可能状况下的重复或者异常数据。Apple的审核指南非常明确地指出，如果你App使用了HealthKit来向用户请求读写健康数据的权限，但是不能给出明确的用途的话，你的App是会被拒的。\n\n保存虚假数据或者不正确的数据到Helath应用的App也会被拒。这意味着，你不能轻信你的App中那些计算健康数据的算法(比如在这个教程中的睡眠分析)。你应该尝试使用内置的传感器数据来读取和操作任何参数，以避免计算出错误的数据。\n\n在[这里][6]，你可以下载到这个教程对应的完整项目。\n\n[1]:\thttp://www.appcoda.com/sleep-analysis-healthkit/\n[2]:\thttp://weibo.com/u/1376767097\n[3]:\thttps://www.appcoda.com/healthkit-introduction/\n[4]:\thttps://github.com/appcoda/SleepAnalysis/blob/master/SleepAnalysisStarter.zip?raw=true\n[5]:\thttps://developer.apple.com/library/ios/documentation/HealthKit/Reference/HealthKit_Constants/index.html#//apple_ref/doc/uid/TP40014710\n[6]:\thttps://github.com/appcoda/SleepAnalysis\n\n[image-1]:\thttp://www.appcoda.com/wp-content/uploads/2016/05/HealthKit-allow-1024x640.png\n[image-2]:\thttp://www.appcoda.com/wp-content/uploads/2016/05/Health-App-Permission.png\n[image-3]:\thttp://www.appcoda.com/wp-content/uploads/2016/05/record_sleep_data-1024x525.png\n[image-4]:\thttp://www.appcoda.com/wp-content/uploads/2016/06/sleep-analysis-test-1024x725.png\n\n","slug":"Using-Sleep-Analysis-in-HealthKit-with-Swift","published":1,"updated":"2016-07-23T12:35:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjju0zbsd000of1s6na24qllj","content":"<p>原文:<a href=\"http://www.appcoda.com/sleep-analysis-healthkit/\" target=\"_blank\" rel=\"external\">链接</a><br>译者:<a href=\"http://weibo.com/u/1376767097\" target=\"_blank\" rel=\"external\">Bluelich</a></p>\n<p>如今,睡眠分析的彻底改变已经成为一种趋势。用户比以往更加好奇，他们不仅希望知道自己的睡眠时间，比如说什么时候开始进入睡眠等，他们还想要通过获得聚合数据来了解自己的睡眠趋势。而今，硬件和手机的技术革新，给这个正在日益增长的用户群体带来了新的曙光。</p>\n<p>Apple提供了一个非常酷的方式，让你可以以非常安全的方式，通过内置的<code>健康</code>应用和用户的健康信息进行交互。你不仅仅可以通过使用<code>HealthKit</code>来<a href=\"https://www.appcoda.com/healthkit-introduction/\" target=\"_blank\" rel=\"external\">构建一个健身App</a>，该框架还允许你对用户睡眠数据进行分析。</p>\n<p>在这个教程里，我将会对<code>HealthKit</code>进行一个简单介绍，并演示如何构建一个简单的睡眠分析App。<a id=\"more\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>HealthKit框架提供了一个叫做<code>HealthKit store</code>的加密数据库结构来保存数据。你可以通过<code>HKHealthStore</code>这个类来访问这个数据库。 iPhone和Apple Watch都有他们自己的<code>HealthKit Store</code>。 健康数据会在iPhone和Apple Watch上进行同步；需要注意的是在Apple Watch上，一旦可用空间不足，旧的数据就会被删除掉；另外<code>HealthKit</code>在iPad上无法使用。</p>\n<p>如果你想创建一个基于健康数据的iOS或watchOS应用，HealthKit将会是一个非常强大的工具。<br>它被设计为一个管理各个来源的健康数据的工具，根据用户的偏好设置，将这些数据进行聚合。这些基于<code>HealthKit</code>的App拥有在<code>健康</code>App中各自数据的读写访问权限，还可以将各自的数据进行合并。这些数据不仅包括用户身体状况的基本数据，健身信息，营养状况，还包括用户的睡眠分析数据。</p>\n<p>本文的其余部分,我将向您展示如何在iOS上利用<code>HealthKit</code>框架读写睡眠分析数据。 同样的方法也适用于watchOS应用程序。 请注意,本教程编写使用Swift 2.0 和 Xcode 7。所以确保你使用的也是Xcode 7，以便继续下面的教程。</p>\n<p>在进行下一步之前，你可以先下载这个<a href=\"https://github.com/appcoda/SleepAnalysis/blob/master/SleepAnalysisStarter.zip?raw=true\" target=\"_blank\" rel=\"external\">启动项目</a>然后解压。这是一个拥有基本功能的App。运行这个项目后，你会看到一个显示时间的计时器UI和一个开始按钮。</p>\n<h2 id=\"使用HealthKit框架\"><a href=\"#使用HealthKit框架\" class=\"headerlink\" title=\"使用HealthKit框架\"></a>使用HealthKit框架</h2><p>我们要实现的效果是，通过点击<code>Start</code>和<code>Stop</code>按钮来保存和查询用户的数据。要使用<code>HealthKit</code>，必须先让你的App获取到<code>HealthKit</code>权限，在工程中选中当前项目Target，然后选择Capabilities,打开<code>HealthKit</code>的开关<br><img src=\"http://www.appcoda.com/wp-content/uploads/2016/05/HealthKit-allow-1024x640.png\" alt=\"HealthKit-allow\"><br>接下来，你讲需要在<code>ViewController</code>中创建一个<code>HKHealthStore</code>的对象。<br>代码如下：<br><code>let healthStore = HKHealthStore()</code><br>后面我们就要使用这个对象<code>healthStore</code>来访问<code>HealthKit store</code>了</p>\n<p>就像前面说的那样，HealthKit给予用户权限来掌控自己的健康数据，因此你在对用户的睡眠数据进行分析之前，需要先获得用户的许可。要获得许可，需要先引入<code>HealthKit</code>framework，然后更新<code>viewDidLoad</code>里的代码。</p>\n<p>代码如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typestoRead = <span class=\"type\">Set</span>([</span><br><span class=\"line\">        <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>)!</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typestoShare = <span class=\"type\">Set</span>([</span><br><span class=\"line\">        <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>)!</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.healthStore.requestAuthorizationToShareTypes(typestoShare, readTypes: typestoRead) &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> success == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">NSLog</span>(<span class=\"string\">\"请求权限失败\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码将提示用户<code>Allow</code>或<code>Dont Allow</code>你的权限请求。 通过这个completion block,您可以处理成功或错误，并得到最终结果。 让用户授予App所有请求的权限并不是必要的，所以你必须优雅地处理应用程序中的错误。</p>\n<p>但对于测试的目的,你必须选择“Allow”选项给予允许应用程序访问设备的健康数据。</p>\n<p><img src=\"http://www.appcoda.com/wp-content/uploads/2016/05/Health-App-Permission.png\" alt=\"Health-App-Permission\"></p>\n<h2 id=\"写入睡眠分析的数据\"><a href=\"#写入睡眠分析的数据\" class=\"headerlink\" title=\"写入睡眠分析的数据\"></a>写入睡眠分析的数据</h2><p>首先,我们如何检索睡眠分析数据? 根据Apple的文档,每个睡眠分析样本只能有一个值。 <code>HealthKit</code>使用两个或更多的样本的叠加来代表用户在床上和睡眠中的状态。 通过比较这些样本的开始和结束时间,应用程序可以二次统计:</p>\n<ul>\n<li>用户进入睡眠所用的时间</li>\n<li>实际睡觉的时间对比在床上的时间的百分比</li>\n<li>用户在床上醒来的次数</li>\n<li>进入睡眠和在床上的时间之和</li>\n</ul>\n<p><img src=\"http://www.appcoda.com/wp-content/uploads/2016/05/record_sleep_data-1024x525.png\" alt=\"record\\_sleep\\_data\"></p>\n<p>简而言之,你需要遵循以下方法来吧睡眠分析数据保存到<code>HealthKit store</code>中:</p>\n<ol>\n<li>我们需要定义2个 <code>NSDate</code>  对象，分别对应起始时间和结束时间。</li>\n<li>然后用<code>HKCategoryTypeIdentifierSleepAnalysis</code>(这是一个<code>Enum</code>)创建一个 <code>HKObjectType</code>对象 .</li>\n<li>我们需要创建一个新的<code>HKCategorySample</code>的对象,因为我们需要用这个对象来记录睡眠数据。个人样本代表了用户在床上或者睡着了的时间周期。因此我们要创建2个样本，分别是在床上的样本和睡着了的样本的时间</li>\n<li>最后, 我们使用<code>HKHealthStore</code>的 <code>saveObject</code> 这个类方法，保存数据.</li>\n</ol>\n<p><strong>编者注</strong>: 对于<code>HKCategorySample</code>的类型,可以查看 <a href=\"https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HealthKit_Constants/index.html#//apple_ref/doc/uid/TP40014710\" target=\"_blank\" rel=\"external\">HealthKit Constants Reference</a>。</p>\n<p>下面我们用Swift来实现上面的4个步骤,保存用户的睡眠数据。 请讲该代码片段放到<code>ViewController</code>类中。</p>\n<p>代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">saveSleepAnalysis</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// alarmTime 和 endTime 都是 NSDate 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sleepType = <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 根据我们想要做的事情,选择相应的类型和起止时间，构造出一个新的HKCategorySample对象，我们将通过这个对象和系统的Health应用进行交互</span></span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> object = <span class=\"type\">HKCategorySample</span>(type:sleepType, value: <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">InBed</span>.rawValue, startDate: <span class=\"keyword\">self</span>.alarmTime, endDate: <span class=\"keyword\">self</span>.endTime)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 然后，保存下来</span></span><br><span class=\"line\">\t    healthStore.saveObject(object, withCompletion: &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 这里可以处理下error</span></span><br><span class=\"line\">\t            <span class=\"keyword\">return</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">\t            <span class=\"built_in\">print</span>(<span class=\"string\">\"数据已经保存到Health App中了\"</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 处理其他异常</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> object2 = <span class=\"type\">HKCategorySample</span>(type:sleepType, value: <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">Asleep</span>.rawValue, startDate: <span class=\"keyword\">self</span>.alarmTime, endDate: <span class=\"keyword\">self</span>.endTime)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    healthStore.saveObject(object2, withCompletion: &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 这里可以处理下error</span></span><br><span class=\"line\">\t            <span class=\"keyword\">return</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">\t            <span class=\"built_in\">print</span>(<span class=\"string\">\"数据已经保存到Health App中了\"</span>)</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 处理其他异常</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想要保存我们自己App的睡眠数据到HealthKit的时候，可以调用这个方法。</p>\n<h2 id=\"读取睡眠分析数据\"><a href=\"#读取睡眠分析数据\" class=\"headerlink\" title=\"读取睡眠分析数据\"></a>读取睡眠分析数据</h2><p>要读取睡眠分析数据,我们需要创建一个<code>HKSampleQuery</code>来进行查询。 通过指定<code>HKCategoryTypeIdentifierSleepAnalysis</code>来创建一个<code>HKObjectType</code> 的对象 。 您可能还希望使用谓词来过滤获取到的数据，你可以通过指定<code>startDate</code> 和<code>endDate</code> 来确定你要查询的时间范围。 你可能还想要创建一个sortDescriptor 来对最终结果进行排序。</p>\n<p>获取睡眠分析结果数据的代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieveSleepAnalysis</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 首先，通过构造一个HKObjectType，来指定我们要查询的类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sleepType = <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 使用sortDescriptor来获取到最新的数据</span></span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> sortDescriptor = <span class=\"type\">NSSortDescriptor</span>(key: <span class=\"type\">HKSampleSortIdentifierEndDate</span>, ascending: <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 创建一次查询，在下一步执行查询后，会回调这个构造函数的block，我们可以通过这个回调来对获取的结果进行处理</span></span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> query = <span class=\"type\">HKSampleQuery</span>(sampleType: sleepType, predicate: <span class=\"literal\">nil</span>, limit: <span class=\"number\">30</span>, sortDescriptors: [sortDescriptor]) &#123; (query, tmpResult, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t            <span class=\"comment\">// 这里可以处理下error</span></span><br><span class=\"line\">\t            <span class=\"keyword\">return</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> result = tmpResult &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t            <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">\t            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result &#123;</span><br><span class=\"line\">\t                <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sample = item <span class=\"keyword\">as</span>? <span class=\"type\">HKCategorySample</span> &#123;</span><br><span class=\"line\">\t                    <span class=\"keyword\">let</span> value = (sample.value == <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">InBed</span>.rawValue) ? <span class=\"string\">\"InBed\"</span> : <span class=\"string\">\"Asleep\"</span></span><br><span class=\"line\">\t                    <span class=\"built_in\">print</span>(<span class=\"string\">\"Healthkit sleep: <span class=\"subst\">\\(sample.startDate)</span> <span class=\"subst\">\\(sample.endDate)</span> - value: <span class=\"subst\">\\(value)</span>\"</span>)</span><br><span class=\"line\">\t                &#125;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 最后执行查询</span></span><br><span class=\"line\">\t    healthStore.executeQuery(query)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码做的事情是：指定期望为降序排列，然后向<code>HealthKit</code>查询所有的睡眠数据。然后每个查询结果都会打印(开始时间，结束时间，睡眠状态)。在构造查询对象时，通过设置<code>limit: 30</code>来指定需要查询的条数为30条，因为前面的期望为降序排列，所以是最近的30条记录，你可以通过指定<code>predicate</code>来限定你想要获取记录的开始和结束时间。</p>\n<h2 id=\"App测试\"><a href=\"#App测试\" class=\"headerlink\" title=\"App测试\"></a>App测试</h2><p>在这个demo中，当你点击<code>Start</code>按钮的时候，我使用了NSTimer来刷新Label的显示，以表示时间的累加。当你点击<code>Start</code>和<code>Stop</code>按钮的时候，会分别创建一个<code>NSDate</code>对象来保存当前时间。当你点击<code>Stop</code>按钮的时候，会计算2个时间的时间差，然后根据这个时间，保存用户的睡眠数据，在<code>func stop(sender: AnyObject)</code>中，你可以调用<code>saveSleepAnalysis()</code> 和 <code>retrieveSleepAnalysis()</code> 方法来保存和获取用户的睡眠数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stop</span><span class=\"params\">(sender: AnyObject)</span></span> &#123;</span><br><span class=\"line\">\tendTime = <span class=\"type\">NSDate</span>()</span><br><span class=\"line\">\tsaveSleepAnalysis()</span><br><span class=\"line\">\tretrieveSleepAnalysis()</span><br><span class=\"line\">\ttimer.invalidate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在你的App中，你可能想要修改NSDate对象来选择相关的开始和结束时间(可能是不同的)来保存在床上和睡着了的状态下的数据。</p>\n<p>一旦你做出了更改，你就可以运行这个demo，接着启动timer。让app运行几分钟，然后点击<code>Stop</code>按钮。然后，打开<code>Health</code>应用，你会发现你的App的睡眠数据已经保存在里面了。</p>\n<p><img src=\"http://www.appcoda.com/wp-content/uploads/2016/06/sleep-analysis-test-1024x725.png\" alt=\"sleep-analysis-test\"></p>\n<h2 id=\"给HealthKit-Apps的一些建议\"><a href=\"#给HealthKit-Apps的一些建议\" class=\"headerlink\" title=\"给HealthKit Apps的一些建议\"></a>给HealthKit Apps的一些建议</h2><p>HealthKit旨在给开发者提供一个公共的平台，用于非常便利地访问和共享用户的健康数据，并且避免任何可能状况下的重复或者异常数据。Apple的审核指南非常明确地指出，如果你App使用了HealthKit来向用户请求读写健康数据的权限，但是不能给出明确的用途的话，你的App是会被拒的。</p>\n<p>保存虚假数据或者不正确的数据到Helath应用的App也会被拒。这意味着，你不能轻信你的App中那些计算健康数据的算法(比如在这个教程中的睡眠分析)。你应该尝试使用内置的传感器数据来读取和操作任何参数，以避免计算出错误的数据。</p>\n<p>在<a href=\"https://github.com/appcoda/SleepAnalysis\" target=\"_blank\" rel=\"external\">这里</a>，你可以下载到这个教程对应的完整项目。</p>\n","excerpt":"<p>原文:<a href=\"http://www.appcoda.com/sleep-analysis-healthkit/\">链接</a><br>译者:<a href=\"http://weibo.com/u/1376767097\">Bluelich</a></p>\n<p>如今,睡眠分析的彻底改变已经成为一种趋势。用户比以往更加好奇，他们不仅希望知道自己的睡眠时间，比如说什么时候开始进入睡眠等，他们还想要通过获得聚合数据来了解自己的睡眠趋势。而今，硬件和手机的技术革新，给这个正在日益增长的用户群体带来了新的曙光。</p>\n<p>Apple提供了一个非常酷的方式，让你可以以非常安全的方式，通过内置的<code>健康</code>应用和用户的健康信息进行交互。你不仅仅可以通过使用<code>HealthKit</code>来<a href=\"https://www.appcoda.com/healthkit-introduction/\">构建一个健身App</a>，该框架还允许你对用户睡眠数据进行分析。</p>\n<p>在这个教程里，我将会对<code>HealthKit</code>进行一个简单介绍，并演示如何构建一个简单的睡眠分析App。","more":"</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>HealthKit框架提供了一个叫做<code>HealthKit store</code>的加密数据库结构来保存数据。你可以通过<code>HKHealthStore</code>这个类来访问这个数据库。 iPhone和Apple Watch都有他们自己的<code>HealthKit Store</code>。 健康数据会在iPhone和Apple Watch上进行同步；需要注意的是在Apple Watch上，一旦可用空间不足，旧的数据就会被删除掉；另外<code>HealthKit</code>在iPad上无法使用。</p>\n<p>如果你想创建一个基于健康数据的iOS或watchOS应用，HealthKit将会是一个非常强大的工具。<br>它被设计为一个管理各个来源的健康数据的工具，根据用户的偏好设置，将这些数据进行聚合。这些基于<code>HealthKit</code>的App拥有在<code>健康</code>App中各自数据的读写访问权限，还可以将各自的数据进行合并。这些数据不仅包括用户身体状况的基本数据，健身信息，营养状况，还包括用户的睡眠分析数据。</p>\n<p>本文的其余部分,我将向您展示如何在iOS上利用<code>HealthKit</code>框架读写睡眠分析数据。 同样的方法也适用于watchOS应用程序。 请注意,本教程编写使用Swift 2.0 和 Xcode 7。所以确保你使用的也是Xcode 7，以便继续下面的教程。</p>\n<p>在进行下一步之前，你可以先下载这个<a href=\"https://github.com/appcoda/SleepAnalysis/blob/master/SleepAnalysisStarter.zip?raw=true\">启动项目</a>然后解压。这是一个拥有基本功能的App。运行这个项目后，你会看到一个显示时间的计时器UI和一个开始按钮。</p>\n<h2 id=\"使用HealthKit框架\"><a href=\"#使用HealthKit框架\" class=\"headerlink\" title=\"使用HealthKit框架\"></a>使用HealthKit框架</h2><p>我们要实现的效果是，通过点击<code>Start</code>和<code>Stop</code>按钮来保存和查询用户的数据。要使用<code>HealthKit</code>，必须先让你的App获取到<code>HealthKit</code>权限，在工程中选中当前项目Target，然后选择Capabilities,打开<code>HealthKit</code>的开关<br><img src=\"http://www.appcoda.com/wp-content/uploads/2016/05/HealthKit-allow-1024x640.png\" alt=\"HealthKit-allow\"><br>接下来，你讲需要在<code>ViewController</code>中创建一个<code>HKHealthStore</code>的对象。<br>代码如下：<br><code>let healthStore = HKHealthStore()</code><br>后面我们就要使用这个对象<code>healthStore</code>来访问<code>HealthKit store</code>了</p>\n<p>就像前面说的那样，HealthKit给予用户权限来掌控自己的健康数据，因此你在对用户的睡眠数据进行分析之前，需要先获得用户的许可。要获得许可，需要先引入<code>HealthKit</code>framework，然后更新<code>viewDidLoad</code>里的代码。</p>\n<p>代码如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typestoRead = <span class=\"type\">Set</span>([</span><br><span class=\"line\">        <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>)!</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typestoShare = <span class=\"type\">Set</span>([</span><br><span class=\"line\">        <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>)!</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.healthStore.requestAuthorizationToShareTypes(typestoShare, readTypes: typestoRead) &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> success == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">NSLog</span>(<span class=\"string\">\"请求权限失败\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码将提示用户<code>Allow</code>或<code>Dont Allow</code>你的权限请求。 通过这个completion block,您可以处理成功或错误，并得到最终结果。 让用户授予App所有请求的权限并不是必要的，所以你必须优雅地处理应用程序中的错误。</p>\n<p>但对于测试的目的,你必须选择“Allow”选项给予允许应用程序访问设备的健康数据。</p>\n<p><img src=\"http://www.appcoda.com/wp-content/uploads/2016/05/Health-App-Permission.png\" alt=\"Health-App-Permission\"></p>\n<h2 id=\"写入睡眠分析的数据\"><a href=\"#写入睡眠分析的数据\" class=\"headerlink\" title=\"写入睡眠分析的数据\"></a>写入睡眠分析的数据</h2><p>首先,我们如何检索睡眠分析数据? 根据Apple的文档,每个睡眠分析样本只能有一个值。 <code>HealthKit</code>使用两个或更多的样本的叠加来代表用户在床上和睡眠中的状态。 通过比较这些样本的开始和结束时间,应用程序可以二次统计:</p>\n<ul>\n<li>用户进入睡眠所用的时间</li>\n<li>实际睡觉的时间对比在床上的时间的百分比</li>\n<li>用户在床上醒来的次数</li>\n<li>进入睡眠和在床上的时间之和</li>\n</ul>\n<p><img src=\"http://www.appcoda.com/wp-content/uploads/2016/05/record_sleep_data-1024x525.png\" alt=\"record\\_sleep\\_data\"></p>\n<p>简而言之,你需要遵循以下方法来吧睡眠分析数据保存到<code>HealthKit store</code>中:</p>\n<ol>\n<li>我们需要定义2个 <code>NSDate</code>  对象，分别对应起始时间和结束时间。</li>\n<li>然后用<code>HKCategoryTypeIdentifierSleepAnalysis</code>(这是一个<code>Enum</code>)创建一个 <code>HKObjectType</code>对象 .</li>\n<li>我们需要创建一个新的<code>HKCategorySample</code>的对象,因为我们需要用这个对象来记录睡眠数据。个人样本代表了用户在床上或者睡着了的时间周期。因此我们要创建2个样本，分别是在床上的样本和睡着了的样本的时间</li>\n<li>最后, 我们使用<code>HKHealthStore</code>的 <code>saveObject</code> 这个类方法，保存数据.</li>\n</ol>\n<p><strong>编者注</strong>: 对于<code>HKCategorySample</code>的类型,可以查看 <a href=\"https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HealthKit_Constants/index.html#//apple_ref/doc/uid/TP40014710\">HealthKit Constants Reference</a>。</p>\n<p>下面我们用Swift来实现上面的4个步骤,保存用户的睡眠数据。 请讲该代码片段放到<code>ViewController</code>类中。</p>\n<p>代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">saveSleepAnalysis</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// alarmTime 和 endTime 都是 NSDate 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sleepType = <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 根据我们想要做的事情,选择相应的类型和起止时间，构造出一个新的HKCategorySample对象，我们将通过这个对象和系统的Health应用进行交互</span></span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> object = <span class=\"type\">HKCategorySample</span>(type:sleepType, value: <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">InBed</span>.rawValue, startDate: <span class=\"keyword\">self</span>.alarmTime, endDate: <span class=\"keyword\">self</span>.endTime)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 然后，保存下来</span></span><br><span class=\"line\">\t    healthStore.saveObject(object, withCompletion: &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 这里可以处理下error</span></span><br><span class=\"line\">\t            <span class=\"keyword\">return</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">\t            <span class=\"built_in\">print</span>(<span class=\"string\">\"数据已经保存到Health App中了\"</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 处理其他异常</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> object2 = <span class=\"type\">HKCategorySample</span>(type:sleepType, value: <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">Asleep</span>.rawValue, startDate: <span class=\"keyword\">self</span>.alarmTime, endDate: <span class=\"keyword\">self</span>.endTime)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    healthStore.saveObject(object2, withCompletion: &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 这里可以处理下error</span></span><br><span class=\"line\">\t            <span class=\"keyword\">return</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">\t            <span class=\"built_in\">print</span>(<span class=\"string\">\"数据已经保存到Health App中了\"</span>)</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"comment\">// 处理其他异常</span></span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    &#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想要保存我们自己App的睡眠数据到HealthKit的时候，可以调用这个方法。</p>\n<h2 id=\"读取睡眠分析数据\"><a href=\"#读取睡眠分析数据\" class=\"headerlink\" title=\"读取睡眠分析数据\"></a>读取睡眠分析数据</h2><p>要读取睡眠分析数据,我们需要创建一个<code>HKSampleQuery</code>来进行查询。 通过指定<code>HKCategoryTypeIdentifierSleepAnalysis</code>来创建一个<code>HKObjectType</code> 的对象 。 您可能还希望使用谓词来过滤获取到的数据，你可以通过指定<code>startDate</code> 和<code>endDate</code> 来确定你要查询的时间范围。 你可能还想要创建一个sortDescriptor 来对最终结果进行排序。</p>\n<p>获取睡眠分析结果数据的代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieveSleepAnalysis</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 首先，通过构造一个HKObjectType，来指定我们要查询的类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sleepType = <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 使用sortDescriptor来获取到最新的数据</span></span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> sortDescriptor = <span class=\"type\">NSSortDescriptor</span>(key: <span class=\"type\">HKSampleSortIdentifierEndDate</span>, ascending: <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 创建一次查询，在下一步执行查询后，会回调这个构造函数的block，我们可以通过这个回调来对获取的结果进行处理</span></span><br><span class=\"line\">\t    <span class=\"keyword\">let</span> query = <span class=\"type\">HKSampleQuery</span>(sampleType: sleepType, predicate: <span class=\"literal\">nil</span>, limit: <span class=\"number\">30</span>, sortDescriptors: [sortDescriptor]) &#123; (query, tmpResult, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t            <span class=\"comment\">// 这里可以处理下error</span></span><br><span class=\"line\">\t            <span class=\"keyword\">return</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> result = tmpResult &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t            <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">\t            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result &#123;</span><br><span class=\"line\">\t                <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sample = item <span class=\"keyword\">as</span>? <span class=\"type\">HKCategorySample</span> &#123;</span><br><span class=\"line\">\t                    <span class=\"keyword\">let</span> value = (sample.value == <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">InBed</span>.rawValue) ? <span class=\"string\">\"InBed\"</span> : <span class=\"string\">\"Asleep\"</span></span><br><span class=\"line\">\t                    <span class=\"built_in\">print</span>(<span class=\"string\">\"Healthkit sleep: <span class=\"subst\">\\(sample.startDate)</span> <span class=\"subst\">\\(sample.endDate)</span> - value: <span class=\"subst\">\\(value)</span>\"</span>)</span><br><span class=\"line\">\t                &#125;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t    <span class=\"comment\">// 最后执行查询</span></span><br><span class=\"line\">\t    healthStore.executeQuery(query)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码做的事情是：指定期望为降序排列，然后向<code>HealthKit</code>查询所有的睡眠数据。然后每个查询结果都会打印(开始时间，结束时间，睡眠状态)。在构造查询对象时，通过设置<code>limit: 30</code>来指定需要查询的条数为30条，因为前面的期望为降序排列，所以是最近的30条记录，你可以通过指定<code>predicate</code>来限定你想要获取记录的开始和结束时间。</p>\n<h2 id=\"App测试\"><a href=\"#App测试\" class=\"headerlink\" title=\"App测试\"></a>App测试</h2><p>在这个demo中，当你点击<code>Start</code>按钮的时候，我使用了NSTimer来刷新Label的显示，以表示时间的累加。当你点击<code>Start</code>和<code>Stop</code>按钮的时候，会分别创建一个<code>NSDate</code>对象来保存当前时间。当你点击<code>Stop</code>按钮的时候，会计算2个时间的时间差，然后根据这个时间，保存用户的睡眠数据，在<code>func stop(sender: AnyObject)</code>中，你可以调用<code>saveSleepAnalysis()</code> 和 <code>retrieveSleepAnalysis()</code> 方法来保存和获取用户的睡眠数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stop</span><span class=\"params\">(sender: AnyObject)</span></span> &#123;</span><br><span class=\"line\">\tendTime = <span class=\"type\">NSDate</span>()</span><br><span class=\"line\">\tsaveSleepAnalysis()</span><br><span class=\"line\">\tretrieveSleepAnalysis()</span><br><span class=\"line\">\ttimer.invalidate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在你的App中，你可能想要修改NSDate对象来选择相关的开始和结束时间(可能是不同的)来保存在床上和睡着了的状态下的数据。</p>\n<p>一旦你做出了更改，你就可以运行这个demo，接着启动timer。让app运行几分钟，然后点击<code>Stop</code>按钮。然后，打开<code>Health</code>应用，你会发现你的App的睡眠数据已经保存在里面了。</p>\n<p><img src=\"http://www.appcoda.com/wp-content/uploads/2016/06/sleep-analysis-test-1024x725.png\" alt=\"sleep-analysis-test\"></p>\n<h2 id=\"给HealthKit-Apps的一些建议\"><a href=\"#给HealthKit-Apps的一些建议\" class=\"headerlink\" title=\"给HealthKit Apps的一些建议\"></a>给HealthKit Apps的一些建议</h2><p>HealthKit旨在给开发者提供一个公共的平台，用于非常便利地访问和共享用户的健康数据，并且避免任何可能状况下的重复或者异常数据。Apple的审核指南非常明确地指出，如果你App使用了HealthKit来向用户请求读写健康数据的权限，但是不能给出明确的用途的话，你的App是会被拒的。</p>\n<p>保存虚假数据或者不正确的数据到Helath应用的App也会被拒。这意味着，你不能轻信你的App中那些计算健康数据的算法(比如在这个教程中的睡眠分析)。你应该尝试使用内置的传感器数据来读取和操作任何参数，以避免计算出错误的数据。</p>\n<p>在<a href=\"https://github.com/appcoda/SleepAnalysis\">这里</a>，你可以下载到这个教程对应的完整项目。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjju0zbnj0000f1s6lonmgc71","tag_id":"cjju0zbno0002f1s6k4q1pb1e","_id":"cjju0zbnt0007f1s6iu5kcx14"},{"post_id":"cjju0zbns0006f1s6i5psytlf","tag_id":"cjju0zbno0002f1s6k4q1pb1e","_id":"cjju0zbnt0008f1s6egq27ik1"},{"post_id":"cjju0zbnn0001f1s68xdmmtp8","tag_id":"cjju0zbns0005f1s6vcess165","_id":"cjju0zbnv000bf1s6ooucxmht"},{"post_id":"cjju0zbnn0001f1s68xdmmtp8","tag_id":"cjju0zbnu0009f1s60p586nez","_id":"cjju0zbnv000cf1s6bhppog7a"},{"post_id":"cjju0zbnp0003f1s6m6kdcu9p","tag_id":"cjju0zbns0005f1s6vcess165","_id":"cjju0zbnw000hf1s6bmm9fq6c"},{"post_id":"cjju0zbnp0003f1s6m6kdcu9p","tag_id":"cjju0zbnv000df1s67ph3kckr","_id":"cjju0zbnw000if1s6vxtmnr9d"},{"post_id":"cjju0zbnp0003f1s6m6kdcu9p","tag_id":"cjju0zbnw000ef1s6j5cldrgr","_id":"cjju0zbnx000jf1s6rpmiirqa"},{"post_id":"cjju0zbnp0003f1s6m6kdcu9p","tag_id":"cjju0zbnw000ff1s6yy106d22","_id":"cjju0zbnx000kf1s6riinkgjl"},{"post_id":"cjju0zbnr0004f1s6a27yguyv","tag_id":"cjju0zbnw000gf1s6s8aowjww","_id":"cjju0zbnx000lf1s6yjye75al"}],"Tag":[{"name":"转载","_id":"cjju0zbno0002f1s6k4q1pb1e"},{"name":"iOS","_id":"cjju0zbns0005f1s6vcess165"},{"name":"Runloop","_id":"cjju0zbnu0009f1s60p586nez"},{"name":"macOS","_id":"cjju0zbnv000df1s67ph3kckr"},{"name":"Xcode","_id":"cjju0zbnw000ef1s6j5cldrgr"},{"name":"多进程","_id":"cjju0zbnw000ff1s6yy106d22"},{"name":"算法","_id":"cjju0zbnw000gf1s6s8aowjww"}]}}